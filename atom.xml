<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不熬夜的喵</title>
  
  <subtitle>夏天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-02T08:41:26.962Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LiuLi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Hexo+GitHub搭建个人博客(二)</title>
    <link href="http://yoursite.com/2019/09/30/hexo/hexo%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/09/30/hexo/hexo配置/</id>
    <published>2019-09-30T06:55:00.000Z</published>
    <updated>2019-10-02T08:41:26.962Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装好hexo后，可进行各项配置</p></blockquote><h3 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h3><p>使用：<code>hexo new page “about”</code>新建一个 关于我 页面。<br>主题的<code>_config.yml</code>文件中的 <code>menu</code> 中进行匹配<br>不同主题 <code>_config. yml</code>文件有区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /      //主页</span><br><span class="line">  categories: /categories //分类</span><br><span class="line">  archives: /archives   //归档</span><br><span class="line">  tags: /tags   //标签</span><br><span class="line">  about: /about   //关于                  （添加此行即可）</span><br><span class="line">或    </span><br><span class="line">menu:</span><br><span class="line">  - page: home</span><br><span class="line">    directory: .      //主页</span><br><span class="line">    icon: fa-home</span><br><span class="line">  - page: archive</span><br><span class="line">    directory: archives/    //归档</span><br><span class="line">    icon: fa-archive</span><br><span class="line">  - page: about</span><br><span class="line">    directory: about/    //关于</span><br><span class="line">    icon: fa-user</span><br><span class="line">  - page: rss</span><br><span class="line">    directory: atom.xml    //rss订阅</span><br><span class="line">    icon: fa-rss</span><br></pre></td></tr></table></figure><p>编辑 about 关于页面 md文件 部署就能看到</p><h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><p>使用： <code>hexo new page categories</code> 新建一个 分类 页面。<br>主题的 <code>_config.yml</code> 文件中的 <code>menu</code> 中进行匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /      //主页</span><br><span class="line">  categories: /categories //分类   </span><br><span class="line">  archives: /archives   //归档</span><br><span class="line">  tags: /tags   //标签                  </span><br><span class="line">  about: /about   //关于</span><br></pre></td></tr></table></figure><p>底下代码是一篇包含 分类 文章的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 分类测试</span><br><span class="line">categories:</span><br><span class="line">- hexo                       （这个就是文章的分类了）</span><br></pre></td></tr></table></figure><h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>hexo博客有一个专门生成RSS xml文件的插件<code>hexo-generator-feed</code><br>我们来安装它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><p>看到<code>added 3 packages</code>说明安装成功了。</p><h4 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h4><p>在博客工程文件根目录下<code>_config.yml</code>文件中添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">plugins:</span><br><span class="line">    hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br></pre></td></tr></table></figure><h4 id="生成RSS"><a href="#生成RSS" class="headerlink" title="生成RSS"></a>生成RSS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 6.33 s</span><br><span class="line">INFO  Generated: atom.xml &lt;----------成功生成atom.xml文件</span><br><span class="line">INFO  Generated: sitemap.xml</span><br><span class="line">INFO  Generated: baidusitemap.xml</span><br><span class="line">INFO  Generated: about/index.html</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装好hexo后，可进行各项配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关于页面&quot;&gt;&lt;a href=&quot;#关于页面&quot; class=&quot;headerlink&quot; title=&quot;关于页面&quot;&gt;&lt;/a&gt;关于页面&lt;/h3&gt;&lt;p&gt;使用：&lt;code&gt;he
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo+GitHub搭建个人博客(一)</title>
    <link href="http://yoursite.com/2019/09/30/hexo/%E5%88%A9%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/09/30/hexo/利用Hexo+GitHub搭建个人博客/</id>
    <published>2019-09-30T05:55:00.000Z</published>
    <updated>2019-10-02T08:41:54.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。<code>hexo</code>让我的想法变成了现实。<br>下面就简单说一下整体打搭建流程。</p><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><blockquote><p>最开始以为要把hexo安装到服务器上，后来了解后恍然大悟，他是在本地安装的，然后将我们写的markdown文件转换为静态网站文件，放到github上，利用github来作为服务器的。</p></blockquote><ol><li>安装git bash。</li><li>安装npm。</li><li>安装NodeJs</li><li>申请github账户，并创建一个仓库，命名规范为  “账户名”.github.io。</li><li>创建SSH并添加到github上。</li><li>安装hexo。</li><li>部署项目，本地测试。</li><li>上传到github上。</li></ol><p>到这一步，博客就搭建好了，域名可选择性进行关联。后续可以设置主题、添加RSS、设置评论、以及写文章。具体可参考<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。&lt;code&gt;hexo&lt;/code&gt;让我的想法变成了现实。&lt;br
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据库表命令</title>
    <link href="http://yoursite.com/2017/01/12/mysql/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/01/12/mysql/数据表命令/</id>
    <published>2017-01-12T10:59:00.000Z</published>
    <updated>2019-10-02T08:46:10.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE mydb</span><br><span class="line"></span><br><span class="line">-- 使用数据库</span><br><span class="line">USE mydb</span><br><span class="line"></span><br><span class="line">-- 查看数据表</span><br><span class="line">SHOW TABLES</span><br><span class="line"></span><br><span class="line">-- 创建表</span><br><span class="line">CREATE TABLE pet (</span><br><span class="line">NAME VARCHAR(20),</span><br><span class="line">ownerrVARCHAR(20),</span><br><span class="line">species VARCHAR(20),</span><br><span class="line">sex CHAR(1),</span><br><span class="line">birth DATE,</span><br><span class="line">death DATE);</span><br><span class="line"></span><br><span class="line">-- 显示表结构</span><br><span class="line">DESCRIBE pet;</span><br><span class="line">-- 改表的名字 </span><br><span class="line">ALTER TABLE pet RENAME TO pet2; </span><br><span class="line">ALTER TABLE pet2 RENAME TO pet; </span><br><span class="line"></span><br><span class="line">-- 约束：约束（主键Primary key、唯一性Unique、非空Not Null）</span><br><span class="line">-- 自动增张 auto_increment </span><br><span class="line">-- 外键Foreign key-----与reference table_name(col_name列名)配合使用，建表时单独使用 </span><br><span class="line">-- 删除多个表中有关联的数据----设置foreign key 为set null</span><br><span class="line"></span><br><span class="line">-- 删除表</span><br><span class="line">DROP TABLE IF EXISTS pet;</span><br><span class="line"></span><br><span class="line">-- 增加一个字段： </span><br><span class="line">ALTER TABLE pet ADD COLUMN (phone VARCHAR(11)); </span><br><span class="line"></span><br><span class="line">-- 删除一个字段</span><br><span class="line">ALTER TABLE pet DROP phone; </span><br><span class="line"></span><br><span class="line">-- 修改字段名称/类型</span><br><span class="line">ALTER TABLE pet CHANGE phone tel VARCHAR(11)</span><br><span class="line">ALTER TABLE pet CHANGE tel phone VARCHAR(11)</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO pet VALUES</span><br><span class="line">(&apos;Fluffy&apos;,&apos;Harold&apos;,&apos;cat&apos;,&apos;f&apos;,&apos;1993-02-04&apos;,NULL),</span><br><span class="line">(&apos;Claws&apos;,&apos;Gwen&apos;,&apos;cat&apos;,&apos;m&apos;,&apos;1994-03-17&apos;,NULL),</span><br><span class="line">(&apos;Buffy&apos;,&apos;Harold&apos;,&apos;dog&apos;,&apos;f&apos;,&apos;1989-05-13&apos;,NULL),</span><br><span class="line">(&apos;Fang&apos;,&apos;Benny&apos;,&apos;dog&apos;,&apos;m&apos;,&apos;1990-08-27&apos;,NULL),</span><br><span class="line">(&apos;Bowser&apos;,&apos;Diane&apos;,&apos;dog&apos;,&apos;m&apos;,&apos;1979-08-31&apos;,&apos;1995-07-29&apos;),</span><br><span class="line">(&apos;Chirpy&apos;,&apos;Gwen&apos;,&apos;bird&apos;,&apos;f&apos;,&apos;1998-09-11&apos;,NULL),</span><br><span class="line">(&apos;Whistler&apos;,&apos;Gwen&apos;,&apos;bird&apos;,&apos; &apos;,&apos;1997-12-09&apos;,NULL),</span><br><span class="line">(&apos;Puffball&apos;,&apos;Diane&apos;,&apos;hamster&apos;,&apos;f&apos;,&apos;1999-03-30&apos;,NULL),</span><br><span class="line">(&apos;Slim&apos;,&apos;Benny&apos;,&apos;snake&apos;,&apos;m&apos;,&apos;1996-04-29&apos;,NULL);</span><br><span class="line">-- 查询表数据</span><br><span class="line">SELECT * FROM pet</span><br><span class="line">-- 清空表数据</span><br><span class="line">DELETE FROM pet</span><br><span class="line">-- 此方法也会使表中的取号器(ID)从1开始</span><br><span class="line">TRUNCATE TABLE pet; </span><br><span class="line"></span><br><span class="line">-- 修改字段值</span><br><span class="line">UPDATE pet SET birth = &apos;1989-08-31&apos; WHERE NAME = &apos;Bowser&apos;</span><br><span class="line">SELECT * FROM pet WHERE NAME = &apos;Bowser&apos;</span><br></pre></td></tr></table></figure><h2 id="数据表查询"><a href="#数据表查询" class="headerlink" title="数据表查询"></a>数据表查询</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- DISTINCT 检索出每个唯一的输出记录</span><br><span class="line">SELECT DISTINCT ownerr FROM pet</span><br><span class="line"></span><br><span class="line">-- 排序 order by，对于等同但大小写不同的列，并未定义其顺序，某一列，可以使用BINARY强制执行区分大小写的分类功能，如：ORDER BY BINARY col_name. </span><br><span class="line">SELECT NAME,ownerr,birth FROM pet ORDER BY birth</span><br><span class="line">-- 默认排序是升序，可以利用关键字进行控制。DESC(降序)、ASC(升序)</span><br><span class="line">SELECT NAME,ownerr,birth FROM pet ORDER BY birth ASC</span><br><span class="line"></span><br><span class="line">-- 多列进行排序</span><br><span class="line">SELECT NAME,ownerr,birth FROM pet ORDER BY ownerr,birth DESC</span><br></pre></td></tr></table></figure><h3 id="日期计算"><a href="#日期计算" class="headerlink" title="日期计算"></a>日期计算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-- YEAR()-提取日期的年部分，MONTH()-提取月份，DAYOFMONTH()-提取所在月份中的日</span><br><span class="line">SELECT birth, YEAR(birth),MONTH(birth),DAYOFMONTH(birth) FROM pet</span><br><span class="line"></span><br><span class="line">-- RIGHT(birth,5)-提取birth的右边5个字符,LEFT - 从左边开始取，MID - 从指定位置(包括)开始取指定长度</span><br><span class="line">SELECT RIGHT(&apos;1234567890&apos;,5),LEFT(&apos;1234567890&apos;,5),MID(&apos;1234567890&apos;,2,4)</span><br><span class="line">-- 提出已近死亡的</span><br><span class="line">-- 出生月份大于当前月份，年龄-1。</span><br><span class="line">SELECT </span><br><span class="line">  NAME,</span><br><span class="line">  birth,</span><br><span class="line">  CURDATE(),</span><br><span class="line">  (YEAR(CURDATE()) - YEAR(birth)) - (RIGHT(CURDATE(), 5) &lt; RIGHT(birth, 5)) AS age </span><br><span class="line">FROM</span><br><span class="line">  pet WHERE death IS NULL  ORDER BY age</span><br><span class="line">  </span><br><span class="line"> -- 查询已死亡的年龄</span><br><span class="line"> SELECT </span><br><span class="line">  NAME,</span><br><span class="line">  birth,</span><br><span class="line">  death,</span><br><span class="line">  (YEAR(death) - YEAR(birth)) - (RIGHT(death, 5) &lt; RIGHT(birth, 5)) AS age </span><br><span class="line">FROM</span><br><span class="line">  pet WHERE death IS NOT NULL ORDER BY age</span><br><span class="line"></span><br><span class="line">-- 查询下一个月谁过生日</span><br><span class="line">SELECT * FROM pet ORDER BY MONTH(birth)</span><br><span class="line">SELECT * FROM pet WHERE MONTH(birth) = MONTH(CURDATE()) + 1</span><br><span class="line">SELECT * FROM pet WHERE MONTH(birth) = MONTH(DATE_ADD(CURDATE(),INTERVAL 1 MONTH))</span><br></pre></td></tr></table></figure><h3 id="NULL值"><a href="#NULL值" class="headerlink" title="NULL值"></a>NULL值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- NULL 值的判断，不能使用比较运算符，只能用 is null 或 is not null</span><br><span class="line">SELECT  1 = NULL, 1 &gt; NULL, 1 &lt; NULL,  1 IS NULL,  1 IS NOT NULL </span><br><span class="line"></span><br><span class="line">-- 0或 NULL意味着假而其它值意味着真。布尔运算的默认真值是1。</span><br><span class="line">SELECT 0 IS NULL, 0 IS NOT NULL, &apos;&apos; IS NULL, &apos;&apos; IS NOT NULL;</span><br></pre></td></tr></table></figure><h3 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- MySQL提供标准的SQL模式匹配，以及一种基于象Unix实用程序如vi、grep和sed的扩展正则表达式模式匹配的格式。</span><br><span class="line">-- &quot;_&quot; 匹配任何单个字符；&quot;%&quot; 匹配任意数目字符(包括零字符)，SQL的模式默认是忽略大小写。关键字 LIKE 或 NOT LINK</span><br><span class="line"></span><br><span class="line">-- 查找以b开头的name</span><br><span class="line">SELECT * FROM pet WHERE NAME LIKE &apos;b%&apos;</span><br><span class="line">-- 查找以&apos;fy&apos;结尾的名字</span><br><span class="line">SELECT * FROM pet WHERE NAME LIKE &apos;%fy&apos;</span><br><span class="line">-- 查找包含w的名字</span><br><span class="line">SELECT * FROM pet WHERE NAME LIKE &apos;%w%&apos;</span><br><span class="line">-- 查找正好是5个字符的名字</span><br><span class="line">SELECT * FROM pet WHERE NAME LIKE &apos;_____&apos;</span><br><span class="line">SELECT * FROM pet WHERE LENGTH(NAME) = 5</span><br><span class="line"></span><br><span class="line">-- MySQL提供的模式匹配的其它类型是使用扩展正则表达式。当你对这类模式进行匹配测试时，使用REGEXP和NOT REGEXP操作符(或RLIKE和NOT RLIKE，它们是同义词)。 </span><br><span class="line">-- &quot;.&quot; 匹配任何单个字符；</span><br><span class="line">-- &quot;[...]&quot; 匹配在方括号内的任何字符，为了命名字符的范围，使用一个“-”。“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字。</span><br><span class="line">-- &quot;*&quot; 匹配零个或多个在它前面的字符。例如，“x*”匹配任何数量的“x”字符，“[0-9]*”匹配任何数量的数字，而“.*”匹配任何数量的任何字符。</span><br><span class="line">-- 如果REGEXP模式与被测试值的任何地方匹配，模式就匹配(这不同于LIKE模式匹配，只有与整个值匹配，模式才匹配)。 </span><br><span class="line">-- 为了定位一个模式以便它必须匹配被测试值的开始或结尾，在模式开始处使用“^”或在模式的结尾用“$”。</span><br><span class="line"></span><br><span class="line">-- 查找以b开头的name</span><br><span class="line">SELECT * FROM pet WHERE NAME REGEXP &apos;^b&apos;</span><br><span class="line">-- 查找以&apos;fy&apos;结尾的名字</span><br><span class="line">SELECT * FROM pet WHERE NAME REGEXP &apos;fy$&apos;</span><br><span class="line">-- 查找包含w的名字</span><br><span class="line">SELECT * FROM pet WHERE NAME REGEXP &apos;w&apos;</span><br><span class="line">-- 查找正好是5个字符的名字</span><br><span class="line">SELECT * FROM pet WHERE NAME REGEXP &apos;^.....$&apos;</span><br><span class="line">SELECT * FROM pet WHERE NAME REGEXP &apos;^.&#123;5&#125;$&apos;</span><br></pre></td></tr></table></figure><p><a href="http://tool.oschina.net/uploads/apidocs/mysql-5.1-zh/regexp.html" target="_blank" rel="noopener">正则表达式在线参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据表操作&quot;&gt;&lt;a href=&quot;#数据表操作&quot; class=&quot;headerlink&quot; title=&quot;数据表操作&quot;&gt;&lt;/a&gt;数据表操作&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySql常用信息函数</title>
    <link href="http://yoursite.com/2017/01/12/mysql/mysql%E5%B8%B8%E7%94%A8%E4%BF%A1%E6%81%AF%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/01/12/mysql/mysql常用信息函数/</id>
    <published>2017-01-12T08:59:00.000Z</published>
    <updated>2019-10-02T08:40:22.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 管理员登录</span></span><br><span class="line">mysql -uroot</span><br><span class="line"><span class="comment">-- 查看当前服务器版本</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line"><span class="comment">-- 查看当前使用的数据库</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br><span class="line"><span class="comment">-- 当前用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_user</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询当前日期、时间、日期+时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">curdate</span>(),<span class="keyword">curtime</span>(),<span class="keyword">now</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_date</span>(),<span class="keyword">current_time</span>(),<span class="keyword">current_timestamp</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="comment">-- 显示所有库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="comment">-- 查看标准建库语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> db_name;</span><br><span class="line"><span class="comment">-- 查看标准建表语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tb_name;</span><br><span class="line"><span class="comment">-- 查看表字段信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> <span class="keyword">columns</span> <span class="keyword">from</span> tname;</span><br><span class="line"><span class="comment">-- 显示当前数据库服务器支持的存储引擎</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;</span><br><span class="line"><span class="comment">-- 查询当前服务器所支持的字符集。</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">charset</span>;</span><br></pre></td></tr></table></figure><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><ul><li>MyISAM 不支持事务，速度快，引用最多的引擎</li><li>InnoDB 支持事务</li></ul><h2 id="常见支持简体中文的字符集"><a href="#常见支持简体中文的字符集" class="headerlink" title="常见支持简体中文的字符集"></a>常见支持简体中文的字符集</h2><p>我国定制，支持中文简体、繁体 日文。<br>gb2312 简体中文，只支持6763简体汉字<br>gbk 简繁体支持<br>gb18030 </p><p>utf-8 美国制定，支持所有国家语言</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Git远程操作详解</title>
    <link href="http://yoursite.com/2016/01/11/git/Git%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/01/11/git/Git远程操作详解/</id>
    <published>2016-01-11T08:22:00.000Z</published>
    <updated>2019-10-02T08:42:18.966Z</updated>
    
    <content type="html"><![CDATA[<p>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone</span><br><span class="line"></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line">git fetch</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。</p><h2 id="一、git-clone"><a href="#一、git-clone" class="headerlink" title="一、git clone"></a>一、git clone</h2><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git clone &lt;版本库的网址&gt;</span><br></pre></td></tr></table></figure><p>比如，克隆jQuery的版本库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure><p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure><p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> git clone http[s]://example.com/path/to/repo.git/</span><br><span class="line"> git clone ssh://example.com/path/to/repo.git/</span><br><span class="line"> git clone git://example.com/path/to/repo.git/</span><br><span class="line"> git clone /opt/git/project.git </span><br><span class="line"> git clone file:///opt/git/project.git</span><br><span class="line"> git clone ftp[s]://example.com/path/to/repo.git/</span><br><span class="line"> git clone rsync://example.com/path/to/repo.git/</span><br></pre></td></tr></table></figure><p>SSH协议还有另一种写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git clone [user@]example.com:path/to/repo.git/</span><br></pre></td></tr></table></figure><p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。</p><h2 id="二、git-remote"><a href="#二、git-remote" class="headerlink" title="二、git remote"></a>二、git remote</h2><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</p><p>不带选项的时候，git remote命令列出所有远程主机。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>使用-v选项，可以参看远程主机的网址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> git remote -v</span><br><span class="line">origin  git@github.com:jquery/jquery.git (fetch)</span><br><span class="line">origin  git@github.com:jquery/jquery.git (push)</span><br></pre></td></tr></table></figure><p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p><p>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> git clone -o jQuery https://github.com/jquery/jquery.git</span><br><span class="line"> git remote</span><br><span class="line">jQuery</span><br></pre></td></tr></table></figure><p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git remote show命令加上主机名，可以查看该主机的详细信息。</span><br><span class="line"> git remote show &lt;主机名&gt;</span><br><span class="line">git remote add命令用于添加远程主机。</span><br><span class="line"> git remote add &lt;主机名&gt; &lt;网址&gt;</span><br><span class="line">git remote rm命令用于删除远程主机。</span><br><span class="line"> git remote rm &lt;主机名&gt;</span><br><span class="line">git remote rename命令用于远程主机的改名。</span><br><span class="line"> git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure><h2 id="三、git-fetch"><a href="#三、git-fetch" class="headerlink" title="三、git fetch"></a>三、git fetch</h2><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git fetch &lt;远程主机名&gt;</span><br></pre></td></tr></table></figure><p>上面命令将某个远程主机的更新，全部取回本地。</p><p>git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。</p><p>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>比如，取回origin主机的master分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git fetch origin master</span><br></pre></td></tr></table></figure><p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。</p><p>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> git branch -r</span><br><span class="line">origin/master</span><br><span class="line"> git branch -a</span><br><span class="line">* master</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><p>上面命令表示，本地主机的当前分支是master，远程分支是origin/master。</p><p>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git checkout -b newBrach origin/master</span><br></pre></td></tr></table></figure><p>上面命令表示，在origin/master的基础上，创建一个新分支。</p><p>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git merge origin/master</span><br></pre></td></tr></table></figure><p># 或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git rebase origin/master</span><br></pre></td></tr></table></figure><p>上面命令表示在当前分支上，合并origin/master。</p><h2 id="四、git-pull"><a href="#四、git-pull" class="headerlink" title="四、git pull"></a>四、git pull</h2><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git pull origin next:master</span><br></pre></td></tr></table></figure><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git pull origin next</span><br></pre></td></tr></table></figure><p>上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> git fetch origin</span><br><span class="line"> git merge origin/next</span><br></pre></td></tr></table></figure><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p><p>Git也允许手动建立追踪关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/next</span><br></pre></td></tr></table></figure><p>上面命令指定master分支追踪origin/next分支。</p><p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git pull origin</span><br></pre></td></tr></table></figure><p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。</p><p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git pull</span><br></pre></td></tr></table></figure><p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p><p>如果合并需要采用rebase模式，可以使用–rebase选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。</p><p>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> git pull -p</span><br><span class="line"># 等同于下面的命令</span><br><span class="line"> git fetch --prune origin </span><br><span class="line"> git fetch -p</span><br></pre></td></tr></table></figure><h2 id="五、git-push"><a href="#五、git-push" class="headerlink" title="五、git push"></a>五、git push</h2><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。</p><p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push origin master</span><br></pre></td></tr></table></figure><p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p><p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push origin :master</span><br></pre></td></tr></table></figure><p># 等同于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push origin --delete master</span><br></pre></td></tr></table></figure><p>上面命令表示删除origin主机的master分支。</p><p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push origin</span><br></pre></td></tr></table></figure><p>上面命令表示，将当前分支推送到origin主机的对应分支。</p><p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push</span><br></pre></td></tr></table></figure><p>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push -u origin master</span><br></pre></td></tr></table></figure><p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p><p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git config --global push.default matching</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git config --global push.default simple</span><br></pre></td></tr></table></figure><p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push --all origin</span><br></pre></td></tr></table></figure><p>上面命令表示，将所有本地分支都推送到origin主机。</p><p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push --force origin</span><br></pre></td></tr></table></figure><p>上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p><p>最后，git push不会推送标签（tag），除非使用–tags选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> git push origin --tags</span><br></pre></td></tr></table></figure><p>（完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="IDE" scheme="http://yoursite.com/categories/IDE/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>C语言的预处理指令和关键字</title>
    <link href="http://yoursite.com/2015/12/20/c/C%E8%AF%AD%E8%A8%80%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2015/12/20/c/C语言的预处理指令和关键字/</id>
    <published>2015-12-20T13:24:00.000Z</published>
    <updated>2019-10-02T09:03:08.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h2><ul><li>C语言在对源程序进行编译之前，会先对一些特殊的预处理指令作解释，产生一个新的源程序(这个过程称为编译预处理),之后再进行通常的编译</li><li>为了区分预处理指令和一般的C语句，所有预处理指令都以符号“#”开头，并且结尾不用分号</li><li>预处理指令可以出现在程序的任何位置，它的作用范围是从它出现的位置到文件尾。习惯上我们尽可能将预处理指令写在源程序开头，这种情况下，它的作用范围就是整个源程序文件</li><li>C语言提供的预处理指令主要有：宏定义、文件包含、条件编译</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>宏定义可以分为2种：</p><ol><li><p>不带参数的宏定义 </p><ul><li><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define 宏名 字符串</span><br><span class="line">// 比如  #define ABC 10</span><br></pre></td></tr></table></figure></li><li><p>作用：是在编译预处理时，将源程序中所有”宏名”替换成右边的”字符串”，常用来定义常量。</p></li><li><p>使用习惯与注意</p><ol><li>宏名一般用大写字母，以便与变量名区别开来，但用小写也没有语法错误</li><li>对程序中用双引号扩起来的字符串内的字符，不进行宏的替换操作。</li><li>在编译预处理用字符串替换宏名时，不作语法检查，只是简单的字符串替换。只有在编译的时候才对已经展开宏名的源程序进行语法检查</li><li>宏名的有效范围是从定义位置到文件结束。如果需要终止宏定义的作用域，可以用#undef命令</li><li>定义一个宏时可以引用已经定义的宏名</li></ol></li></ul></li><li><p>带参数的宏定义</p><ul><li><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define 宏名(参数列表) 字符串</span><br></pre></td></tr></table></figure></li><li><p>作用：在编译预处理时，将源程序中所有宏名替换成字符串，并且将 字符串中的参数 用 宏名右边参数列表 中的参数替换.</p></li><li><p>使用注意：</p><ol><li>宏名和参数列表之间不能有空格，否则空格后面的所有字符串都作为替换的字符串.</li><li>带参数的宏在展开时，只作简单的字符和参数的替换，不进行任何计算操作。所以在定义宏时，一般用一个小括号括住字符串的参数。</li><li>参数和计算结果都要用小括号括起来</li></ol></li><li><p>与函数的区别：从整个使用过程可以发现，带参数的宏定义，在源程序中出现的形式与函数很像。但是两者是有本质区别的：</p><ol><li>宏定义不涉及存储空间的分配、参数类型匹配、参数传递、返回值问题</li><li>函数调用在程序运行时执行，而宏替换只在编译预处理阶段进行。所以带参数的宏比函数具有更高的执行效率</li></ol></li></ul></li></ol><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><blockquote><p>在很多情况下，我们希望程序的其中一部分代码只有在满足一定条件时才进行编译，否则不参与编译(只有参与编译的代码最终才能被执行)，这就是条件编译。</p></blockquote><ul><li><p>格式  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#if 条件1</span><br><span class="line">  ...code1...</span><br><span class="line">#elif 条件2</span><br><span class="line">  ...code2...</span><br><span class="line">#else</span><br><span class="line">  ...code3...</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></li><li><p>注意</p><blockquote><p>条件编译结束后，要在最后面加一个#endif，不然后果很严重。<br><code>#if</code> 和 <code>#elif</code>后面的条件一般是判断宏定义而不是判断变量，因为条件编译是在编译之前做的判断，宏定义也是编译之前定义的，而变量是在运行时才产生的、才有使用的意义。</p></blockquote></li><li><p>条件编译其它用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#if defined()和#if !defined()的用法</span><br><span class="line">//#if defined(MAX)</span><br><span class="line">#if !defined(MAX)</span><br><span class="line">    ...code...</span><br><span class="line">#endif</span><br><span class="line">#ifdef 和 ifndef的用法</span><br><span class="line"> //#ifdef MAX</span><br><span class="line"> #ifndef MAX</span><br><span class="line">     ...code...</span><br><span class="line"> #endif</span><br></pre></td></tr></table></figure></li></ul><h2 id="static-extern"><a href="#static-extern" class="headerlink" title="static/extern"></a>static/extern</h2><h3 id="static和extern关键字对函数的作用"><a href="#static和extern关键字对函数的作用" class="headerlink" title="static和extern关键字对函数的作用"></a>static和extern关键字对函数的作用</h3><ul><li>外部函数和内部函数<ul><li>外部函数：如果在当前文件中定义的函数允许其他文件访问、调用，就称为外部函数。C语言规定，不允许有同名的外部函数。</li><li>内部函数：如果在当前文件中定义的函数不允许其他文件访问、调用，只能在内部使用，就称为内部函数。C语言规定不同的源文件可以有同名的内部函数，并且互不干扰。</li></ul></li><li><code>extern</code><ul><li>在定义函数时，如果在函数的最左边加上关键字extern，则表示此函数是外部函数，可供其他文件调用。C语言规定，如果在定义函数时省略extern，则隐含为外部函数。</li><li>在一个文件中要调用其他文件中的外部函数，则需要在当前文件中用extern声明该外部函数，然后就可以使用，这里的extern也可以省略。</li></ul></li><li><code>static</code><ul><li>在定义函数时，在函数的最左边加上static可以把该函数声明为内部函数(又叫静态函数)，这样该函数就只能在其定义所在的文件中使用。如果在不同的文件中有同名的内部函数，则互不干扰。</li><li>static也可以用来声明一个内部函数</li></ul></li></ul><h3 id="static和extern关键字对全局变量的作用"><a href="#static和extern关键字对全局变量的作用" class="headerlink" title="static和extern关键字对全局变量的作用"></a>static和extern关键字对全局变量的作用</h3><ol><li>extern可以用来声明一个全局变量，但是不能用来定义变量</li><li>默认情况下，一个全局变量是可以供多个源文件共享的，也就说，多个源文件中同名的全局变量都代表着同一个变量</li><li>如果在定义全局变量的时候加上static关键字，此时static的作用在于限制该全局变量的作用域，只能在定义该全局变量的文件中才能使用，跟其他源文件中的同名变量互不干扰</li></ol><h3 id="Static对局部变量的作用"><a href="#Static对局部变量的作用" class="headerlink" title="Static对局部变量的作用"></a>Static对局部变量的作用</h3><ol><li>用static修饰局部变量后会延长局部变量的生命周期，当执行到定义变量的那一行的时候分配存储空间，但是直到程序结束变量才会释放</li><li>尽管延长了变量的生命周期，但是没有改变变量的作用域<br> 使用场合：当一个变量要被经常重复使用的时候就可以用static来修饰这个变量</li></ol><h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2><blockquote><p>可以使用typedef关键字为各种数据类型定义一个新名字(别名)，可以简化代码和提高阅读性。</p></blockquote><h3 id="typedef与指针"><a href="#typedef与指针" class="headerlink" title="typedef与指针"></a>typedef与指针</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef char *String;</span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    // 相当于char *str = &quot;This is a string!&quot;;</span><br><span class="line">    String str = &quot;This is a string!&quot;;    </span><br><span class="line">    printf(&quot;%s&quot;, str);   </span><br><span class="line">    return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="typedef与结构体"><a href="#typedef与结构体" class="headerlink" title="typedef与结构体"></a>typedef与结构体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个结构体</span><br><span class="line">struct MyPoint &#123;</span><br><span class="line">    float x;</span><br><span class="line">     float y;</span><br><span class="line">&#125;; </span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">   // 定义结构体变量</span><br><span class="line">    struct MyPoint p;</span><br><span class="line">    p.x = 10.0f;</span><br><span class="line">    p.y = 20.0f;</span><br><span class="line">    retuen 0;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用typedef给结构体起别名"><a href="#使用typedef给结构体起别名" class="headerlink" title="使用typedef给结构体起别名"></a>使用typedef给结构体起别名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个结构体</span><br><span class="line">struct MyPoint &#123;</span><br><span class="line">   float x;</span><br><span class="line">   float y;</span><br><span class="line">&#125;;</span><br><span class="line">// 起别名</span><br><span class="line">typedef struct MyPoint Point; </span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">  // 定义结构体变量</span><br><span class="line">  Point p;</span><br><span class="line">  p.x = 10.0f;</span><br><span class="line">  p.y = 20.0f;    </span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="typedef与指向结构体的指针"><a href="#typedef与指向结构体的指针" class="headerlink" title="typedef与指向结构体的指针"></a>typedef与指向结构体的指针</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个结构体并起别名</span><br><span class="line"> typedef struct &#123;</span><br><span class="line">    float x;</span><br><span class="line">    float y;</span><br><span class="line"> &#125; Point; </span><br><span class="line"> // 起别名</span><br><span class="line"> typedef Point *PP; </span><br><span class="line"> int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    // 定义结构体变量</span><br><span class="line">    Point point = &#123;10, 20&#125;;    </span><br><span class="line">    // 定义指针变量</span><br><span class="line">    PP p = &amp;point;     </span><br><span class="line">    // 利用指针变量访问结构体成员</span><br><span class="line">    printf(&quot;x=%f，y=%f&quot;, p-&gt;x, p-&gt;y);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="typedef与指向函数的指针"><a href="#typedef与指向函数的指针" class="headerlink" title="typedef与指向函数的指针"></a>typedef与指向函数的指针</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个sum函数，计算a跟b的和</span><br><span class="line">  int sum(int a, int b) &#123;</span><br><span class="line">      int c = a + b;</span><br><span class="line">      printf(&quot;%d + %d = %d&quot;, a, b, c);</span><br><span class="line">      return c;</span><br><span class="line">  &#125;  </span><br><span class="line"> typedef int (*MySum)(int, int);</span><br><span class="line"> int main(int argc, const char * argv[]) &#123;</span><br><span class="line">     // 定义一个指向sum函数的指针变量p</span><br><span class="line">     // int (*p)(int, int) = sum;  </span><br><span class="line">     // 定义一个指向sum函数的指针变量p</span><br><span class="line">     MySum p = sum;   </span><br><span class="line">     // 利用指针变量p调用sum函数</span><br><span class="line">     (*p)(4, 5);</span><br><span class="line">     return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="typedef与-define"><a href="#typedef与-define" class="headerlink" title="typedef与#define"></a>typedef与#define</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef char *String1;//其别名</span><br><span class="line">#define String2 char *//宏定义，在代码中只是将(char *)替换称String</span><br><span class="line">int main(int argc, const char * argv[]) </span><br><span class="line">    String1 str1, str2;   // 实际是char *str1,char *str2</span><br><span class="line">    String2 str3, str4;   // 实际是char *str3,char str4</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场合："><a href="#使用场合：" class="headerlink" title="使用场合："></a>使用场合：</h3><ul><li>给基本数据类型起别名</li><li>给指针起别名</li><li>给结构体起别名</li><li>给枚举起别名</li><li>给指向函数的指针起别名</li><li>给指向结构体的指针起别名</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;预处理指令&quot;&gt;&lt;a href=&quot;#预处理指令&quot; class=&quot;headerlink&quot; title=&quot;预处理指令&quot;&gt;&lt;/a&gt;预处理指令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;C语言在对源程序进行编译之前，会先对一些特殊的预处理指令作解释，产生一个新的源程序(这个过程称为编译预处
      
    
    </summary>
    
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言数组和字符串</title>
    <link href="http://yoursite.com/2015/12/20/c/C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2015/12/20/c/C语言数组和字符串/</id>
    <published>2015-12-20T07:24:00.000Z</published>
    <updated>2019-10-02T08:57:45.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C程序内存分配"><a href="#C程序内存分配" class="headerlink" title="C程序内存分配"></a>C程序内存分配</h2><ol><li><code>栈区(stack)</code> - 由编译器自动分配释放，存放函数的参数名，局部变量名等。</li><li><code>堆区(heap)</code> - 有程序员分配和释放，它与数据结构中的<code>堆</code>是两回事。</li><li><code>全局区(静态区)(static)</code> - 全局变量和静态变量存储位置</li><li><code>文字常量区</code> - 常量字符串存放位置</li><li><code>程序代码区</code> - 存放函数体的二进制代码</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><pre><code>存储一组数据的容器</code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>只能存储一种类型的数据</li><li>有顺序之分，索引从0开始。</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>元素类型  数组名[元素个数]<br>int nums[3];</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>一般会在数组定义的同时进行初始化<br>int nums[3] = {2,5,3};</p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>通用下标（索引)访问：nums[1];</p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><ul><li>按行进行初始化<br>int a[2][3] = { {2, 2, 3}, {3, 4, 5} }; </li><li>按存储顺序进行初始化(先存放第1行，再存放第2行)<br>int a[2][3] = {2, 2, 3, 3, 4, 5}; </li><li>对部分元素进行初始化<br>int a[2][3] = { {2}, {3, 4} };  </li><li>如果只初始化了部分元素，可以省略行数，但是不可以省略列数<br>int a[][3] = {1, 2, 3, 4, 5, 6};</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>char a[] = “123”;  和 char a [] = {‘1’,’2’,’3’};的区别，可以比较大小</li><li>“123”其实是由’1’、’2’、’3’、’\0’组成</li><li>字符串的输出”%s”，’\0’是不会输出的</li></ul><h2 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h2><ol><li>char names[2][10] = { {‘J’,’a’,’y’,’\0’}, {‘J’,’i’,’m’,’\0’} };  </li><li>char names2[2][10] = { {“Jay”}, {“Jim”} };  </li><li>char names3[2][10] = { “Jay”, “Jim” };</li></ol><h2 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h2><ul><li>strlen(字符数组名或字符指针变量);字符串测长函数</li><li>strcat(字符串1的地址，字符串2的地址)；将字符串2的内容连接到字符串1的尾部。</li><li>strcmp(字符串1的地址，字符串2的地址)；比较串1和串2哪个比较大。比较大小的依据是，两个字符串从左往右相应位置上第一个不相等的字符ASCII码值之差</li><li>strcpy(字符串1的地址，字符串2的地址)；将字符串2的内容复制到字符串1内。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C程序内存分配&quot;&gt;&lt;a href=&quot;#C程序内存分配&quot; class=&quot;headerlink&quot; title=&quot;C程序内存分配&quot;&gt;&lt;/a&gt;C程序内存分配&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;栈区(stack)&lt;/code&gt; - 由编译器自动分配释放，存放函数的参数名
      
    
    </summary>
    
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言include和变量</title>
    <link href="http://yoursite.com/2015/12/19/c/C%E8%AF%AD%E8%A8%80include%E5%92%8C%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2015/12/19/c/C语言include和变量/</id>
    <published>2015-12-19T15:24:00.000Z</published>
    <updated>2019-10-02T08:55:57.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><ul><li>main函数<br>main函数时整个C程序的入口，整个C程序中也有且仅有一个main函数</li><li>printf函数<br>在屏幕上输出内容，使用前必须加 <code>#incluce &lt;stdio.h&gt;</code></li></ul><h2 id="include"><a href="#include" class="headerlink" title="#include"></a><code>#include</code></h2><ul><li><code>#include</code>指令介绍<ul><li><code>#include</code> 是C语言的<code>预处理指令</code>之一。<br>在编译之前做的处理，预处理指令一般以<code>#</code>开头    </li><li><code>#include</code>指令后面会跟着一个文件名，此时，会将该文件内容包含到当前文件中。</li><li>如果本包含的文件拓展名为 <code>.h</code> 则称为头文件(Header File)。</li><li><code>#include</code>指令不仅限于 <code>.h</code> 头文件，可以包含任何白安逸器能识别的C/C++代码文件 </li></ul></li><li><code>#include &lt;&gt;</code>和<code>#include &quot;&quot;</code>区别（主要是检索顺序不同）<ul><li><code>#include &lt;&gt;</code> 检索顺序：<br>父文件所在文件夹 → 父文件的父文件所在文件夹 → 编译器设置的include路径 → 系统INCLUDE环境变量</li><li><code>#include &quot; &quot;</code> 检索顺序：<br>编译器设置的include路径 → 系统INCLUDE环境变量</li></ul></li><li><code>stdio.h</code><ul><li>是C语言函数库中的一个头文件</li></ul></li></ul><h2 id="多源文件开发"><a href="#多源文件开发" class="headerlink" title="多源文件开发"></a>多源文件开发</h2><ol><li>在编写第一个C程序的时候已经提到：我们编写的所有C语言代码都保存在拓展名为.c的源文件中，编写完毕后就进行编译、链接，最后运行程序。</li><li>在实际开发过程中，项目做大了，源代码肯定非常多，很容易就上万行 代码了，甚至上十万、百万都有可能。这个时候如果把所有的代码都写到一个.c源文件中，那么这个文件将会非常庞大，也非常恶心，你可以想象一下，一个文件 有十几万行文字，不要说调试程序了，连阅读代码都非常困难。</li><li>公司里面都是以团队开发为主，如果多个开发人员同时修改一个源文件，那就会带来很多麻烦的问题，比如张三修改的代码很有可能会抹掉李四之前添加的代码。</li><li>因此，为了模块化开发，一般会将不同的功能写到不同的.c源文件中，这样的话，每个开发人员都负责修改不同的源文件，达到分工合作的目的，能够大大提高开发效率。也就是说，一个正常的C语言项目是由多个.c源文件构成。</li></ol><hr><h2 id="常用UNIX指令"><a href="#常用UNIX指令" class="headerlink" title="常用UNIX指令"></a>常用UNIX指令</h2><table><thead><tr><th align="left">指令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">ls</td><td align="left">列出当前目录下的所有内容（文件\文件夹）</td></tr><tr><td align="left">pwd</td><td align="left">显示出当前目录的名称</td></tr><tr><td align="left">cd</td><td align="left">改变当前操作的目录</td></tr><tr><td align="left">who</td><td align="left">显示当前用户名</td></tr><tr><td align="left">clear</td><td align="left">清除所有内容</td></tr><tr><td align="left">mkdir</td><td align="left">创建一个新目录</td></tr></tbody></table><h2 id="编译C程序"><a href="#编译C程序" class="headerlink" title="编译C程序"></a>编译C程序</h2><ul><li><p>编译one.c，生成one.o文件</p><figure class="highlight cc"><figcaption><span>-c one.c```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 链接one.o，生成a.out文件</span><br><span class="line">```cc one.o</span><br></pre></td></tr></table></figure></li><li><p>运行a.out</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 进制</span><br><span class="line">    进制：一种计数方式</span><br><span class="line">- 十进制</span><br><span class="line">由0、1、2….9十个基本数字组成；运算规则是“逢十进一”</span><br><span class="line">- 二进制</span><br><span class="line">特点：由0、1两个基本数字组成；运算规则是“逢二进一”</span><br><span class="line">书写形式：需要以0b或者0B开头，比如0b101</span><br><span class="line">- 八进制</span><br><span class="line">特点：由0~7八个基本数字组成；运算规则是“逢八进一”</span><br><span class="line">书写形式：在前面加个0，比如045</span><br><span class="line">- 十六进制</span><br><span class="line">特点：由0~9和A~F组成，A~F分别表示10~15；运算规则是“逢十六进一”</span><br><span class="line">书写形式：在前面加个0x或者0X，比如0x45</span><br><span class="line"></span><br><span class="line">## 位运算符</span><br><span class="line">运算符 | 作用  | 说明 |举例</span><br><span class="line"> -----|-------|----|---</span><br><span class="line">&amp;| 按位与|只有对应的两个二进位均为1时，结果位才为1，否则为0|1001 &amp; 0101 = 0001</span><br><span class="line">&amp;#x7c;| 按位或|只要对应的二个二进位有一个为1时，结果位就为1，否则为0|1001 &amp;#x7c; 0101 = 1101</span><br><span class="line">^ |按位异或|当对应的二进位相异（不相同）时，结果为1，否则为0|1001 ^ 101 = 1100</span><br><span class="line">~ |取反|各二进位进行取反（0变1，1变0）|~1001 = 0110</span><br><span class="line">&lt;&lt; |左移|各二进位全部左移n位，高位丢弃，低位补0|乘以2的n次方</span><br><span class="line">&amp;#x3e;&amp;#x3e; |右移|各二进位全部右移n位，保持符号位不变|是除以2的n次方</span><br></pre></td></tr></table></figure></li></ul><p>//使用位运算实现交换两个数的值<br>a = a^b;<br>b = b^a;<br>a = a^b;</p><pre><code>## 变量的内存分析### 字节和地址- 内存以“字节为单位”，不同类型的变量在不同编译器环境下所占的空间也不同变量类型 | 16位编译器  | 32位编译器  | 64位编译器--|--|--|--char |1|1|1int |2|4|4float|4|4|4double|8|8|8- 变量存储单元的第一个字节的地址就是该变量的地址- 负数的二进制形式，就是对它的正数的二进制取反后加1## 类型说明符类型|说明|64位编译器--|--|--short|短型|2字节（16位）long|长型|8字节（64位）signed|有符号型unsigned|无符号型&gt;一般就是用来修饰int类型的，所以在使用时省略int。short int等价于short，long int等价于long，long long int等价于long long- signed和unsigned的区别就是它们的最高位是否要当做符号位，并不会像short和long那样改变数据的长度，即所占的字节数。- signed：表示有符号，也就是说最高位要当做符号位，所以包括正数、负数和0。其实int的最高位本来就是符号位，已经包括了正负数和0了，因此signed和int是一样的，signed等价于signed int，也等价于int。signed的取值范围是&lt;img src=&quot;http://www.forkosh.com/mathtex.cgi? -2^{31}&quot;&gt; ~ &lt;img src=&quot;http://www.forkosh.com/mathtex.cgi? 2^{31}-1&quot;&gt;- unsigned：表示无符号，也就是说最高位并不当做符号位，所 以不包括负数。在64bit编译器环境下面，int占用4个字节（32bit），因此unsigned的取值范围是：0000 0000 0000 0000 0000 0000 0000 0000 ~ 1111 1111 1111 1111 1111 1111 1111 1111，也就是0~&lt;img src=&quot;http://www.forkosh.com/mathtex.cgi? 2{32}-1&quot;&gt;## char类型（字符型）- 一个字符型变量占用1个字节，共8位。范围是&lt;img src=&quot;http://www.forkosh.com/mathtex.cgi? -2^7&quot;&gt;~&lt;img src=&quot;http://www.forkosh.com/mathtex.cgi? 2^7-1&quot;&gt;。- 不能用来存储汉字- 前面加&quot;\&quot;形成的字符，称为“转义字符”  转义字符|意义|ASCII码值--|--|--\n|回车|10\t|退格|9\\|\|92\&apos;|&apos;|39\&quot;|&quot;|34\0|空字符|0</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常见函数&quot;&gt;&lt;a href=&quot;#常见函数&quot; class=&quot;headerlink&quot; title=&quot;常见函数&quot;&gt;&lt;/a&gt;常见函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;main函数&lt;br&gt;main函数时整个C程序的入口，整个C程序中也有且仅有一个main函数&lt;/li&gt;
&lt;li&gt;p
      
    
    </summary>
    
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言指正|结构体|枚举</title>
    <link href="http://yoursite.com/2015/12/19/c/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%9E%9A%E4%B8%BE/"/>
    <id>http://yoursite.com/2015/12/19/c/C语言指针、结构体、枚举/</id>
    <published>2015-12-19T09:33:00.000Z</published>
    <updated>2019-10-02T09:00:32.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>指针就是用来保存变量的地址的变量</p><ul><li><p>访问</p><ol><li>我们通过<code>&amp;</code>来获取变量的地址。</li><li><code>&amp;</code>这个操作符只能指向变量或者是数组。</li><li><code>&amp;</code>是获取地址的操作符。</li><li>使用<code>%p</code>来打印地址。</li></ol></li><li><p>本质<br>  指针是一个4字节（或是8字节）的一个int的整数。换句话说也就一个int 型的变量</p></li><li><p>指针变量</p><ol><li>指针变量是用来保存地址的。</li><li>指针变量里保存的地址可以修改。</li><li>指针变量可以指向特殊的数据类型。</li><li>可以有多个指针变量里的值是相同的。</li></ol></li><li><p>一级指针的简单使用<br>  指针访问内存可以通过<code>*</code>这个操作符去访问所指向的内存空间。</p></li></ul><h2 id="指针的定义和初始化"><a href="#指针的定义和初始化" class="headerlink" title="指针的定义和初始化"></a>指针的定义和初始化</h2><ul><li>type * identifier<ol><li>没有初始化的指针，称之为野指针。</li><li>指针里面是一个随机的值。</li><li>野指针有很大的风险。</li><li>指针可以作为函数的参数和返回值。</li></ol></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 声明一个int指针</span><br><span class="line">int *ptr;</span><br><span class="line">// 声明一个int值</span><br><span class="line">int val = 1;</span><br><span class="line">// 为指针分配一个int值的引用</span><br><span class="line">ptr = &amp;val;</span><br><span class="line">// 对指针进行取值，打印存储在指针地址中的内容</span><br><span class="line">int deref = *ptr;</span><br><span class="line">printf(&quot;%d\n&quot;, deref);</span><br></pre></td></tr></table></figure></li></ul><p>第2行，我们通过<code>*</code>操作符声明了一个int指针。接着我们声明了一个int变量并赋值为1。然后我们用int变量的地址初始化我们的int指针。接下来对int指针取值，用变量的内存地址初始化int指针。最终，我们打印输出变量值，内容为1。</p><p>第6行的<code>&amp;val</code>是一个引用。在val变量声明并初始化内存之后，通过在变量名之前使用地址操作符<code>&amp;</code>我们可以直接引用变量的内存地址。<br>第8行，我们再一次使用<code>*</code>操作符来对该指针取值，可直接获得指针指向的内存地址中的数据。由于指针声明的类型是int，所以取到的值是指针指向的内存地址存储的int值。</p><ul><li>void指针、NULL指针和未初始化指针<br>一个指针可以被声明为void类型，比如void *x。一个指针可以被赋值为NULL。一个指针变量声明之后但没有被赋值，叫做未初始化指针。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">int *uninit; </span><br><span class="line">// int指针未初始化</span><br><span class="line">int *nullptr = NULL; </span><br><span class="line">// 初始化为NULL</span><br><span class="line">void *vptr; </span><br><span class="line">// void指针未初始化</span><br><span class="line">int val = 1;</span><br><span class="line">int *iptr;</span><br><span class="line">int *castptr;</span><br><span class="line"> </span><br><span class="line">// void类型可以存储任意类型的指针或引用</span><br><span class="line">iptr = &amp;val;</span><br><span class="line">vptr = iptr;</span><br><span class="line">printf(&quot;iptr=%p, vptr=%p\n&quot;, iptr, vptr);</span><br><span class="line"> </span><br><span class="line">// 通过显示转换，我们可以把一个void指针转成</span><br><span class="line">// int指针并进行取值</span><br><span class="line">castptr = (int *)vptr;</span><br><span class="line">printf(&quot;*castptr=%d\n&quot;, *castptr);</span><br><span class="line"> </span><br><span class="line">// 打印null和未初始化指针</span><br><span class="line">printf(&quot;uninit=%p, nullptr=%p\n&quot;, uninit, nullptr);</span><br><span class="line">// 不知道你会得到怎样的返回值，会是随机的垃圾地址吗？</span><br><span class="line">// printf(&quot;*nullptr=%d\n&quot;, nullptr);</span><br><span class="line">// 这里会产生一个段错误</span><br><span class="line">// printf(&quot;*nullptr=%d\n&quot;, nullptr);</span><br><span class="line">执行上面的代码，你会得到类似下面对应不同内存地址的输出。</span><br><span class="line"></span><br><span class="line">iptr=0x7fff94b89c6c, vptr=0x7fff94b89c6c</span><br><span class="line">*castptr=1</span><br><span class="line">uninit=0x7fff94b89d50, nullptr=(nil)</span><br></pre></td></tr></table></figure><p>第1行我们声明了一个未初始化int指针。所有的指针在赋值为NULL、一个引用（地址）或者另一个指针之前都是未被初始化的。第2行我们声明了一个NULL指针。第3行声明了一个void指针。第4行到第6行声明了一个int值和几个int指针。</p><p>第9行到11行，我们为int指针赋值为一个引用并把int指针赋值为void指针。void指针可以保存各种其它指针类型。大多数时候它们被用来存储数据结构。可以注意到，第11行我们打印了int和void指针的地址。它们现在指向了同样的内存地址。所有的指针都存储了内存地址。它们的类型只在取值时起作用。</p><p>第15到16行，我们把void指针转换为int指针castptr。请注意这里需要显示转换。虽然C语言并不要求显示地转换，但这样会增加代码的可读性。接着我们对castptr指针取值，值为1。</p><p>第19行非常有意思，在这里打印未初始化指针和NULL指针。值得注意的是，未初始化指针是有内存地址的，而且是一个垃圾地址。不知道这个内存地址指向的值是什么。这就是为什么不要对未初始化指针取值的原因。最好的情况是你取到的是垃圾地址接下来你需要对程序进行调试，最坏的情况则会导致程序崩溃。</p><blockquote><p>NULL指针被初始化为o。NULL是一个特殊的地址，用NULL赋值的指针指向的地址为0而不是随机的地址。只有当你准备使用这个地址时有效。不要对NULL地址取值，否则会产生段错误。</p></blockquote><ul><li>指针和数组<ul><li>C语言的数组表示一段连续的内存空间，用来存储多个特定类型的对象。与之相反，指针用来存储单个内存地址。数组和指针不是同一种结构因此不可以互相转换。而数组变量指向了数组的第一个元素的内存地址。</li><li>一个数组变量是一个常量。即使指针变量指向同样的地址或者一个不同的数组，也不能把指针赋值给数组变量。也不可以将一个数组变量赋值给另一个数组。然而，可以把一个数组变量赋值给指针，这一点似乎让人感到费解。把数组变量赋值给指针时，实际上是把指向数组第一个元素的地址赋给指针。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int myarray[4] = &#123;1,2,3,0&#125;;</span><br><span class="line">int *ptr = myarray;</span><br><span class="line">printf(&quot;*ptr=%d\n&quot;, *ptr);</span><br><span class="line"> </span><br><span class="line">// 数组变量是常量，不能做下面的赋值</span><br><span class="line">// myarray = ptr</span><br><span class="line">// myarray = myarray2</span><br><span class="line">// myarray = &amp;myarray2[0]</span><br></pre></td></tr></table></figure><p>第1行初始化了一个int数组，第2行用数组变量初始化了一个int指针。由于数组变量实际上是第一个元素的地址，因此我们可以把这个地址赋值给指针。这个赋值与int *ptr = &amp;myarray[0]效果相同，显示地把数组的第一个元素地址赋值到了ptr引用。这里需要注意的是，这里指针需要和数组的元素类型保持一致，除非指针类型为void。</p><ul><li>指针与<code>结构体</code><br>就像数组一样，指向结构体的指针存储了结构体第一个元素的内存地址。与数组指针一样，结构体的指针必须声明和结构体类型保持一致，或者声明为void类型。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct person &#123;</span><br><span class="line">  int age;</span><br><span class="line">  char *name;</span><br><span class="line">&#125;;</span><br><span class="line">struct person first;</span><br><span class="line">struct person *ptr;</span><br><span class="line"> </span><br><span class="line">first.age = 21;</span><br><span class="line">char *fullname = &quot;full name&quot;;</span><br><span class="line">first.name = fullname;</span><br><span class="line">ptr = &amp;first;</span><br><span class="line"> </span><br><span class="line">printf(&quot;age=%d, name=%s\n&quot;, first.age, ptr-&gt;name);</span><br></pre></td></tr></table></figure><p>第1至6行声明了一个person结构体，一个变量指向了一个person结构体和指向person结构体的指针。第8行为age成员赋了一个int值。第9至10行我们声明了一个char指针并赋值给一个char数组并赋值给结构体name成员。第11行我们把一个person结构体引用赋值给结构体变量。</p><p>第13行我们打印了结构体实例的age和name。这里需要注意两个不同的符号，’.’ 和 ‘-&gt;’ 。结构体实例可以通过使用 ‘.’ 符号访问age变量。对于结构体实例的指针，我们可以通过 ‘-&gt;’ 符号访问name变量。也可以同样通过(*ptr).name来访问name变量。</p><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><h3 id="什么事结构体"><a href="#什么事结构体" class="headerlink" title="什么事结构体"></a>什么事结构体</h3><ol><li>C语言中的数组，用法跟其他语言差不多。当一个整体由多个数据构成时，我们可以用数组来表示这个整体，但是数组有个特点：内部的每一个元素都必须是相同类型的数据。</li><li>在实际应用中，我们通常需要由不同类型的数据来构成一个整体，比如学生这个整体可以由姓名、年龄、身高等数据构成，这些数据都具有不同的类型，姓名可以是字符串类型，年龄可以是整型，身高可以是浮点型。</li><li>为此，C语言专门提供了一种构造类型来解决上述问题，这就是结构体，它允许内部的元素是不同类型的。</li></ol><h3 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h3><ol><li><p>定义形式：结构体内部的元素，也就是组成成分，我们一般称为”成员”。<br>结构体的一般定义形式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct　结构体名&#123;     </span><br><span class="line">     类型名1　成员名1;     </span><br><span class="line">     类型名2　成员名2;     </span><br><span class="line">     ……     </span><br><span class="line">     类型名n　成员名n;     </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></li><li><p>先定义结构体类型，再定义变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">     char *name;</span><br><span class="line">     int age;</span><br><span class="line"> &#125;; </span><br><span class="line"> struct Student stu;</span><br></pre></td></tr></table></figure></li><li><p>定义和变量同时进行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">    char *name;</span><br><span class="line">    int age;</span><br><span class="line">&#125; stu;</span><br><span class="line">// 结构体变量名为stu</span><br></pre></td></tr></table></figure></li><li><p>直接定义结构体类型变量，省略类型名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">    char *name;</span><br><span class="line">    int age;</span><br><span class="line">&#125; stu;</span><br><span class="line">// 结构体变量名为stu</span><br></pre></td></tr></table></figure></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>不可以在结构体本身进行递归定义</li><li>可以包含别的结构体</li></ul><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><ul><li><p>定义结构体类型，只是说明了该类型的组成情况，并没有给它分配存储空间，就像系统不为int类型本身分配空间一样。只有当定义属于结构体类型的变量时，系统才会分配存储空间给该变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">     char *name;</span><br><span class="line">     int age;</span><br><span class="line"> &#125;;</span><br><span class="line">struct Student stu;</span><br><span class="line">// 第1~4行并没有分配存储空间，当执行到第6行时，系统才会分配存储空间给stu变量。</span><br></pre></td></tr></table></figure></li><li><p>结构体变量占用的内存空间是其成员所占内存之和，而且各成员在内存中按定义的顺序依次排列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">     char *name; // 姓名</span><br><span class="line">     int age; // 年龄</span><br><span class="line">     float height; // 身高</span><br><span class="line"> &#125;;</span><br><span class="line">// 在16位编译器环境下，一个Student变量共占用内存：2 + 2 + 4 = 8字节。</span><br></pre></td></tr></table></figure></li></ul><h3 id="结构体初始化"><a href="#结构体初始化" class="headerlink" title="结构体初始化"></a>结构体初始化</h3><ul><li><p>将各成员的初值，按顺序地放在一对大括号{}中，并用逗号分隔，一一对应赋值。<br>比如初始化Student结构体变量stu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> struct Student &#123;</span><br><span class="line">     char *name;</span><br><span class="line">     int age;</span><br><span class="line"> &#125;; </span><br><span class="line">struct Student stu = &#123;“NJ&quot;, 27&#125;;</span><br></pre></td></tr></table></figure></li><li><p>只能在定义变量的同时进行初始化赋值，初始化赋值和变量的定义不能分开，下面的做法是错误的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">struct Student stu;</span><br><span class="line">stu = &#123;“NJ&quot;, 27&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作结构体"><a href="#操作结构体" class="headerlink" title="操作结构体"></a>操作结构体</h3><ol><li><p>一般对结构体变量的操作是以成员为单位进行的，引用的一般形式为：结构体变量名.成员名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">     char *name;</span><br><span class="line">     int age;</span><br><span class="line"> &#125;;</span><br><span class="line"> struct Student stu;</span><br><span class="line"> // 访问stu的age成员</span><br><span class="line"> stu.age = 27;</span><br><span class="line">// 第9行对结构体的age成员进行了赋值。&quot;.&quot;称为成员运算符，它在所有运算符中优先级最高</span><br></pre></td></tr></table></figure></li><li><p>如果某个成员也是结构体变量，可以连续使用成员运算符”.”访问最低一级成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct Date &#123;</span><br><span class="line">       int year;</span><br><span class="line">       int month;</span><br><span class="line">       int day;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  struct Student &#123;</span><br><span class="line">      char *name;</span><br><span class="line">      struct Date birthday;</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> struct Student stu;</span><br><span class="line"> stu.birthday.year = 1986;</span><br><span class="line"> stu.birthday.month = 9;</span><br><span class="line"> stu.birthday.day = 10;</span><br></pre></td></tr></table></figure></li><li><p>相同类型的结构体变量之间可以进行整体赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">      char *name;</span><br><span class="line">      int age;</span><br><span class="line">&#125;;  </span><br><span class="line">struct Student stu1 = &#123;“NJ”, 27&#125;;  </span><br><span class="line">// 将stu1直接赋值给stu2</span><br><span class="line">struct Student stu2 = stu1; </span><br><span class="line">printf(&quot;age is %d&quot;, stu2.age);</span><br></pre></td></tr></table></figure></li><li><p>将结构体变量作为函数参数进行传递时，其实传递的是全部成员的值，也就是将实参中成员的值一一赋值给对应的形参成员。因此，形参的改变不会影响到实参。</p></li><li><p>指向结构体的指针<br> 每个结构体变量都有自己的存储空间和地址，因此指针也可以指向结构体变量</p><ul><li>结构体指针变量的定义形式：struct 结构体名称 *指针变量名</li><li>有了指向结构体的指针，那么就有3种访问结构体成员的方式</li><li>结构体变量名.成员名</li><li>(*指针变量名).成员名</li><li>指针变量名-&gt;成员名</li></ul></li></ol><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p>枚举是C语言中的一种基本数据类型，并不是构造类型，它可以用于声明一组常数。当一个变量有几个固定的可能取值时，可以将这个变量定义为枚举类型。比如，你可以用一个枚举类型的变量来表示季节，因为季节只有4种可能的取值：春天、夏天、秋天、冬天。</p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li><p>一般形式为：enum　枚举名　{枚举元素1,枚举元素2,……};</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Season &#123;</span><br><span class="line">spring, </span><br><span class="line">summer, </span><br><span class="line">autumn, </span><br><span class="line">Winter</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>先定义枚举类型，再定义枚举变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum Season &#123;</span><br><span class="line">spring, </span><br><span class="line">summer, </span><br><span class="line">autumn, </span><br><span class="line">Winter</span><br><span class="line">&#125;; </span><br><span class="line">2.enum Season s;</span><br></pre></td></tr></table></figure></li><li><p>定义枚举类型的同时定义枚举变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Season &#123;</span><br><span class="line">spring, </span><br><span class="line">summer,</span><br><span class="line">autumn,</span><br><span class="line"> winter</span><br><span class="line">&#125; s;</span><br></pre></td></tr></table></figure></li><li><p>省略枚举名称，直接定义枚举变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum&#123;</span><br><span class="line">  spring,</span><br><span class="line">     summer,</span><br><span class="line">     autumn, </span><br><span class="line">     winter</span><br><span class="line">&#125; s;</span><br></pre></td></tr></table></figure></li></ol><h3 id="枚举使用的注意"><a href="#枚举使用的注意" class="headerlink" title="枚举使用的注意"></a>枚举使用的注意</h3><ol><li><p>C语言编译器会将枚举元素(spring、summer等)作为整型常量处理，称为枚举常量。</p></li><li><p>枚举元素的值取决于定义时各枚举元素排列的先后顺序。默认情况下，第一个枚举元素的值为0，第二个为1，依次顺序加1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum Season &#123;spring, summer, autumn, winter&#125;;</span><br><span class="line">// 也就是说spring的值为0，summer的值为1，autumn的值为2，winter的值为3</span><br></pre></td></tr></table></figure></li><li><p>也可以在定义枚举类型时改变枚举元素的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum season &#123;spring, summer=3, autumn, winter&#125;;</span><br><span class="line">// 没有指定值的枚举元素，其值为前一元素加1。也就说spring的值为0，summer的值为3，autumn的值为4，winter的值为5</span><br></pre></td></tr></table></figure></li></ol><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><ul><li>可以给枚举变量赋枚举常量或者整型值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enum Season &#123;spring, summer, autumn, winter&#125; s;</span><br><span class="line">s = spring; // 等价于 s = 0;</span><br><span class="line">s = 3; // 等价于 s = winter;</span><br></pre></td></tr></table></figure></li></ul><h3 id="遍历枚举元素"><a href="#遍历枚举元素" class="headerlink" title="遍历枚举元素"></a>遍历枚举元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum Season &#123;spring, summer, autumn, winter&#125; s;</span><br><span class="line">// 遍历枚举元素</span><br><span class="line">for (s = spring; s &lt;= winter; s++) &#123;</span><br><span class="line">    printf(&quot;枚举元素：%d \n&quot;, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;指针就
      
    
    </summary>
    
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言表达式和结构控制</title>
    <link href="http://yoursite.com/2015/12/19/c/C%E8%AF%AD%E8%A8%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E7%BB%93%E6%9E%84%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2015/12/19/c/C语言表达式和结构控制/</id>
    <published>2015-12-19T09:24:00.000Z</published>
    <updated>2019-10-02T08:53:40.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="printf和scanf的使用"><a href="#printf和scanf的使用" class="headerlink" title="printf和scanf的使用"></a>printf和scanf的使用</h2><h3 id="printf和scanf输出输入格式"><a href="#printf和scanf输出输入格式" class="headerlink" title="printf和scanf输出输入格式"></a>printf和scanf输出输入格式</h3><table><thead><tr><th align="center">Type</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">%c</td></tr><tr><td align="center">short int</td><td align="center">%hd</td></tr><tr><td align="center">int</td><td align="center">%d</td></tr><tr><td align="center">long int</td><td align="center">%ld</td></tr><tr><td align="center">float</td><td align="center">%f</td></tr><tr><td align="center">double</td><td align="center">%f</td></tr></tbody></table><h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><h3 id="常见运算符"><a href="#常见运算符" class="headerlink" title="常见运算符"></a>常见运算符</h3><table><thead><tr><th>运算符</th><th align="left">意义</th></tr></thead><tbody><tr><td>+</td><td align="left">加法运算符</td></tr><tr><td>-</td><td align="left">减法运算符，或者负数云算法</td></tr><tr><td>*</td><td align="left">乘法运算符</td></tr><tr><td>/</td><td align="left">除法运算符（整数相除，省略小数）</td></tr><tr><td>%</td><td align="left">模运算符，取余运算符（%两侧均为整数）</td></tr><tr><td>### 运算循序</td><td align="left"></td></tr><tr><td>1&gt; 算术表达式:用算术运算符将数据连接起来的式子，例如 2 + 4，3 <code>*</code> 5等。</td><td align="left"></td></tr><tr><td>表达式的运算顺序是按照运算符的<code>结合方向</code>和<code>优先级</code>进行的。</td><td align="left"></td></tr><tr><td>2&gt; 结合方向</td><td align="left"></td></tr><tr><td>算术运算符的结合方向从左到右。</td><td align="left"></td></tr><tr><td>3&gt; 优先级</td><td align="left"></td></tr><tr><td>优先级越高，就越先计算，当优先级相同时，参考结合方向。下面是优先级的排序</td><td align="left"></td></tr><tr><td>负值运算符(-) &gt; 乘(*)、除(/)、模(%) &gt; 加(+)、减(-)</td><td align="left"></td></tr><tr><td>4&gt; 小括号</td><td align="left"></td></tr><tr><td>如果被()括起来，那么优先级是最高。</td><td align="left"></td></tr><tr><td>### 注意点</td><td align="left"></td></tr><tr><td>1. 自动类型转换， 自动将大类型转换称小类型，会丢失精度</td><td align="left"></td></tr><tr><td>2. 强制类型转换</td><td align="left"></td></tr></tbody></table><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ol><li>简单赋值运算符<br> 赋值运算符的结合方向：从右到左，而且优先级低于算数运算符</li><li>复合赋值运算符<br> += : 如 a+=2等价于，a = a+2;<br> -= : 如 a-=2等价于，a = a-2;<br><code>*</code>= : 如 a<code>*</code>=2等价于，a = a<code>*</code>2;<br> /= : 如 a+=2等价于，a = a+2;<br> %= : 如 a+=2等价于，a = a+2;</li></ol><h2 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h2><ol><li>++<ul><li>先加，后用 <code>++a</code></li><li>先用，后加 <code>a++</code></li></ul></li><li>–<ul><li>先减，后用 <code>--a</code></li><li>先用，后减 <code>a--</code></li></ul></li></ol><h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><blockquote><p>用来计算一个变量或者一个常量、一种数据类型所占的内存字节数</p></blockquote><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><ul><li>主要用于连接表达式</li><li>从左到右依次计算</li><li>整个都好运算符，是最后一个表达式的值</li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ul><li>C语言中条件成立成为“真”，条件不成立成为“假”</li><li>C语言中规定，任何数值都有真假性，任何非0的值都为“真”，只有0才为“假”<h3 id="关系运算符-1"><a href="#关系运算符-1" class="headerlink" title="关系运算符"></a>关系运算符</h3></li></ul><table><thead><tr><th>运算符</th><th>意义</th></tr></thead><tbody><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>！=</td><td>不等于</td></tr></tbody></table><p>关系运算符的结果只有两种，条件成立结果是“1”，不成立为“0”；</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol><li>&lt;、&lt;=、&gt;、&gt;=优先级大于 ==、!=优先级</li><li>结合方向，“从左到右”</li><li>优先级低于算术运算符</li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>运算符</th><th>意义</th><th>计算规则</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与</td><td>两个为真才为真</td></tr><tr><td>&#124;&#124;</td><td>或</td><td>一个为真就为真</td></tr><tr><td>！</td><td>非</td><td>！真为假，！假为真</td></tr></tbody></table><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><ul><li>条件运算符<blockquote><p>表达式1？表达式2：表达式3;<br>  表达式1为真，执行表达式2，反之执行表达式3</p></blockquote></li></ul><h1 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h1><h2 id="3种流程控制结构"><a href="#3种流程控制结构" class="headerlink" title="3种流程控制结构"></a>3种流程控制结构</h2><ul><li>顺序结构：默认的流程结构。</li><li>选择结构：对给定的条件进行判断，再根据判断来决定执行哪一段代码。</li><li>循环结构：在给定条件成立的情况下，反复执行莫一段代码。</li></ul><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><ol><li>if(){}else{}</li><li>switch(){case :}</li></ol><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ol><li><p>while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while(条件）｛</span><br><span class="line">    语句1；</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line">//条件成立（为真），就执行&#123;&#125;中内容，条件不成立，就不执行</span><br></pre></td></tr></table></figure></li><li><p>do-while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    语句1；</span><br><span class="line">&#125;while(条件);</span><br><span class="line">// 先执行一遍&#123;&#125;中内容，再判断&apos;条件&apos;是否成立，成立继续执行，不成立，不执行。</span><br></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">执行循序：</span><br><span class="line">1.初始化表达式（只在开始的时候执行一次）</span><br><span class="line">2.循环条件表达式（返回值只有两种，真 或 假）</span><br><span class="line">3.2返回为真时，执行&#123;&#125;中内容。为假时，退出循环</span><br><span class="line">4.执行一次&#123;&#125;后，执行“循环后的操作表达式”</span><br><span class="line">5.再执行第2步，循环下去。</span><br><span class="line">*/</span><br><span class="line">for(初始化表达式；循环条件表达式；循环后的操作表达式)&#123;</span><br><span class="line">    执行语句；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>break和continue<br>  break常使用与switch和循环结构中，用于跳出switch或循环<br>  continue常用于循环结构中，用于跳出本次循环</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;输入输出&quot;&gt;&lt;a href=&quot;#输入输出&quot; class=&quot;headerlink&quot; title=&quot;输入输出&quot;&gt;&lt;/a&gt;输入输出&lt;/h1&gt;&lt;h2 id=&quot;printf和scanf的使用&quot;&gt;&lt;a href=&quot;#printf和scanf的使用&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言初识</title>
    <link href="http://yoursite.com/2015/12/19/c/C%E8%AF%AD%E8%A8%80%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2015/12/19/c/C语言初识/</id>
    <published>2015-12-19T07:24:00.000Z</published>
    <updated>2019-10-02T08:51:16.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机发展史"><a href="#计算机发展史" class="headerlink" title="计算机发展史"></a>计算机发展史</h2><ul><li><p>机器语言</p></li><li><p>所有的代码里面只有0和1</p></li><li><p>优点：直接对硬件产生作用，程序的执行效率非常高</p></li><li><p>缺点：指令又多又难记、可读性差、无可移植性</p></li><li><p>汇编语言</p></li><li><p>符号化的机器语言，用一个符号（英文单词、数字）来代表一条机器指令</p></li><li><p>优点：直接对硬件产生作用，程序的执行效率非常高、可读性好</p></li><li><p>缺点：符号非常多和难记、无可移植性</p></li><li><p>高级语言</p></li><li><p>非常接近自然语言的高级语言，语法和结构类似于普通英文</p></li><li><p>优点：简单、易用、易于理解、远离对硬件的直接操作、有可移植性</p></li><li><p>缺点：有些高级语言写出的程序执行效率并不高</p></li></ul><h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h2 id="什么是C语言"><a href="#什么是C语言" class="headerlink" title="什么是C语言"></a>什么是C语言</h2><ul><li>C语言就是一门计算机编程语言，属于高级语言，可以用来编写程序、开发软件。</li><li>ios程序的额主要开发语言就是C语言和Object-c，而Object-c是在C语言的基础上衍生出来的。</li><li>C语言是所有编程语言中的经典，很多高级语言都是从C语言中衍生出来的，比如C++，C#，Object-c等</li></ul><h2 id="C语言简史"><a href="#C语言简史" class="headerlink" title="C语言简史"></a>C语言简史</h2><ul><li>1972年发明，首次使用是用于重写UINX操作系统</li><li>它是一门面向过程的语言</li></ul><h2 id="C语言的特点"><a href="#C语言的特点" class="headerlink" title="C语言的特点"></a>C语言的特点</h2><ul><li>丰富的运算符</li><li>丰富的数据类型</li><li>可以直接操作硬件</li><li>高效的目标代码</li><li>可移植性好</li></ul><h2 id="C语言的用途"><a href="#C语言的用途" class="headerlink" title="C语言的用途"></a>C语言的用途</h2><ul><li>编写系统软件、图像处理、单片机程序、嵌入式系统开发等</li><li>便携游戏外挂</li><li>编写Android程序</li><li>编写iOS程序</li></ul><h2 id="C语言的版本问题"><a href="#C语言的版本问题" class="headerlink" title="C语言的版本问题"></a>C语言的版本问题</h2><ul><li>1983年美国国家标准（ANSI)成立一个委员，开始定制C语言标准的工作</li><li>1989年C语言标准被批准，这个版本的C语言标准成为ANSI C</li><li>1999年，国际标准化组织ISO对C语言标准进行修订，命名为C99</li><li>2011年12与8日，ISO发布新的标准草案：C11</li></ul><h2 id="C语言的开发过程"><a href="#C语言的开发过程" class="headerlink" title="C语言的开发过程"></a>C语言的开发过程</h2><p><code>编写程序</code>→<code>编译</code>→<code>链接</code>→<code>运行</code></p><h2 id="C语言程序"><a href="#C语言程序" class="headerlink" title="C语言程序"></a>C语言程序</h2><ul><li><p>构成</p><blockquote><p>任何一个C语言的程序都是有一个或者多个程序段（小程序）构成的，每个程序段都有自己的功能，我们一般称这些程序段为“函数”。所以说，C语言程序是由函数构成的。</p></blockquote></li><li><p>程序入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#incluce &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;程序入口&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>c程序源文件的拓展名为.c</p></li><li><p>常见错误</p></li><li><p>语法错误：编译器会直接报错</p></li><li><p>逻辑错误：没有语法错误，只是运行结果不正确</p></li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><blockquote><p>被C语言赋予了特殊含义的单词，这些单词是系统自己用的，叫做系统保留字，这些保留字称为关键字</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 32个关键字</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">double</span> <span class="keyword">int</span> <span class="class"><span class="keyword">struct</span> <span class="title">break</span> <span class="title">else</span> <span class="title">long</span> <span class="title">switch</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">enum</span> <span class="title">register</span> <span class="title">typedef</span> <span class="title">char</span> <span class="title">extern</span> <span class="title">return</span></span></span><br><span class="line"><span class="class"><span class="title">union</span> <span class="title">const</span> <span class="title">float</span> <span class="title">short</span> <span class="title">unsigned</span> <span class="title">continue</span> <span class="title">for</span></span></span><br><span class="line"><span class="class"><span class="title">signed</span> <span class="title">void</span> <span class="title">default</span> <span class="title">goto</span> <span class="title">sizeof</span> <span class="title">volatile</span> <span class="title">do</span> <span class="title">if</span></span></span><br><span class="line"><span class="class"><span class="title">while</span> <span class="title">static</span></span></span><br></pre></td></tr></table></figure><h2 id="标示符"><a href="#标示符" class="headerlink" title="标示符"></a>标示符</h2><p>标示符就是程序员在程序中起的一些名字，变量名、函数名等</p><ul><li><p>命名规范</p><ol><li>只能有26个英文字母的大小写、10个阿拉伯数字0~9、下划线_组成</li><li>不能以数字开头</li><li>不可以和关键字重名</li><li>严格区分大小写 </li></ol></li><li><p>行业约束</p><ol><li>尽量取有意义的名称</li><li>如果标示符包含多个单词，可以用驼峰标识（除第一个单词外，后面每个单词首字母大写 或者 用下划线连接）</li></ol></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>在所有计算机语言中都非常重要，用来解释一段程序或者一行代码是什么意思，可以是任何语言，不参与编译</p><ul><li>单行注释 <code>//</code></li><li>多行注释 <code>/*  要注释的内容 */</code> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;计算机发展史&quot;&gt;&lt;a href=&quot;#计算机发展史&quot; class=&quot;headerlink&quot; title=&quot;计算机发展史&quot;&gt;&lt;/a&gt;计算机发展史&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;机器语言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的代码里面只有0和1&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Android应用的基本组件</title>
    <link href="http://yoursite.com/2015/04/29/android/base/Android%E5%BA%94%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2015/04/29/android/base/Android应用的基本组件/</id>
    <published>2015-04-29T09:35:00.000Z</published>
    <updated>2019-10-02T08:41:02.792Z</updated>
    
    <content type="html"><![CDATA[<p>Android系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest.xml中进行注册，否则不予使用。本小节将对这些组件进行简单的介绍，使读者对Android应用开发的内容有一个大致的认识。</p><h2 id="活动（Activity）"><a href="#活动（Activity）" class="headerlink" title="活动（Activity）"></a>活动（Activity）</h2><p>Activity是Android应用中，最直接与用户接触的组件，它负责加载View组件，使其展现给用户，并保持与用户的交互。所有的Activity组件均需要继承Activity类，这是一个Content的间接子类，包装了一些Activity的基本特性。</p><p>View组件是所有UI组件、容器组件的基类，也就是说，它可以是一个布局容器，也可以是一个布局容器内的基本UI组件。View组件一般通过XML布局资源文件定义，同时Android系统也对这些View组件提供了对应的实现类。如果需要通过某个Activity把指定的View组件显示出来，调用Activity的setContentView()方法即可，它具有多个重载方法，可以传递一个XML资源ID或者View对象。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LinearLayout layout=<span class="keyword">new</span> LinearLayout(<span class="keyword">this</span>);</span><br><span class="line">setContentView(layout)；</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setContentView(R.layout.main);</span><br></pre></td></tr></table></figure><p>Activity为Android应用提供了一个用户界面，当一个Activity被开启之后，它具有自己的生命周期。Activity类也对这些生命周期提供了对应的方法，如果需要对Activity各个不同的生命周期做出响应，可以重写这些生命周期方法实现。对于大多数商业应用而言，整个系统中包含了多个Activity，在应用中逐步导航跳转开启这些Activity之后，会形成Activity的回退栈，当前显示并获得焦点的Activity位于这个回退栈的栈顶。</p><h2 id="服务（Service）"><a href="#服务（Service）" class="headerlink" title="服务（Service）"></a>服务（Service）</h2><p>Service主要用于在后台完成一些无需向用户展示界面的功能实现。通常位于系统后台运行，它一般不需要与用户进行交互，因此Service组件没有用户界面展示给用户。Service主要用于完成一些类似于下载文件、播放音乐等无需用户界面与用户进行交互的功能。<br>与Activity组件需要继承Activity类相似，Service组件同样需要继承Service类，Service类也是Context的间接子类，其中包装了一些Service的专有特性。一个Service被运行起来之后，它将具有自己独立的生命周期，Service类中对其各个不同的生命周期提供了对应的方法，开发人员可以通过在Service中重写Service类中这些生命周期方法，来响应Service各个生命周期的功能实现。</p><h2 id="广播接收器（BroadcastReceiver）"><a href="#广播接收器（BroadcastReceiver）" class="headerlink" title="广播接收器（BroadcastReceiver）"></a>广播接收器（BroadcastReceiver）</h2><p>BroadcastReceiver同样也是Android系统中的一个重要组件，BroadcastReceiver代表了一个广播接收器，用于接收系统中其它组件发送的广播，并对其进行响应或是拦截广播的继续传播。<br>广播是一个系统级的消息，当系统环境发生改变的时候会发送一些广播供对应的程序进行接收响应，例如：接收到一条短信、开机、关机、插上充电器、插上耳机、充电完成等，均会发送一条广播供需要监听此类广播的应用进行响应。除了一些系统事件的广播，开发人员也可以自定义广播内容。但是大部分情况下，开发应用的时候主要用于接受系统广播并对其进行响应，很少需要发送自定义的广播。<br>使用BroadcastReceiver组件接收广播非常的简单，只需要实现自己的BroadcastReceiver子类，并重写onReceive()方法，就能完成BroadcastReceiver，而对于这个BroadcastReceiver对什么广播感兴趣，则需要对其进行另行配置。</p><h2 id="内容提供者（ContentProvider）"><a href="#内容提供者（ContentProvider）" class="headerlink" title="内容提供者（ContentProvider）"></a>内容提供者（ContentProvider）</h2><p>Android系统作为一个智能操作系统，它需要系统中运行的应用程序都必须是相互独立的，各自运行在自己的Dalvik VM实例中。在正常情况下，Android应用之间是不能进行实时的数据交换，而考虑到有些应用的数据需要对外进行共享，Android系统提供了一个标准的数据接口ContentProvider，通过应用提供的ContentProvider，可以在其它应用中对这个应用的暴露出来的数据进行增删改查。<br>为应用程序暴露数据接口非常的简单，只需要继承ContentProvider类，并且实现insert()、delete()、update()、query()等方法，使外部应用可对本应用的数据进行增删改查。</p><h2 id="意图（Intent）"><a href="#意图（Intent）" class="headerlink" title="意图（Intent）"></a>意图（Intent）</h2><p>虽然Intent并不是Android应用的组件，也无需专门在清单文件中配置，但是它对于Android应用的作用非常的大。除了ContentProvider之外，其它组件的启动，均需要通过Intent进行指定。Intent不仅可以明确指定一个Android组件进行启动，还可以提供一个标准的行为，再由Android系统配合意图过滤器来选定启动指定组件来完成任务。而Intent在开启对组件的过程中，进行各个组件间数据的传递。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本章简要介绍了Android系统的发展史及其现状，并且介绍了Android系统的架构与Dalvik VM虚拟机，最后还简单介绍了Android开发中的四大组件。通过阅读本章，对Android的历史与现状、系统架构、基本组件有个大致的了解，这对本书接下来的内容理解非常有帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest
      
    
    </summary>
    
    
      <category term="Android基础" scheme="http://yoursite.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>android发展史及系统架构</title>
    <link href="http://yoursite.com/2015/04/29/android/base/android%E5%8F%91%E5%B1%95%E5%8F%B2%E5%8F%8A%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2015/04/29/android/base/android发展史及系统架构/</id>
    <published>2015-04-29T09:32:00.000Z</published>
    <updated>2019-10-02T08:40:59.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-Android发展史与现状"><a href="#1-1-Android发展史与现状" class="headerlink" title="1.1 Android发展史与现状"></a>1.1 Android发展史与现状</h2><p>Andy Rubin创立22个月后→（2005年）Google收购。</p><p>2008 Patrick Brady于Google I/O 演讲“Anatomy &amp; Physiology of an Android”，并提出的 Android HAL 架构图。</p><h3 id="Android版本升级"><a href="#Android版本升级" class="headerlink" title="Android版本升级"></a>Android版本升级</h3><p>Android系统今后将继续每半年一次的升级步伐，分别定在每年的夏天和年终。每代Android系统都将以食物命名，比如1.5版叫做 Cupcake(纸杯蛋糕)，1.6版为Donut(甜甜圈)，然后是Eclair(法式奶油夹心甜点)和Flan(水果馅饼)。Donut将把社交网络功能作为升级重点，在“手机的各种体验中”都增加社交网络元素。  </p><h4 id="1-5-Cupcake"><a href="#1-5-Cupcake" class="headerlink" title="1.5 (Cupcake)"></a>1.5 (Cupcake)</h4><p>基于Linux Kernel 2.6.27 2009年4月30日，官方1.5版本(Cupcake)的Android发布。主要的更新如下:<br>● 拍摄/回放视频，并支持上传到youtube<br>● 支持立体声蓝牙耳机，同时改善自动配对性能<br>● 最新的采用WebKit技术的浏览器，支持拷贝/粘帖和页面中搜索<br>● GPS性能大大提高<br>● 屏幕虚拟键盘<br>● 主屏幕增加音乐播放器和相框widgets<br>● 应用程序自动随着手机旋转<br>● 短信，Gmail，日历，浏览器的用户界面大幅改善，比如说Gmail现在可以批量删除邮件了<br>● 相机启动速度加快，拍摄图片可以直接上传到picasa<br>● 来电照片显示  </p><h4 id="1-6-Donut"><a href="#1-6-Donut" class="headerlink" title="1.6 (Donut)"></a>1.6 (Donut)</h4><p>基于Linux Kernel 2.6.29 2009年9月15日, 1.6(Donut)版本SDK发布。主要的更新如下:<br>● 完全重新设计的Android Market<br>● 手势支持<br>● 支持CDMA网络<br>● 文字转语音系统(TXT-2-speech)<br>● 快速搜索框<br>● 全新的拍照界面<br>● 应用程序耗电查看<br>● 支持VPN<br>● 支持更多的屏幕分辨率<br>● 支持OpenCore2媒体引擎<br>● 新增面向视觉或听觉困难人群的易用性插件  </p><h4 id="2-0-2-0-1-2-1-Eclair"><a href="#2-0-2-0-1-2-1-Eclair" class="headerlink" title="2.0/2.0.1/2.1(Eclair)"></a>2.0/2.0.1/2.1(Eclair)</h4><p>基于Linux Kernel 2.6.29 2009年10月26日, 2.0(Eclair)版本SDK发布。主要的更新如下:<br>● 优化硬件速度<br>● “Car Home”程序<br>● 支持更多的屏幕分辨率<br>● 重整界面<br>● 新的浏览器的用户界面和支持HTML5<br>● 新的联系人名单<br>● 更好的白色/黑色背景比率<br>● 改进Google Maps 3.1.2<br>● 支持Microsoft Exchange<br>● 支持内置相机闪光灯<br>● 数字变焦<br>● 改进的虚拟键盘<br>● 蓝牙2.1<br>Android的代号序列会按甜点名字中首个英文字母(C、D、E、F)的排列顺序。<br>下一个版本的Android将会命名为Froyo(冻酸奶,基于Linux Kernel 2.6.32)。Froyo 之后的版本的Android将会命名为Gingerbread(姜饼,基于Linux Kernel 2.6.33/34)。</p><p><strong>Android**</strong>版本**</p><p><strong>发布日期</strong></p><p><strong>代号</strong></p><p><strong>Android 1.1</strong></p><p><strong>Android 1.5</strong></p><p>2009年4月30日</p><p>Cupcake（纸杯蛋糕）</p><p><strong>Android 1.6</strong></p><p>2009年9月15日</p><p>Donut（炸面圈）</p><p><strong>Android 2.0/2.1</strong></p><p>2009年10月26日</p><p>Eclair（长松饼）</p><p><strong>Android 2.2</strong></p><p>2010年5月20日</p><p>Froyo（冻酸奶）</p><p><strong>Android 2.3</strong></p><p>2010年12月6日</p><p>Gingerbread（姜饼）</p><p><strong>Android 3.0/3.1/3.2</strong></p><p>2011年2月22日</p><p>Honeycomb（蜂巢）</p><p><strong>Android 4.0</strong></p><p>2011年10月19日</p><p>Ice Cream Sandwich（冰淇淋三明治）</p><p><strong>Android 4.1</strong></p><p>2012年6月28日</p><p>Jelly Bean（果冻豆）</p><p><strong>Android 4.2</strong></p><p>2012年10月8日</p><p>Jelly Bean（果冻豆）</p><p><strong>Android5.0</strong></p><p>待定</p><p>Lime Pie（酸橙派）</p><h3 id="1-2-Android系统的架构与特性"><a href="#1-2-Android系统的架构与特性" class="headerlink" title="1.2 Android系统的架构与特性"></a>1.2 Android系统的架构与特性</h3><h4 id="1-2-1-Android系统架构"><a href="#1-2-1-Android系统架构" class="headerlink" title="1.2.1 Android系统架构"></a>1.2.1 Android系统架构</h4><p>Android系统的底层是建立在Linux系统之上的，它采用软件叠层（Software Stack）的方式进行构建。使得层与层之间相互分离，明确各层的分工。这种分工保证了层与层之间的低苟合，当下层发生改变的时候，上层应用程序无需做任何改变。</p><p>下图为Android系统的系统架构图：</p><p><img src="http://s1.51cto.com/wyfs02/M01/25/73/wKioL1NgW-Si7ae7AAEJ_vZkaJ0908.jpg" alt></p><p>如图可知，Android系统分为四个层，从高到底分别是：应用程序层（Application）、应用程序框架层（Application Framework）、系统运行库层（Libraries）和Linux内核层（Linux Kernel）。</p><p>Android操作系统可以在四个主要层面上分为5个部分：</p><h5 id="1-应用程序层（Application）"><a href="#1-应用程序层（Application）" class="headerlink" title="1. 应用程序层（Application）"></a>1. 应用程序层（Application）</h5><p>Android系统包含了一系列核心应用程序，包括电子邮件、短信SMS、日历、拨号器、地图、浏览器、联系人等。这些应用程序都是用Java语言编写。本书重点讲解如何编写Android系统上运行的应用程序，在程序分层上，与系统核心应用程序平级。</p><h5 id="2-应用程序框架层（Application-Framework）"><a href="#2-应用程序框架层（Application-Framework）" class="headerlink" title="2. 应用程序框架层（Application Framework）"></a>2. 应用程序框架层（Application Framework）</h5><p>Android应用程序框架提供了大量的API供开发人员使用，Android应用程序的开发，就是调用这些API，根据需求实现功能。</p><p>应用程序框架是应用程序的基础。为了软件的复用，任何一个应用程序都可以开发Android系统的功能模块，只要发布的时候遵循应用程序框架的规范，其它应用程序也可以使用这个功能模块。</p><h5 id="3-系统运行库层（Libraries）"><a href="#3-系统运行库层（Libraries）" class="headerlink" title="3. 系统运行库层（Libraries）**"></a>3. 系统运行库层（Libraries）**</h5><p>Android系统运行库是用C/C++语言编写的，是一套被不同组件所使用的函数库组成的集合。一般来说，Android应用开发者无法直接调用这套函数库，都是通过它上层的应用程序框架提供的API来对这些函数库进行调用。</p><p>下面对一些核心库进行简单的介绍：</p><blockquote><p><strong>Libc：</strong>从BSD系统派生出来的标准C系统库，在此基础之上，为了便携式Linux系统专门进行了调整。</p><p><strong>Medio Framework：</strong>基于PacketView的OpenCORE，这套媒体库支持播放与录制硬盘及视频格式的文件，并能查看静态图片。</p><p><strong>Surface Manager：</strong>在执行多个应用程序的时，负责管理显示与存取操作间的互动，同时负责2D绘图与3D绘图进行显示合成。</p><p><strong>WebKit：</strong>Web浏览器引擎，该引擎为Android浏览器提供支持。</p><p><strong>SGL：</strong>底层的2D图像引擎。</p><p><strong>3D libraries：</strong>基于OpenGL ES 1.0API，提供使用软硬件实现3D加速的功能。</p><p><strong>FreeType：</strong>提供位图和向量字体的支持。</p><p><strong>SQLite：</strong>轻量级的关系型数据库。</p></blockquote><h5 id="4-Android运行时"><a href="#4-Android运行时" class="headerlink" title="4. Android运行时**"></a>4. Android运行时**</h5><pre><code>Android运行时由两部分完成：Android核心库和Dalvik虚拟机。其中核心库集提供了Java语言核心库所能使用的绝大部分功能，Dalvik虚拟机负责运行Android应用程序。虽然Android应用程序通过Java语言编写，而每个Java程序都会在Java虚拟机JVM内运行，但是Android系统毕竟是运行在移动设备上的，由于硬件的限制， Android应用程序并不使用Java的虚拟机JVM来运行程序，而是使用自己独立的虚拟机Dalvik VM，它针对多个同时高效运行的虚拟机进行了优化。每个Android应用程序都运行在单独的一个Dalvik虚拟机内，因此Android系统可以方便对应用程序进行隔离。</code></pre><h5 id="5-Linux内核"><a href="#5-Linux内核" class="headerlink" title="5. Linux内核"></a>5. Linux内核</h5><p>Android系统是基于Linux2.6之上建立的操作系统，它的Linux内核为Android系统提供了安全性、内存管理、进程管理、网络协议栈、驱动模型等核心系统服务。Linux内核帮助Android系统实现了底层硬件与上层软件之间的抽象。</p><h4 id="1-2-2-Dalvik-VM和JVM的区别"><a href="#1-2-2-Dalvik-VM和JVM的区别" class="headerlink" title="1.2.2 Dalvik VM和JVM的区别"></a>1.2.2 Dalvik VM和JVM的区别</h4><p>JVM（Java虚拟机）是一个虚构出来的运行Java程序的运行时，是通过在实际的计算机上仿真模拟各种计算机功能的实现。它具有完善的硬件架构（如处理器、堆栈、寄存器等），还具有相应的指令系统，使用JVM就是使Java程序支持与操作系统无关。理论上在任何操作系统中，只要有对应的JVM，即可运行Java程序。</p><p>Dalvik VM是在Android系统上运行Android程序的虚拟机，其指令集是基于寄存器架构的，执行特有的文件格式-dex字节码来完成对象生命周期管理、堆栈管理、线程管理、安全异常管理、垃圾回收等重要功能。</p><p>由于Android应用程序的开发编程语言是Java，而Java程序运行在JVM（Java虚拟机）上的，因此有些人会把Android的虚拟机DalvikVM和JVM弄混淆，但是实际上Dalvik并未遵守JVM规范，而且两者也是互不兼容。</p><p>从Dalvik VM和JVM的编译过程分析，它们的编译过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JVM：.java→.class→.jar</span><br><span class="line">Dalvik VM：.java→.class→.dex</span><br></pre></td></tr></table></figure><p>从它们的编译过程可以看出，JVM运行的是.class文件的Java字节码，但是Dalvik VM运行的是其转换后的dex（Dalvik Executable）文件。JVM字节从.class文件或者JAR包中加载字节码然后运行，而Dalvik VM无法直接从.class文件或JAR包中加载字节码，它需要通过DX工具将应用程序所有的.class文件编译成一个.dex文件，Dalvik VM则运行这个.dex文件。</p><p>下图显示了Dalvik VM与JVM编译过程的区别：</p><p><img src="http://s4.51cto.com/wyfs02/M01/25/73/wKiom1NgXMOTVyNiAAB-h8_94xE986.jpg" alt></p><p>从图中可以看出，Dalvik VM把.java文件编译成.class后，会对.class进行重构，整合的基本元素（常量池、类定义、数据段）,最后压缩写进一个.dex文件中。其中，常量池描述了所有的常量，包括引用、方法名、数值常量等；类定义包括访问标识、类名等基本信息；数据段中包含各种被VM指定的方法代码以及类和方法的相关信息和实例变量。这种把多个.class文件进行整合的方法，大大提高了Android程序的运行速度，例如：应用程序中多个类定义了字符串常量TAG，而在JVM中，会编译成多个.class文件，每个.class文件的常量池中，均包含这个TAG常量，但是Dalvik VM在编译成.dex文件之后，其常量池里只有一个TAG常量。</p><p>JVM和Dalvik VM还有一点非常重要的不同，就是基于的架构不同。JVM是基于栈的架构，而Dalvik VM是基于寄存器的架构。相对于基于栈的JVM而言，基于寄存器的Dalvik VM实现虽然牺牲了一些硬件上的通用性，但是它在代码的执行效率上要更胜一筹。一般来讲，VM中指令的解释执行的时间主要花费在以下三个方面：</p><blockquote><p>分发指令；</p><p>访问运算数；</p><p>执行运算；</p></blockquote><p>其中分发指令这个环节对性能的影响最大。在基于寄存器的Dalvik VM中，可以更有效的减少冗余指令的分发，减少内存的读写访问。</p><p>从JVM和Dalvik VM的区别上来说，Dalvik VM主要是针对Android这个嵌入式操作系统的特点进行了各种优化，使其更省电、更省内存、运行效率更高，但是牺牲了一些JVM的与平台无关的特性。实际上，Dalvik VM本就是为Android设计的，无需考虑其它平台的问题。这里只是介绍了JVM和Dalvik VM的两个重要的区别，毕竟本书并不是讲解Android内核的，这里只是点明Dalvik VM的特点，读者对这部分的内容了解即可。</p><h3 id="1-2-3-Android系统平台的优势"><a href="#1-2-3-Android系统平台的优势" class="headerlink" title="1.2.3 Android系统平台的优势"></a>1.2.3 Android系统平台的优势</h3><p>Android系统相对于其它操作系统，有如下几点优势：</p><h4 id="1-开放性"><a href="#1-开放性" class="headerlink" title="1. 开放性"></a>1. 开放性</h4><p>首先就是Android系统的开放性，其开发平台允许任何移动终端厂商加入到Android联盟中来，降低了开发门槛，使其拥有更多的开发者，随着用户和应用的日益丰富，也将推进Android系统的成熟。同时，开放性有利于Android设备的普及以及市场竞争力，这样有利于消费者买到更低价位的Android设备。</p><h4 id="2-丰富的硬件选择"><a href="#2-丰富的硬件选择" class="headerlink" title="2. 丰富的硬件选择"></a>2. 丰富的硬件选择</h4><p>同样由于Android系统的开放性，众多硬件厂商可以推出各种的搭载Android系统的设备。现如今，Android系统不仅仅只是运行在手机上，越来越多的设备开始支持Android系统，如电视、可佩戴设备、数码相机等。</p><h4 id="3-便于开发"><a href="#3-便于开发" class="headerlink" title="3. 便于开发"></a>3. 便于开发</h4><p>Google开放了Android的系统源码，提供了开发者一个自由的开发环境，不必受到各种条条框框的束缚。</p><h4 id="4-Google服务的支持"><a href="#4-Google服务的支持" class="headerlink" title="4. Google服务的支持"></a>4. Google服务的支持</h4><p>Google公司作为一个做服务的公司，它提供了如地图、邮件、搜索等服务，Android系统可以对这些服务进行无缝的结合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-1-Android发展史与现状&quot;&gt;&lt;a href=&quot;#1-1-Android发展史与现状&quot; class=&quot;headerlink&quot; title=&quot;1.1 Android发展史与现状&quot;&gt;&lt;/a&gt;1.1 Android发展史与现状&lt;/h2&gt;&lt;p&gt;Andy Rubin
      
    
    </summary>
    
    
      <category term="Android基础" scheme="http://yoursite.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>PHP开发工具ZendStudio10</title>
    <link href="http://yoursite.com/2015/04/17/ide/PHP%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7ZendStudio10/"/>
    <id>http://yoursite.com/2015/04/17/ide/PHP开发工具ZendStudio10/</id>
    <published>2015-04-17T08:59:00.000Z</published>
    <updated>2019-10-02T08:42:31.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、zend-studio-10破解-汉化，参考文档"><a href="#一、zend-studio-10破解-汉化，参考文档" class="headerlink" title="一、zend studio 10破解/汉化，参考文档"></a>一、zend studio 10破解/汉化，参考文档</h2><p><a href="http://blog.csdn.net/qq1355541448/article/details/16807429" target="_blank" rel="noopener">http://blog.csdn.net/qq1355541448/article/details/16807429</a></p><h2 id="二、安装Composer"><a href="#二、安装Composer" class="headerlink" title="二、安装Composer"></a>二、安装Composer</h2><p>去到官网下载<a href="https://getcomposer.org/download/" target="_blank" rel="noopener">https://getcomposer.org/download/</a></p><p><a href="http://static.oschina.net/uploads/img/201504/17120759_Znd7.png" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/img/201504/17120800_gpew.png" alt="image" title="image"></a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="windows下Composer因php-openssl扩展缺失而安装失败。"><a href="#windows下Composer因php-openssl扩展缺失而安装失败。" class="headerlink" title="windows下Composer因php_openssl扩展缺失而安装失败。"></a>windows下Composer因php_openssl扩展缺失而安装失败。</h3><p>Composer( <a href="https://getcomposer.org/" target="_blank" rel="noopener">https://getcomposer.org/</a> )是PHP下的一个依赖管理工具。你可以在你的项目中声明你所需要用到的类库，然后Composer会在项目中为你安装它们。如果你了解Node的 npm 或者Ruby的 Bundler ，就理解它是做什么的了，但是，它不是包管理器。</p><p>在Windows的Wamp环境下安装Composer(注：Composer要求PHP版本在5.3.2+)，你可能会遇到这种安装失败的情况：出错信息是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &quot;The openssl extension is missing, which will reduce the security and stability of Composer. If possible you should enable it or recompile php with --with-openssl&quot; ，大意就是你的PHP缺少openssl扩展。</span><br><span class="line"></span><br><span class="line">你可能会去屏幕右下角的Wamp的控制台，去加载php的openssl扩展，或者在php.ini中去掉 extension=php_openssl.dll 这一行开头的注释，然后重启server，结果发现还是不行。</span><br><span class="line"></span><br><span class="line">正确的做法是在php的安装目录比如说C:\wamp\bin\php\php5.3.3\中，找到找个目录下的php.ini文件，然后去掉 extension=php_openssl.dll 这一行开头的注释，之后就可以顺利安装Composer了。</span><br><span class="line"></span><br><span class="line">你可以发现上面出现了两个php.ini，是的Wamp在Apache和在CLI(命令行)模式下使用了不同的php.ini文件，当你在WAMP的控制台去启用php_openssl这个扩展，是启用的Apache的，而非CLI。而修改php安装目录中的php.ini配置文件，则可以启用CLI模式下的openssl。</span><br></pre></td></tr></table></figure><h3 id="Win7下运行php-Composer出现SSL报错的问题没有安装CA证书导致的！！！http-my-oschina-net-yearnfar-blog-346727"><a href="#Win7下运行php-Composer出现SSL报错的问题没有安装CA证书导致的！！！http-my-oschina-net-yearnfar-blog-346727" class="headerlink" title="Win7下运行php Composer出现SSL报错的问题没有安装CA证书导致的！！！http://my.oschina.net/yearnfar/blog/346727"></a>Win7下运行php Composer出现SSL报错的问题没有安装CA证书导致的！！！<a href="http://my.oschina.net/yearnfar/blog/346727" target="_blank" rel="noopener">http://my.oschina.net/yearnfar/blog/346727</a></h3><p>CA证书下载地址：<a href="http://curl.haxx.se/docs/caextract.html" target="_blank" rel="noopener">http://curl.haxx.se/docs/caextract.html</a></p><p>然后修改php.ini文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl.cafile= D:/wamp/php/verify/cacert.pem</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、zend-studio-10破解-汉化，参考文档&quot;&gt;&lt;a href=&quot;#一、zend-studio-10破解-汉化，参考文档&quot; class=&quot;headerlink&quot; title=&quot;一、zend studio 10破解/汉化，参考文档&quot;&gt;&lt;/a&gt;一、zend s
      
    
    </summary>
    
    
      <category term="IDE" scheme="http://yoursite.com/categories/IDE/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Win8(X64)下MySQL5.6版本安装及配置</title>
    <link href="http://yoursite.com/2015/04/16/mysql/Win8(X64)%E4%B8%8BMySQL5.6%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2015/04/16/mysql/Win8(X64)下MySQL5.6版本安装及配置/</id>
    <published>2015-04-16T08:59:00.000Z</published>
    <updated>2019-10-02T08:40:35.546Z</updated>
    
    <content type="html"><![CDATA[<h3 id="步骤1：双击MySQL安装程序"><a href="#步骤1：双击MySQL安装程序" class="headerlink" title="步骤1：双击MySQL安装程序"></a>步骤1：双击MySQL安装程序</h3><p>官方网站<a href="http://dev.mysql.com/downloads/下载该软件" target="_blank" rel="noopener">http://dev.mysql.com/downloads/下载该软件</a></p><h3 id="步骤2：“Install-MySQL-Products”-文字，会弹出的用户许可证协议窗口，安装类型设置窗口-安装类型界面各设置项含义"><a href="#步骤2：“Install-MySQL-Products”-文字，会弹出的用户许可证协议窗口，安装类型设置窗口-安装类型界面各设置项含义" class="headerlink" title="步骤2：“Install MySQL Products” 文字，会弹出的用户许可证协议窗口，安装类型设置窗口,安装类型界面各设置项含义:"></a>步骤2：“Install MySQL Products” 文字，会弹出的用户许可证协议窗口，安装类型设置窗口,安装类型界面各设置项含义:</h3><blockquote><p>Developer Default 默认安装类型</p><p>Server only 仅作为服务器</p><p>Client only 仅作为客户端</p><p>Full 完全安装类型</p><p>Custom 用户自定义安装类型</p><p>根据自己的情况选择安装，我们这里以自定义安装为例：</p><p><a href="http://static.oschina.net/uploads/img/201504/16165918_FGf6.png" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/img/201504/16165918_xBtP.png" alt="image" title="image"></a></p></blockquote><h3 id="步骤3：选择安装内容及安装目录："><a href="#步骤3：选择安装内容及安装目录：" class="headerlink" title="步骤3：选择安装内容及安装目录："></a>步骤3：选择安装内容及安装目录：</h3><blockquote><p><a href="http://static.oschina.net/uploads/img/201504/16165918_0GLM.png" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/img/201504/16165918_xZtq.png" alt="image" title="image"></a> <a href="http://static.oschina.net/uploads/img/201504/16165919_YIKU.png" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/img/201504/16165919_WpTX.png" alt="image" title="image"></a> <a href="http://static.oschina.net/uploads/img/201504/16165919_vrIa.png" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/img/201504/16165919_0DmF.png" alt="image" title="image"></a></p></blockquote><h3 id="步骤4：选择类型"><a href="#步骤4：选择类型" class="headerlink" title="步骤4：选择类型"></a>步骤4：选择类型</h3><blockquote><p>Developer Machine(开发机器)，个人用桌面工作站，占用最少的系统资源</p><p>Server Machine（服务器），MySQL服务器可以同其它应用程序一起运行，例如FTP、email和web服务器。MySQL服务器配置成使用适当比例的系统资源。</p><p>Dedicated MySQL Server Machine（专用MySQL服务器）：该选项代表只运行MySQL服务的服务器。假定运行没有运行其它应用程序。MySQL服务器配置成使用所有可用系统资源。</p></blockquote><p>根据自己情况选择即可，一般WEB服务器选择第二个，Server Machine即可！个人电脑安装选择第一个，Developer Machine比较好。</p><p><a href="http://static.oschina.net/uploads/img/201504/16165919_d9x7.png" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/img/201504/16165920_8GEz.png" alt="image" title="image"></a></p><h3 id="步骤5：配置密码"><a href="#步骤5：配置密码" class="headerlink" title="步骤5：配置密码"></a>步骤5：配置密码</h3><p><a href="http://static.oschina.net/uploads/img/201504/16165920_a2cR.png" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/img/201504/16165920_c01w.png" alt="image" title="image"></a></p><p>对应的界面中，我们需要设置root用户的密码，在“MySQL Root password”(输入新密码)和“Repeat Password”（确认）两个编辑框内输入期望的密码。也可以单击下面的【Add User】按钮另行添加新的用户。(<strong>注:Current Root Password:为空；如果输入密码了在后面安装会报错</strong>)</p><h3 id="步骤6：设置Windows-Service-Name-lt-可默认-gt-，此名为启动数据库服务名，要记住。"><a href="#步骤6：设置Windows-Service-Name-lt-可默认-gt-，此名为启动数据库服务名，要记住。" class="headerlink" title="步骤6：设置Windows Service Name&lt;可默认&gt;，此名为启动数据库服务名，要记住。"></a>步骤6：<strong>设置Windows Service Name&lt;可默认&gt;，此名为启动数据库服务名，要记住。</strong></h3><p><a href="http://static.oschina.net/uploads/img/201504/16165921_kz1L.png" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/img/201504/16165921_A9pr.png" alt="image" title="image"></a></p><h3 id="步骤7：验证服务："><a href="#步骤7：验证服务：" class="headerlink" title="步骤7：验证服务："></a>步骤7：验证服务：</h3><p>在开始菜单栏-&gt;<strong>附件-&gt;</strong>右键命令提示符-&gt;以管理员身份运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start MySQL56 为启动数据库服务命令；</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop MySQL56  为停止数据库服务命令。</span><br></pre></td></tr></table></figure><p><a href="http://static.oschina.net/uploads/img/201504/16165921_IAgd.png" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/img/201504/16165921_qsYm.png" alt="image" title="image"></a></p><h3 id="步骤8：连接测试："><a href="#步骤8：连接测试：" class="headerlink" title="步骤8：连接测试："></a>步骤8：连接测试：</h3><p>进入bin目录，执行mysql -u root -p 回车输入密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt;cd D:\Programs\WAPM\MySQL\MySQL Server 5.6\bin</span><br><span class="line">D:\Programs\WAPM\MySQL\MySQL Server 5.6\bin&gt;mysql -u root -p</span><br><span class="line">Enter password: ****** Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 1 Server version: 5.6.24-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;步骤1：双击MySQL安装程序&quot;&gt;&lt;a href=&quot;#步骤1：双击MySQL安装程序&quot; class=&quot;headerlink&quot; title=&quot;步骤1：双击MySQL安装程序&quot;&gt;&lt;/a&gt;步骤1：双击MySQL安装程序&lt;/h3&gt;&lt;p&gt;官方网站&lt;a href=&quot;http:
      
    
    </summary>
    
    
      <category term="IDE" scheme="http://yoursite.com/categories/IDE/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse.ini参数设置</title>
    <link href="http://yoursite.com/2015/04/16/ide/Eclipse.ini%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2015/04/16/ide/Eclipse.ini参数设置/</id>
    <published>2015-04-16T06:03:00.000Z</published>
    <updated>2019-10-02T08:42:28.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vmargs下常见参数的意思："><a href="#vmargs下常见参数的意思：" class="headerlink" title="vmargs下常见参数的意思："></a>vmargs下常见参数的意思：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-vmargs  </span><br><span class="line">-Xms40m  </span><br><span class="line">-Xmx256m  </span><br><span class="line">-XX:PermSize=64M  </span><br><span class="line">-XX:MaxPermSize=128M</span><br></pre></td></tr></table></figure><ul><li>-vmargs: 说明后面是VM的参数  </li><li>-Xms40m: 虚拟机占用系统的最小内存,初始分配  </li><li>-Xmx256m: 虚拟机占用系统的最大内存,按需分配  </li><li>-XX:PermSize: 最小堆大小。一般报内存不足时,都是说这个太小, 堆空间剩余小于5%就会警告,建议把这个稍微设大一点,不过要视自己机器内存大小来设置，但不能超过MaxPermSize  </li><li>-XX:MaxPermSize: 最大堆大小。这个也适当大些所以若出现问题，首先请调整 <code>-Xms40m：</code>将其设置的小一些，就可以解决问题<code>PermSize</code>和<code>MaxPermSize</code>指虚拟机为java永久生成对象（Permanate generation）等这些可反射对象分配内 存的限制，这些内存不包括在Heap（堆内存）区之中.</li></ul><h3 id="解决Failed-to-creat-java-virtual-machine问题"><a href="#解决Failed-to-creat-java-virtual-machine问题" class="headerlink" title="解决Failed to creat java virtual machine问题:"></a>解决Failed to creat java virtual machine问题:</h3><p>打开eclipse安装目录下的eclipse.ini文件，修改：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--launcher.XXMaxPermSize  </span><br><span class="line">128M;</span><br></pre></td></tr></table></figure><p>为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--launcher.XXMaxPermSize  </span><br><span class="line">256m</span><br></pre></td></tr></table></figure><p>设置Eclipse使用的JRE为本机安装的JDK目录：<br>在eclipse.ini中添加两行  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> -vm  </span><br><span class="line">C:\\Program Files\\Java\\jdk1.6.0_10\\bin\\javaw.exe</span><br></pre></td></tr></table></figure><ul><li>注意: 要写在两行，写在一行不能生效；这两行要定在-vmargs之前，不然也不能生效。</li></ul><h3 id="我的eclipes-ini文件配置如下："><a href="#我的eclipes-ini文件配置如下：" class="headerlink" title="我的eclipes.ini文件配置如下："></a>我的eclipes.ini文件配置如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-startup</span><br><span class="line">plugins/org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar</span><br><span class="line">--launcher.library</span><br><span class="line">plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.200.v20140603-1326</span><br><span class="line">-product</span><br><span class="line">org.eclipse.epp.package.java.product</span><br><span class="line">-showsplash</span><br><span class="line">org.eclipse.platform</span><br><span class="line">--launcher.defaultAction</span><br><span class="line">openFile</span><br><span class="line">--launcher.XXMaxPermSize</span><br><span class="line">384M</span><br><span class="line">-vm</span><br><span class="line">C:\Program Files\Java\jre7\bin\javaw.exe</span><br><span class="line">-vmargs</span><br><span class="line">-Dcom.sun.management.jmxremote </span><br><span class="line">-Dosgi.requiredJavaVersion=1.6</span><br><span class="line">-Xverify:none</span><br><span class="line">-Xmn128m</span><br><span class="line">-Xms256m</span><br><span class="line">-Xmx768m</span><br><span class="line">-Xss1m</span><br><span class="line">-XX:PermSize=128M</span><br><span class="line">-XX:MaxPermSize=512M</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vmargs下常见参数的意思：&quot;&gt;&lt;a href=&quot;#vmargs下常见参数的意思：&quot; class=&quot;headerlink&quot; title=&quot;vmargs下常见参数的意思：&quot;&gt;&lt;/a&gt;vmargs下常见参数的意思：&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="IDE" scheme="http://yoursite.com/categories/IDE/"/>
    
    
      <category term="eclipse" scheme="http://yoursite.com/tags/eclipse/"/>
    
  </entry>
  
</feed>
