<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不熬夜的喵</title>
  
  <subtitle>夏天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-30T08:36:55.883Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LiuLi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Hexo+GitHub搭建个人博客(二)</title>
    <link href="http://yoursite.com/2019/09/30/hexo%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/09/30/hexo配置/</id>
    <published>2019-09-30T06:55:00.000Z</published>
    <updated>2019-09-30T08:36:55.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装好hexo后，可进行各项配置</p></blockquote><h3 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h3><p>使用：<code>hexo new page “about”</code>新建一个 关于我 页面。<br>主题的<code>_config.yml</code>文件中的 <code>menu</code> 中进行匹配<br>不同主题 <code>_config. yml</code>文件有区别</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">menu</span>:</span><br><span class="line">  <span class="attribute">home</span>: /      <span class="comment">//主页</span></span><br><span class="line">  <span class="attribute">categories</span>: /categories <span class="comment">//分类</span></span><br><span class="line">  <span class="attribute">archives</span>: /archives   <span class="comment">//归档</span></span><br><span class="line">  <span class="attribute">tags</span>: /tags   <span class="comment">//标签</span></span><br><span class="line">  <span class="attribute">about</span>: /about   <span class="comment">//关于                  （添加此行即可）</span></span><br><span class="line">或    </span><br><span class="line"><span class="attribute">menu</span>:</span><br><span class="line">  - <span class="attribute">page</span>: home</span><br><span class="line">    <span class="attribute">directory</span>: .      <span class="comment">//主页</span></span><br><span class="line">    <span class="attribute">icon</span>: fa-home</span><br><span class="line">  - <span class="attribute">page</span>: archive</span><br><span class="line">    <span class="attribute">directory</span>: archives/    <span class="comment">//归档</span></span><br><span class="line">    <span class="attribute">icon</span>: fa-archive</span><br><span class="line">  - <span class="attribute">page</span>: about</span><br><span class="line">    <span class="attribute">directory</span>: about/    <span class="comment">//关于</span></span><br><span class="line">    <span class="attribute">icon</span>: fa-user</span><br><span class="line">  - <span class="attribute">page</span>: rss</span><br><span class="line">    <span class="attribute">directory</span>: atom.xml    <span class="comment">//rss订阅</span></span><br><span class="line">    <span class="attribute">icon</span>: fa-rss</span><br></pre></td></tr></table></figure><p>编辑 about 关于页面 md文件 部署就能看到</p><h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><p>使用： <code>hexo new page categories</code> 新建一个 分类 页面。<br>主题的 <code>_config.yml</code> 文件中的 <code>menu</code> 中进行匹配</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> /      <span class="comment">//主页</span></span><br><span class="line"><span class="symbol">  categories:</span> /categories <span class="comment">//分类   </span></span><br><span class="line"><span class="symbol">  archives:</span> /archives   <span class="comment">//归档</span></span><br><span class="line"><span class="symbol">  tags:</span> /tags   <span class="comment">//标签                  </span></span><br><span class="line"><span class="symbol">  about:</span> /about   <span class="comment">//关于</span></span><br></pre></td></tr></table></figure><p>底下代码是一篇包含 分类 文章的例子：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">title:</span> 分类测试</span><br><span class="line"><span class="symbol">categories:</span></span><br><span class="line">- hexo                       （这个就是文章的分类了）</span><br></pre></td></tr></table></figure><h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>hexo博客有一个专门生成RSS xml文件的插件<code>hexo-generator-feed</code><br>我们来安装它</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed</span><br></pre></td></tr></table></figure><p>看到<code>added 3 packages</code>说明安装成功了。</p><h4 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h4><p>在博客工程文件根目录下<code>_config.yml</code>文件中添加如下内容</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Extensions</span></span><br><span class="line"><span class="symbol">plugins:</span></span><br><span class="line">    hexo-generator-feed</span><br><span class="line"><span class="meta">#Feed Atom</span></span><br><span class="line"><span class="symbol">feed:</span></span><br><span class="line"><span class="symbol">    type:</span> atom</span><br><span class="line"><span class="symbol">    path:</span> atom.xml</span><br><span class="line"><span class="symbol">    limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="生成RSS"><a href="#生成RSS" class="headerlink" title="生成RSS"></a>生成RSS</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.</span><br><span class="line"><span class="builtin-name">INFO</span>  Start processing</span><br><span class="line"><span class="builtin-name">INFO</span>  Files loaded <span class="keyword">in</span> 6.33 s</span><br><span class="line"><span class="builtin-name">INFO</span>  Generated: atom.xml &lt;----------成功生成atom.xml文件</span><br><span class="line"><span class="builtin-name">INFO</span>  Generated: sitemap.xml</span><br><span class="line"><span class="builtin-name">INFO</span>  Generated: baidusitemap.xml</span><br><span class="line"><span class="builtin-name">INFO</span>  Generated: about/index.html</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装好hexo后，可进行各项配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关于页面&quot;&gt;&lt;a href=&quot;#关于页面&quot; class=&quot;headerlink&quot; title=&quot;关于页面&quot;&gt;&lt;/a&gt;关于页面&lt;/h3&gt;&lt;p&gt;使用：&lt;code&gt;he
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo+GitHub搭建个人博客(一)</title>
    <link href="http://yoursite.com/2019/09/30/first/"/>
    <id>http://yoursite.com/2019/09/30/first/</id>
    <published>2019-09-30T05:55:00.000Z</published>
    <updated>2019-09-30T08:41:22.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。<code>hexo</code>让我的想法变成了现实。<br>下面就简单说一下整体打搭建流程。</p><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><blockquote><p>最开始以为要把hexo安装到服务器上，后来了解后恍然大悟，他是在本地安装的，然后将我们写的markdown文件转换为静态网站文件，放到github上，利用github来作为服务器的。</p></blockquote><ol><li>安装git bash。</li><li>安装npm。</li><li>安装NodeJs</li><li>申请github账户，并创建一个仓库，命名规范为  “账户名”.github.io。</li><li>创建SSH并添加到github上。</li><li>安装hexo。</li><li>部署项目，本地测试。</li><li>上传到github上。</li></ol><p>到这一步，博客就搭建好了，域名可选择性进行关联。后续可以设置主题、添加RSS、设置评论、以及写文章。具体可参考<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。&lt;code&gt;hexo&lt;/code&gt;让我的想法变成了现实。&lt;br
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android应用的基本组件</title>
    <link href="http://yoursite.com/2015/04/29/Android%E5%BA%94%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2015/04/29/Android应用的基本组件/</id>
    <published>2015-04-29T09:35:00.000Z</published>
    <updated>2019-10-02T04:09:39.151Z</updated>
    
    <content type="html"><![CDATA[<p>Android系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest.xml中进行注册，否则不予使用。本小节将对这些组件进行简单的介绍，使读者对Android应用开发的内容有一个大致的认识。</p><h2 id="活动（Activity）"><a href="#活动（Activity）" class="headerlink" title="活动（Activity）"></a>活动（Activity）</h2><p>Activity是Android应用中，最直接与用户接触的组件，它负责加载View组件，使其展现给用户，并保持与用户的交互。所有的Activity组件均需要继承Activity类，这是一个Content的间接子类，包装了一些Activity的基本特性。</p><p>View组件是所有UI组件、容器组件的基类，也就是说，它可以是一个布局容器，也可以是一个布局容器内的基本UI组件。View组件一般通过XML布局资源文件定义，同时Android系统也对这些View组件提供了对应的实现类。如果需要通过某个Activity把指定的View组件显示出来，调用Activity的setContentView()方法即可，它具有多个重载方法，可以传递一个XML资源ID或者View对象。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LinearLayout layout=<span class="keyword">new</span> LinearLayout(<span class="keyword">this</span>);</span><br><span class="line">setContentView(layout)；</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">setContentView</span>(<span class="selector-tag">R</span><span class="selector-class">.layout</span><span class="selector-class">.main</span>);</span><br></pre></td></tr></table></figure><p>Activity为Android应用提供了一个用户界面，当一个Activity被开启之后，它具有自己的生命周期。Activity类也对这些生命周期提供了对应的方法，如果需要对Activity各个不同的生命周期做出响应，可以重写这些生命周期方法实现。对于大多数商业应用而言，整个系统中包含了多个Activity，在应用中逐步导航跳转开启这些Activity之后，会形成Activity的回退栈，当前显示并获得焦点的Activity位于这个回退栈的栈顶。</p><h2 id="服务（Service）"><a href="#服务（Service）" class="headerlink" title="服务（Service）"></a>服务（Service）</h2><p>Service主要用于在后台完成一些无需向用户展示界面的功能实现。通常位于系统后台运行，它一般不需要与用户进行交互，因此Service组件没有用户界面展示给用户。Service主要用于完成一些类似于下载文件、播放音乐等无需用户界面与用户进行交互的功能。<br>与Activity组件需要继承Activity类相似，Service组件同样需要继承Service类，Service类也是Context的间接子类，其中包装了一些Service的专有特性。一个Service被运行起来之后，它将具有自己独立的生命周期，Service类中对其各个不同的生命周期提供了对应的方法，开发人员可以通过在Service中重写Service类中这些生命周期方法，来响应Service各个生命周期的功能实现。</p><h2 id="广播接收器（BroadcastReceiver）"><a href="#广播接收器（BroadcastReceiver）" class="headerlink" title="广播接收器（BroadcastReceiver）"></a>广播接收器（BroadcastReceiver）</h2><p>BroadcastReceiver同样也是Android系统中的一个重要组件，BroadcastReceiver代表了一个广播接收器，用于接收系统中其它组件发送的广播，并对其进行响应或是拦截广播的继续传播。<br>广播是一个系统级的消息，当系统环境发生改变的时候会发送一些广播供对应的程序进行接收响应，例如：接收到一条短信、开机、关机、插上充电器、插上耳机、充电完成等，均会发送一条广播供需要监听此类广播的应用进行响应。除了一些系统事件的广播，开发人员也可以自定义广播内容。但是大部分情况下，开发应用的时候主要用于接受系统广播并对其进行响应，很少需要发送自定义的广播。<br>使用BroadcastReceiver组件接收广播非常的简单，只需要实现自己的BroadcastReceiver子类，并重写onReceive()方法，就能完成BroadcastReceiver，而对于这个BroadcastReceiver对什么广播感兴趣，则需要对其进行另行配置。</p><h2 id="内容提供者（ContentProvider）"><a href="#内容提供者（ContentProvider）" class="headerlink" title="内容提供者（ContentProvider）"></a>内容提供者（ContentProvider）</h2><p>Android系统作为一个智能操作系统，它需要系统中运行的应用程序都必须是相互独立的，各自运行在自己的Dalvik VM实例中。在正常情况下，Android应用之间是不能进行实时的数据交换，而考虑到有些应用的数据需要对外进行共享，Android系统提供了一个标准的数据接口ContentProvider，通过应用提供的ContentProvider，可以在其它应用中对这个应用的暴露出来的数据进行增删改查。<br>为应用程序暴露数据接口非常的简单，只需要继承ContentProvider类，并且实现insert()、delete()、update()、query()等方法，使外部应用可对本应用的数据进行增删改查。</p><h2 id="意图（Intent）"><a href="#意图（Intent）" class="headerlink" title="意图（Intent）"></a>意图（Intent）</h2><p>虽然Intent并不是Android应用的组件，也无需专门在清单文件中配置，但是它对于Android应用的作用非常的大。除了ContentProvider之外，其它组件的启动，均需要通过Intent进行指定。Intent不仅可以明确指定一个Android组件进行启动，还可以提供一个标准的行为，再由Android系统配合意图过滤器来选定启动指定组件来完成任务。而Intent在开启对组件的过程中，进行各个组件间数据的传递。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本章简要介绍了Android系统的发展史及其现状，并且介绍了Android系统的架构与Dalvik VM虚拟机，最后还简单介绍了Android开发中的四大组件。通过阅读本章，对Android的历史与现状、系统架构、基本组件有个大致的了解，这对本书接下来的内容理解非常有帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest
      
    
    </summary>
    
    
      <category term="Android基础" scheme="http://yoursite.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>android发展史及系统架构</title>
    <link href="http://yoursite.com/2015/04/29/android%E5%8F%91%E5%B1%95%E5%8F%B2%E5%8F%8A%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2015/04/29/android发展史及系统架构/</id>
    <published>2015-04-29T09:32:00.000Z</published>
    <updated>2019-09-30T09:42:21.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-Android发展史与现状"><a href="#1-1-Android发展史与现状" class="headerlink" title="1.1 Android发展史与现状"></a>1.1 Android发展史与现状</h2><p>Andy Rubin创立22个月后→（2005年）Google收购。</p><p>2008 Patrick Brady于Google I/O 演讲“Anatomy &amp; Physiology of an Android”，并提出的 Android HAL 架构图。</p><h3 id="Android版本升级"><a href="#Android版本升级" class="headerlink" title="Android版本升级"></a>Android版本升级</h3><p>Android系统今后将继续每半年一次的升级步伐，分别定在每年的夏天和年终。每代Android系统都将以食物命名，比如1.5版叫做 Cupcake(纸杯蛋糕)，1.6版为Donut(甜甜圈)，然后是Eclair(法式奶油夹心甜点)和Flan(水果馅饼)。Donut将把社交网络功能作为升级重点，在“手机的各种体验中”都增加社交网络元素。  </p><h4 id="1-5-Cupcake"><a href="#1-5-Cupcake" class="headerlink" title="1.5 (Cupcake)"></a>1.5 (Cupcake)</h4><p>基于Linux Kernel 2.6.27 2009年4月30日，官方1.5版本(Cupcake)的Android发布。主要的更新如下:<br>● 拍摄/回放视频，并支持上传到youtube<br>● 支持立体声蓝牙耳机，同时改善自动配对性能<br>● 最新的采用WebKit技术的浏览器，支持拷贝/粘帖和页面中搜索<br>● GPS性能大大提高<br>● 屏幕虚拟键盘<br>● 主屏幕增加音乐播放器和相框widgets<br>● 应用程序自动随着手机旋转<br>● 短信，Gmail，日历，浏览器的用户界面大幅改善，比如说Gmail现在可以批量删除邮件了<br>● 相机启动速度加快，拍摄图片可以直接上传到picasa<br>● 来电照片显示  </p><h4 id="1-6-Donut"><a href="#1-6-Donut" class="headerlink" title="1.6 (Donut)"></a>1.6 (Donut)</h4><p>基于Linux Kernel 2.6.29 2009年9月15日, 1.6(Donut)版本SDK发布。主要的更新如下:<br>● 完全重新设计的Android Market<br>● 手势支持<br>● 支持CDMA网络<br>● 文字转语音系统(TXT-2-speech)<br>● 快速搜索框<br>● 全新的拍照界面<br>● 应用程序耗电查看<br>● 支持VPN<br>● 支持更多的屏幕分辨率<br>● 支持OpenCore2媒体引擎<br>● 新增面向视觉或听觉困难人群的易用性插件  </p><h4 id="2-0-2-0-1-2-1-Eclair"><a href="#2-0-2-0-1-2-1-Eclair" class="headerlink" title="2.0/2.0.1/2.1(Eclair)"></a>2.0/2.0.1/2.1(Eclair)</h4><p>基于Linux Kernel 2.6.29 2009年10月26日, 2.0(Eclair)版本SDK发布。主要的更新如下:<br>● 优化硬件速度<br>● “Car Home”程序<br>● 支持更多的屏幕分辨率<br>● 重整界面<br>● 新的浏览器的用户界面和支持HTML5<br>● 新的联系人名单<br>● 更好的白色/黑色背景比率<br>● 改进Google Maps 3.1.2<br>● 支持Microsoft Exchange<br>● 支持内置相机闪光灯<br>● 数字变焦<br>● 改进的虚拟键盘<br>● 蓝牙2.1<br>Android的代号序列会按甜点名字中首个英文字母(C、D、E、F)的排列顺序。<br>下一个版本的Android将会命名为Froyo(冻酸奶,基于Linux Kernel 2.6.32)。Froyo 之后的版本的Android将会命名为Gingerbread(姜饼,基于Linux Kernel 2.6.33/34)。</p><p><strong>Android**</strong>版本**</p><p><strong>发布日期</strong></p><p><strong>代号</strong></p><p><strong>Android 1.1</strong></p><p><strong>Android 1.5</strong></p><p>2009年4月30日</p><p>Cupcake（纸杯蛋糕）</p><p><strong>Android 1.6</strong></p><p>2009年9月15日</p><p>Donut（炸面圈）</p><p><strong>Android 2.0/2.1</strong></p><p>2009年10月26日</p><p>Eclair（长松饼）</p><p><strong>Android 2.2</strong></p><p>2010年5月20日</p><p>Froyo（冻酸奶）</p><p><strong>Android 2.3</strong></p><p>2010年12月6日</p><p>Gingerbread（姜饼）</p><p><strong>Android 3.0/3.1/3.2</strong></p><p>2011年2月22日</p><p>Honeycomb（蜂巢）</p><p><strong>Android 4.0</strong></p><p>2011年10月19日</p><p>Ice Cream Sandwich（冰淇淋三明治）</p><p><strong>Android 4.1</strong></p><p>2012年6月28日</p><p>Jelly Bean（果冻豆）</p><p><strong>Android 4.2</strong></p><p>2012年10月8日</p><p>Jelly Bean（果冻豆）</p><p><strong>Android5.0</strong></p><p>待定</p><p>Lime Pie（酸橙派）</p><h3 id="1-2-Android系统的架构与特性"><a href="#1-2-Android系统的架构与特性" class="headerlink" title="1.2 Android系统的架构与特性"></a>1.2 Android系统的架构与特性</h3><h4 id="1-2-1-Android系统架构"><a href="#1-2-1-Android系统架构" class="headerlink" title="1.2.1 Android系统架构"></a>1.2.1 Android系统架构</h4><p>Android系统的底层是建立在Linux系统之上的，它采用软件叠层（Software Stack）的方式进行构建。使得层与层之间相互分离，明确各层的分工。这种分工保证了层与层之间的低苟合，当下层发生改变的时候，上层应用程序无需做任何改变。</p><p>下图为Android系统的系统架构图：</p><p><img src="http://s1.51cto.com/wyfs02/M01/25/73/wKioL1NgW-Si7ae7AAEJ_vZkaJ0908.jpg" alt></p><p>如图可知，Android系统分为四个层，从高到底分别是：应用程序层（Application）、应用程序框架层（Application Framework）、系统运行库层（Libraries）和Linux内核层（Linux Kernel）。</p><p>Android操作系统可以在四个主要层面上分为5个部分：</p><h5 id="1-应用程序层（Application）"><a href="#1-应用程序层（Application）" class="headerlink" title="1. 应用程序层（Application）"></a>1. 应用程序层（Application）</h5><p>Android系统包含了一系列核心应用程序，包括电子邮件、短信SMS、日历、拨号器、地图、浏览器、联系人等。这些应用程序都是用Java语言编写。本书重点讲解如何编写Android系统上运行的应用程序，在程序分层上，与系统核心应用程序平级。</p><h5 id="2-应用程序框架层（Application-Framework）"><a href="#2-应用程序框架层（Application-Framework）" class="headerlink" title="2. 应用程序框架层（Application Framework）"></a>2. 应用程序框架层（Application Framework）</h5><p>Android应用程序框架提供了大量的API供开发人员使用，Android应用程序的开发，就是调用这些API，根据需求实现功能。</p><p>应用程序框架是应用程序的基础。为了软件的复用，任何一个应用程序都可以开发Android系统的功能模块，只要发布的时候遵循应用程序框架的规范，其它应用程序也可以使用这个功能模块。</p><h5 id="3-系统运行库层（Libraries）"><a href="#3-系统运行库层（Libraries）" class="headerlink" title="3. 系统运行库层（Libraries）**"></a>3. 系统运行库层（Libraries）**</h5><p>Android系统运行库是用C/C++语言编写的，是一套被不同组件所使用的函数库组成的集合。一般来说，Android应用开发者无法直接调用这套函数库，都是通过它上层的应用程序框架提供的API来对这些函数库进行调用。</p><p>下面对一些核心库进行简单的介绍：</p><blockquote><p><strong>Libc：</strong>从BSD系统派生出来的标准C系统库，在此基础之上，为了便携式Linux系统专门进行了调整。</p><p><strong>Medio Framework：</strong>基于PacketView的OpenCORE，这套媒体库支持播放与录制硬盘及视频格式的文件，并能查看静态图片。</p><p><strong>Surface Manager：</strong>在执行多个应用程序的时，负责管理显示与存取操作间的互动，同时负责2D绘图与3D绘图进行显示合成。</p><p><strong>WebKit：</strong>Web浏览器引擎，该引擎为Android浏览器提供支持。</p><p><strong>SGL：</strong>底层的2D图像引擎。</p><p><strong>3D libraries：</strong>基于OpenGL ES 1.0API，提供使用软硬件实现3D加速的功能。</p><p><strong>FreeType：</strong>提供位图和向量字体的支持。</p><p><strong>SQLite：</strong>轻量级的关系型数据库。</p></blockquote><h5 id="4-Android运行时"><a href="#4-Android运行时" class="headerlink" title="4. Android运行时**"></a>4. Android运行时**</h5><pre><code>Android运行时由两部分完成：Android核心库和Dalvik虚拟机。其中核心库集提供了Java语言核心库所能使用的绝大部分功能，Dalvik虚拟机负责运行Android应用程序。虽然Android应用程序通过Java语言编写，而每个Java程序都会在Java虚拟机JVM内运行，但是Android系统毕竟是运行在移动设备上的，由于硬件的限制， Android应用程序并不使用Java的虚拟机JVM来运行程序，而是使用自己独立的虚拟机Dalvik VM，它针对多个同时高效运行的虚拟机进行了优化。每个Android应用程序都运行在单独的一个Dalvik虚拟机内，因此Android系统可以方便对应用程序进行隔离。</code></pre><h5 id="5-Linux内核"><a href="#5-Linux内核" class="headerlink" title="5. Linux内核"></a>5. Linux内核</h5><p>Android系统是基于Linux2.6之上建立的操作系统，它的Linux内核为Android系统提供了安全性、内存管理、进程管理、网络协议栈、驱动模型等核心系统服务。Linux内核帮助Android系统实现了底层硬件与上层软件之间的抽象。</p><h4 id="1-2-2-Dalvik-VM和JVM的区别"><a href="#1-2-2-Dalvik-VM和JVM的区别" class="headerlink" title="1.2.2 Dalvik VM和JVM的区别"></a>1.2.2 Dalvik VM和JVM的区别</h4><p>JVM（Java虚拟机）是一个虚构出来的运行Java程序的运行时，是通过在实际的计算机上仿真模拟各种计算机功能的实现。它具有完善的硬件架构（如处理器、堆栈、寄存器等），还具有相应的指令系统，使用JVM就是使Java程序支持与操作系统无关。理论上在任何操作系统中，只要有对应的JVM，即可运行Java程序。</p><p>Dalvik VM是在Android系统上运行Android程序的虚拟机，其指令集是基于寄存器架构的，执行特有的文件格式-dex字节码来完成对象生命周期管理、堆栈管理、线程管理、安全异常管理、垃圾回收等重要功能。</p><p>由于Android应用程序的开发编程语言是Java，而Java程序运行在JVM（Java虚拟机）上的，因此有些人会把Android的虚拟机DalvikVM和JVM弄混淆，但是实际上Dalvik并未遵守JVM规范，而且两者也是互不兼容。</p><p>从Dalvik VM和JVM的编译过程分析，它们的编译过程如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">JVM</span>：<span class="selector-class">.java</span>→<span class="selector-class">.class</span>→<span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">Dalvik</span> <span class="selector-tag">VM</span>：<span class="selector-class">.java</span>→<span class="selector-class">.class</span>→<span class="selector-class">.dex</span></span><br></pre></td></tr></table></figure><p>从它们的编译过程可以看出，JVM运行的是.class文件的Java字节码，但是Dalvik VM运行的是其转换后的dex（Dalvik Executable）文件。JVM字节从.class文件或者JAR包中加载字节码然后运行，而Dalvik VM无法直接从.class文件或JAR包中加载字节码，它需要通过DX工具将应用程序所有的.class文件编译成一个.dex文件，Dalvik VM则运行这个.dex文件。</p><p>下图显示了Dalvik VM与JVM编译过程的区别：</p><p><img src="http://s4.51cto.com/wyfs02/M01/25/73/wKiom1NgXMOTVyNiAAB-h8_94xE986.jpg" alt></p><p>从图中可以看出，Dalvik VM把.java文件编译成.class后，会对.class进行重构，整合的基本元素（常量池、类定义、数据段）,最后压缩写进一个.dex文件中。其中，常量池描述了所有的常量，包括引用、方法名、数值常量等；类定义包括访问标识、类名等基本信息；数据段中包含各种被VM指定的方法代码以及类和方法的相关信息和实例变量。这种把多个.class文件进行整合的方法，大大提高了Android程序的运行速度，例如：应用程序中多个类定义了字符串常量TAG，而在JVM中，会编译成多个.class文件，每个.class文件的常量池中，均包含这个TAG常量，但是Dalvik VM在编译成.dex文件之后，其常量池里只有一个TAG常量。</p><p>JVM和Dalvik VM还有一点非常重要的不同，就是基于的架构不同。JVM是基于栈的架构，而Dalvik VM是基于寄存器的架构。相对于基于栈的JVM而言，基于寄存器的Dalvik VM实现虽然牺牲了一些硬件上的通用性，但是它在代码的执行效率上要更胜一筹。一般来讲，VM中指令的解释执行的时间主要花费在以下三个方面：</p><blockquote><p>分发指令；</p><p>访问运算数；</p><p>执行运算；</p></blockquote><p>其中分发指令这个环节对性能的影响最大。在基于寄存器的Dalvik VM中，可以更有效的减少冗余指令的分发，减少内存的读写访问。</p><p>从JVM和Dalvik VM的区别上来说，Dalvik VM主要是针对Android这个嵌入式操作系统的特点进行了各种优化，使其更省电、更省内存、运行效率更高，但是牺牲了一些JVM的与平台无关的特性。实际上，Dalvik VM本就是为Android设计的，无需考虑其它平台的问题。这里只是介绍了JVM和Dalvik VM的两个重要的区别，毕竟本书并不是讲解Android内核的，这里只是点明Dalvik VM的特点，读者对这部分的内容了解即可。</p><h3 id="1-2-3-Android系统平台的优势"><a href="#1-2-3-Android系统平台的优势" class="headerlink" title="1.2.3 Android系统平台的优势"></a>1.2.3 Android系统平台的优势</h3><p>Android系统相对于其它操作系统，有如下几点优势：</p><h4 id="1-开放性"><a href="#1-开放性" class="headerlink" title="1. 开放性"></a>1. 开放性</h4><p>首先就是Android系统的开放性，其开发平台允许任何移动终端厂商加入到Android联盟中来，降低了开发门槛，使其拥有更多的开发者，随着用户和应用的日益丰富，也将推进Android系统的成熟。同时，开放性有利于Android设备的普及以及市场竞争力，这样有利于消费者买到更低价位的Android设备。</p><h4 id="2-丰富的硬件选择"><a href="#2-丰富的硬件选择" class="headerlink" title="2. 丰富的硬件选择"></a>2. 丰富的硬件选择</h4><p>同样由于Android系统的开放性，众多硬件厂商可以推出各种的搭载Android系统的设备。现如今，Android系统不仅仅只是运行在手机上，越来越多的设备开始支持Android系统，如电视、可佩戴设备、数码相机等。</p><h4 id="3-便于开发"><a href="#3-便于开发" class="headerlink" title="3. 便于开发"></a>3. 便于开发</h4><p>Google开放了Android的系统源码，提供了开发者一个自由的开发环境，不必受到各种条条框框的束缚。</p><h4 id="4-Google服务的支持"><a href="#4-Google服务的支持" class="headerlink" title="4. Google服务的支持"></a>4. Google服务的支持</h4><p>Google公司作为一个做服务的公司，它提供了如地图、邮件、搜索等服务，Android系统可以对这些服务进行无缝的结合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-1-Android发展史与现状&quot;&gt;&lt;a href=&quot;#1-1-Android发展史与现状&quot; class=&quot;headerlink&quot; title=&quot;1.1 Android发展史与现状&quot;&gt;&lt;/a&gt;1.1 Android发展史与现状&lt;/h2&gt;&lt;p&gt;Andy Rubin
      
    
    </summary>
    
    
      <category term="Android基础" scheme="http://yoursite.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
</feed>
