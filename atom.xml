<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不熬夜的喵</title>
  
  <subtitle>夏天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-02T08:41:26.962Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LiuLi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Hexo+GitHub搭建个人博客(二)</title>
    <link href="http://yoursite.com/2019/09/30/hexo/hexo%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/09/30/hexo/hexo配置/</id>
    <published>2019-09-30T06:55:00.000Z</published>
    <updated>2019-10-02T08:41:26.962Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装好hexo后，可进行各项配置</p></blockquote><h3 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h3><p>使用：<code>hexo new page “about”</code>新建一个 关于我 页面。<br>主题的<code>_config.yml</code>文件中的 <code>menu</code> 中进行匹配<br>不同主题 <code>_config. yml</code>文件有区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /      //主页</span><br><span class="line">  categories: /categories //分类</span><br><span class="line">  archives: /archives   //归档</span><br><span class="line">  tags: /tags   //标签</span><br><span class="line">  about: /about   //关于                  （添加此行即可）</span><br><span class="line">或    </span><br><span class="line">menu:</span><br><span class="line">  - page: home</span><br><span class="line">    directory: .      //主页</span><br><span class="line">    icon: fa-home</span><br><span class="line">  - page: archive</span><br><span class="line">    directory: archives/    //归档</span><br><span class="line">    icon: fa-archive</span><br><span class="line">  - page: about</span><br><span class="line">    directory: about/    //关于</span><br><span class="line">    icon: fa-user</span><br><span class="line">  - page: rss</span><br><span class="line">    directory: atom.xml    //rss订阅</span><br><span class="line">    icon: fa-rss</span><br></pre></td></tr></table></figure><p>编辑 about 关于页面 md文件 部署就能看到</p><h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><p>使用： <code>hexo new page categories</code> 新建一个 分类 页面。<br>主题的 <code>_config.yml</code> 文件中的 <code>menu</code> 中进行匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /      //主页</span><br><span class="line">  categories: /categories //分类   </span><br><span class="line">  archives: /archives   //归档</span><br><span class="line">  tags: /tags   //标签                  </span><br><span class="line">  about: /about   //关于</span><br></pre></td></tr></table></figure><p>底下代码是一篇包含 分类 文章的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 分类测试</span><br><span class="line">categories:</span><br><span class="line">- hexo                       （这个就是文章的分类了）</span><br></pre></td></tr></table></figure><h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>hexo博客有一个专门生成RSS xml文件的插件<code>hexo-generator-feed</code><br>我们来安装它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><p>看到<code>added 3 packages</code>说明安装成功了。</p><h4 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h4><p>在博客工程文件根目录下<code>_config.yml</code>文件中添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">plugins:</span><br><span class="line">    hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br></pre></td></tr></table></figure><h4 id="生成RSS"><a href="#生成RSS" class="headerlink" title="生成RSS"></a>生成RSS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 6.33 s</span><br><span class="line">INFO  Generated: atom.xml &lt;----------成功生成atom.xml文件</span><br><span class="line">INFO  Generated: sitemap.xml</span><br><span class="line">INFO  Generated: baidusitemap.xml</span><br><span class="line">INFO  Generated: about/index.html</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装好hexo后，可进行各项配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关于页面&quot;&gt;&lt;a href=&quot;#关于页面&quot; class=&quot;headerlink&quot; title=&quot;关于页面&quot;&gt;&lt;/a&gt;关于页面&lt;/h3&gt;&lt;p&gt;使用：&lt;code&gt;he
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo+GitHub搭建个人博客(一)</title>
    <link href="http://yoursite.com/2019/09/30/hexo/%E5%88%A9%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/09/30/hexo/利用Hexo+GitHub搭建个人博客/</id>
    <published>2019-09-30T05:55:00.000Z</published>
    <updated>2019-10-02T08:41:54.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。<code>hexo</code>让我的想法变成了现实。<br>下面就简单说一下整体打搭建流程。</p><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><blockquote><p>最开始以为要把hexo安装到服务器上，后来了解后恍然大悟，他是在本地安装的，然后将我们写的markdown文件转换为静态网站文件，放到github上，利用github来作为服务器的。</p></blockquote><ol><li>安装git bash。</li><li>安装npm。</li><li>安装NodeJs</li><li>申请github账户，并创建一个仓库，命名规范为  “账户名”.github.io。</li><li>创建SSH并添加到github上。</li><li>安装hexo。</li><li>部署项目，本地测试。</li><li>上传到github上。</li></ol><p>到这一步，博客就搭建好了，域名可选择性进行关联。后续可以设置主题、添加RSS、设置评论、以及写文章。具体可参考<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。&lt;code&gt;hexo&lt;/code&gt;让我的想法变成了现实。&lt;br
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>ListView</title>
    <link href="http://yoursite.com/2019/02/27/flutter/%E5%8F%AF%E6%BB%9A%E5%8A%A8Widget/ListView/"/>
    <id>http://yoursite.com/2019/02/27/flutter/可滚动Widget/ListView/</id>
    <published>2019-02-26T16:36:00.000Z</published>
    <updated>2019-10-02T11:51:07.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>ListView是最常用的可滚动widget，它可以沿一个方向线性排布所有子widget。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ListView(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">     <span class="comment">//可滚动widget公共参数</span></span><br><span class="line">    Axis scrollDirection = Axis.vertical,</span><br><span class="line">    <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">    ScrollController controller,</span><br><span class="line">    <span class="built_in">bool</span> primary,</span><br><span class="line">    ScrollPhysics physics,</span><br><span class="line">    EdgeInsetsGeometry padding,</span><br><span class="line">    <span class="comment">// ListView各个构造函数的共同参数 </span></span><br><span class="line">    <span class="keyword">this</span>.itemExtent,</span><br><span class="line">    <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">    <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">bool</span> addSemanticIndexes = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">double</span> cacheExtent,</span><br><span class="line">    <span class="comment">// 子widget列表</span></span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">    <span class="built_in">int</span> semanticChildCount,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><p><strong>childrenDelegate</strong>：自定义子模型时用到。</p><p><strong>itemExtent</strong>：Item 的范围，scrollDirection 为 Axis.vertical 时限制高度，scrollDirection 为 Axis.horizontal 限制宽度。</p><p><strong>cacheExtent</strong>：预加载的区域。</p><p><strong>controller</strong>：滑动监听，值为一个 ScrollController 对象，这个属性应该可以用来做下拉刷新和上垃加载，后面详细研究。</p><p><strong>padding</strong>：整个 ListView 的内间距。</p><p><strong>physics</strong>：设置 ListView 如何响应用户的滑动行为，值为一个 ScrollPhysics 对象，它的实现类常用的有：<br>    AlwaysScrollableScrollPhysics：总是可以滑动。<br>    NeverScrollableScrollPhysics：禁止滚动。<br>    BouncingScrollPhysics：内容超过一屏，上拉有回弹效果。<br>    ClampingScrollPhysics：包裹内容，不会有回弹，感觉跟 AlwaysScrollableScrollPhysics 差不多。</p><p><strong>primary</strong>：是否是与 PrimaryScrollController 关联的主滚动视图，若为 true 则 controller 必须为空。  </p><p><strong>reverse</strong>：Item 的顺序是否反转，若为 true 则反转。</p><p><strong>scrollDirection</strong>：ListView 的方向，为 Axis.vertical 表示纵向，为 Axis.horizontal 表示横向。</p><p><strong>shrinkWrap</strong>：该属性表示是否根据子widget的总长度来设置ListView的长度，默认值为false 。默认情况下，ListView的会在滚动方向尽可能多的占用空间。当ListView在一个无边界(滚动方向上)的容器中时，shrinkWrap必须为true。</p><p><strong>addAutomaticKeepAlives</strong>：该属性表示是否将列表项（子widget）包裹在AutomaticKeepAlive widget中；典型地，在一个懒加载列表中，如果将列表项包裹在AutomaticKeepAlive中，在该列表项滑出视口时该列表项不会被GC，它会使用KeepAliveNotification来保存其状态。如果列表项自己维护其KeepAlive状态，那么此参数必须置为false。</p><p><strong>addRepaintBoundaries</strong>：该属性表示是否将列表项（子widget）包裹在RepaintBoundary中。当可滚动widget滚动时，将列表项包裹在RepaintBoundary中可以避免列表项重绘，但是当列表项重绘的开销非常小（如一个颜色块，或者一个较短的文本）时，不添加RepaintBoundary反而会更高效。和addAutomaticKeepAlive一样，如果列表项自己维护其KeepAlive状态，那么此参数必须置为false。</p><h2 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h2><p>默认构造函数有一个children参数，它接受一个Widget列表（List）。这种方式适合只有少量的子widget的情况，因为这种方式需要将所有children都提前创建好（这需要做大量工作），而不是等到子widget真正显示的时候再创建。实际上通过此方式创建的ListView和使用SingleChildScrollView+Column的方式没有本质的区别。下面是一个例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ListView(</span><br><span class="line">  shrinkWrap: <span class="keyword">true</span>, </span><br><span class="line">  padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">'I\'m dedicating every day to you'</span>),</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">'Domestic life was never quite my style'</span>),</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">'When you smile, you knock me out, I fall apart'</span>),</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">'And I thought I was so smart'</span>),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>*注意：可滚动widget通过一个List来作为其children属性时，只适用于子widget较少的情况，这是一个通用规律，并非ListView自己的特性，像GridView也是如此。</p></blockquote><h2 id="ListView-builder"><a href="#ListView-builder" class="headerlink" title="ListView.builder"></a>ListView.builder</h2><blockquote><p>适合列表项多（无限)的情况，因为只有当Widget真正显示的时候才会被创建</p></blockquote><h3 id="核心属性"><a href="#核心属性" class="headerlink" title="核心属性"></a>核心属性</h3><ul><li><strong>itemBuilder</strong> 列表构造器，类型为IndexedWidgetBuilder，返回一个Widget。当列表滚动到具体的index位置时，会调用该构造器构造列表项。</li><li><strong>itemCount</strong> 列表项的数量，如果为null，则是无限列表。<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ListView.builder(</span><br><span class="line">    itemCount: <span class="number">100</span>,</span><br><span class="line">    itemExtent: <span class="number">50</span>,</span><br><span class="line">    itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">        title: Text(<span class="string">'<span class="subst">$index</span>'</span>),</span><br><span class="line">    );</span><br><span class="line">    &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="ListView-separated"><a href="#ListView-separated" class="headerlink" title="ListView.separated"></a>ListView.separated</h2><blockquote><p>可以生成列表项之间的分割器，它除了比ListView.builder多了一个separatorBuilder参数，该参数是一个分割器生成器。</p></blockquote><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><blockquote><p>奇数行添加一条blue色下划线，偶数行添加一条pink色下划线。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ListView是最常用的可滚动widget，它可以沿一个方向线性排布所有子widget。&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="Widget" scheme="http://yoursite.com/categories/Flutter/Widget/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>SingleChildScrollView</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%8F%AF%E6%BB%9A%E5%8A%A8Widget/SingleChildScrollView/"/>
    <id>http://yoursite.com/2019/02/26/flutter/可滚动Widget/SingleChildScrollView/</id>
    <published>2019-02-26T15:36:00.000Z</published>
    <updated>2019-10-02T11:51:02.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>类似Android中的ScrollView，只接收一个子Widget</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SingleChildScrollView(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.scrollDirection = Axis.vertical, <span class="comment">//滚动方向，默认是垂直方向</span></span><br><span class="line">    <span class="keyword">this</span>.reverse = <span class="keyword">false</span>, <span class="comment">// 是否按照阅读方向相反的方向滑动</span></span><br><span class="line">    <span class="keyword">this</span>.padding,</span><br><span class="line">    <span class="built_in">bool</span> primary, <span class="comment">//指是否使用widget树中默认的PrimaryScrollController</span></span><br><span class="line">    <span class="keyword">this</span>.physics,</span><br><span class="line">    <span class="keyword">this</span>.controller,</span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Scrollbar(</span><br><span class="line">    child: SingleChildScrollView(</span><br><span class="line">    padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">    child: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">        <span class="comment">// 动态创建一个List&lt;Widget&gt;</span></span><br><span class="line">        children: str</span><br><span class="line">            .split(<span class="string">""</span>)</span><br><span class="line">            <span class="comment">// 每个字母都可以是一个Text显示，字体是原来的2倍</span></span><br><span class="line">            .map((c) =&gt; Text(c, textScaleFactor: <span class="number">2.0</span>))</span><br><span class="line">            .toList(),</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;类似Android中的ScrollView，只接收一个子Widget&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="Widget" scheme="http://yoursite.com/categories/Flutter/Widget/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>可滚动Widget</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%8F%AF%E6%BB%9A%E5%8A%A8Widget/%E5%8F%AF%E6%BB%9A%E5%8A%A8Widget/"/>
    <id>http://yoursite.com/2019/02/26/flutter/可滚动Widget/可滚动Widget/</id>
    <published>2019-02-26T15:14:00.000Z</published>
    <updated>2019-10-02T11:50:57.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可滚动Widget简介"><a href="#可滚动Widget简介" class="headerlink" title="可滚动Widget简介"></a>可滚动Widget简介</h2><p>当内容超过显示窗口（ViewPort)时，如果没有特殊处理，Flutter会提示Overflow错误。为此，Flutter提供了多种可滚动Widget用于显示列表和长布局。如ListView、GridView等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Scrollable(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.axisDirection = AxisDirection.down,</span><br><span class="line">    <span class="keyword">this</span>.controller,</span><br><span class="line">    <span class="keyword">this</span>.physics,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.viewportBuilder,<span class="comment">// 后面介绍</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>axisDirection：滚动方向。</li><li>physics：此属性接受一个ScrollPhysics对象，它决定可滚动Widget如何响应用户操作。</li><li>controller：此属性接受一个ScrollController对象。ScrollController的主要作用是控制滚动位置和监听滚动事件。</li></ul><h2 id="Scrollbar"><a href="#Scrollbar" class="headerlink" title="Scrollbar"></a>Scrollbar</h2><p>Scrollbar是一个Material风格的滚动指示器（滚动条），如果要给可滚动widget添加滚动条，只需要将Scrollbar作为可股东widget的服widget即可，如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scrollbar(</span><br><span class="line">    child: SingleChildScrollView(</span><br><span class="line">        ...</span><br><span class="line">    ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Scrollbar和CupertionScrollbar都是通过ScrollController来监听滚动时间来确定滚动条位置，关于ScrollController详细的内容我们将在后面专门一节介绍。</p><h2 id="CupertionScrollbar"><a href="#CupertionScrollbar" class="headerlink" title="CupertionScrollbar"></a>CupertionScrollbar</h2><p>CupertinoScrollbar是iOS风格的滚动条，如果你使用的是Scrollbar，那么在iOS平台它会自动切换为CupertinoScrollbar。</p><h2 id="ViewPort视口"><a href="#ViewPort视口" class="headerlink" title="ViewPort视口"></a>ViewPort视口</h2><p>在很多布局系统中都有ViewPort的概念，在Flutter中，术语ViewPort（视口），如无特别说明，则是指一个Widget的实际显示区域。例如，一个ListView的显示区域高度是800像素，虽然其列表项总高度可能远远超过800像素，但是其ViewPort仍然是800像素。</p><h2 id="主轴和纵轴"><a href="#主轴和纵轴" class="headerlink" title="主轴和纵轴"></a>主轴和纵轴</h2><p>在可滚动widget的坐标描述中，通常将滚动方向的陈为主轴，非滚动方向称为纵轴。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;可滚动Widget简介&quot;&gt;&lt;a href=&quot;#可滚动Widget简介&quot; class=&quot;headerlink&quot; title=&quot;可滚动Widget简介&quot;&gt;&lt;/a&gt;可滚动Widget简介&lt;/h2&gt;&lt;p&gt;当内容超过显示窗口（ViewPort)时，如果没有特殊处理，Flut
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="Widget" scheme="http://yoursite.com/categories/Flutter/Widget/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>布局</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%B8%83%E5%B1%80/%E5%B8%83%E5%B1%80%E7%B1%BBWidget/"/>
    <id>http://yoursite.com/2019/02/26/flutter/布局/布局类Widget/</id>
    <published>2019-02-26T15:14:00.000Z</published>
    <updated>2019-10-02T11:50:47.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>布局类Widget都会包含一个或多个子widget，不同的布局类Widget对子widget排版(layout)方式不同。我们在前面说过Element树才是最终的绘制树，Element树是通过widget树来创建的（通过Widget.createElement()），widget其实就是Element的配置数据。Flutter中，根据Widget是否需要包含子节点将Widget分为了三类，分别对应三种Element，如下表：</p><table><thead><tr><th>Widget</th><th>对应的Element</th><th>用途</th></tr></thead><tbody><tr><td>LeafRenderObjectWidget</td><td>LeafRenderObjectElement</td><td>Widget树的叶子节点，用于没有子节点的widget，通常基础widget都属于这一类，如Text、Image。</td></tr><tr><td>SingleChildRenderObjectWidget</td><td>SingleChildRenderObjectElement</td><td>包含一个子Widget，如：ConstrainedBox、DecoratedBox等</td></tr><tr><td>MultiChildRenderObjectWidget</td><td>MultiChildRenderObjectElement</td><td>包含多个子Widget，一般都有一个children参数，接受一个Widget数组。如Row、Column、Stack等</td></tr></tbody></table><blockquote><p>注意，Flutter中的很多Widget是直接继承自StatelessWidget或StatefulWidget，然后在build()方法中构建真正的RenderObjectWidget，如Text，它其实是继承自StatelessWidget，然后在build()方法中通过RichText来构建其子树，而RichText才是继承自LeafRenderObjectWidget。所以为了方便叙述，我们也可以直接说Text属于LeafRenderObjectWidget（其它widget也可以这么描述），这才是本质。读到这里我们也会发现，其实StatelessWidget和StatefulWidget就是两个用于组合Widget的基类，它们本身并不关联最终的渲染对象（RenderObjectWidget）。</p></blockquote><h2 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h2><ol><li>线性布局 <blockquote><p>Row、Column</p></blockquote></li><li>弹性布局<blockquote><p>Flex</p></blockquote></li><li>流式布局<blockquote><p>Wrap、Flow</p></blockquote></li><li>层叠布局<blockquote><p>Stack、Positioned</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;布局类Widget都会包含一个或多个子widget，不同的布局类Widget对子widget排版(layout)方式不同。我们在前面说过El
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="布局" scheme="http://yoursite.com/categories/Flutter/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>布局限制容器ConstrainedBox和SizedBox</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%AE%B9%E5%99%A8/%E5%B8%83%E5%B1%80%E9%99%90%E5%88%B6%E5%AE%B9%E5%99%A8ConstrainedBox%E5%92%8CSizedBox/"/>
    <id>http://yoursite.com/2019/02/26/flutter/容器/布局限制容器ConstrainedBox和SizedBox/</id>
    <published>2019-02-26T09:27:00.000Z</published>
    <updated>2019-10-02T11:58:29.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>ConstrainedBox和SizedBox都是通过RenderConstrainedBox来渲染的。SizedBox只是ConstrainedBox一个定制，本节把他们放在一起讨论。</p></blockquote><h2 id="ConstrainedBox"><a href="#ConstrainedBox" class="headerlink" title="ConstrainedBox"></a>ConstrainedBox</h2><p>ConstrainedBox用于对齐子Widget添加额外约束。例如，如果想让子Widget的最小高度为80像素，可以使用<code>const BoxConstraints(minHeight: 80.0)</code>作为widget的约束。</p><p>我们先定义一个redBox，设置他的背景为红色，不指定高宽</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Widget redBox = DecorateBox(</span><br><span class="line">    decoration: BoxCoration(color: Colors.red),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们实现一个最小高度为50，宽度尽可能大的红色容器</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(</span><br><span class="line">    minWidth: <span class="built_in">double</span>.infinity,<span class="comment">// 尽可能大</span></span><br><span class="line">    minHeight: <span class="number">50.0</span>,<span class="comment">// 最小高度 50像素</span></span><br><span class="line">    ),</span><br><span class="line">    child: Container(</span><br><span class="line">    height: <span class="number">5.0</span>,</span><br><span class="line">    child: redBox,</span><br><span class="line">    ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以看到，我们虽然将Container的高度设置为5像素，但是最终却是50像素，这正是ConstrainedBox的最小高度限制生效了。如果将Container的高度设置为80像素，那么最终红色区域的高度也会是80像素，因为在此示例中，ConstrainedBox只限制了最小高度，并未限制最大高度。</p><h2 id="BoxConstraints"><a href="#BoxConstraints" class="headerlink" title="BoxConstraints"></a>BoxConstraints</h2><p>BoxConstraints用于设置限制条件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BoxConstraints(&#123;</span><br><span class="line">    <span class="keyword">this</span>.minWidth = <span class="number">0.0</span>,<span class="comment">// 最小宽度</span></span><br><span class="line">    <span class="keyword">this</span>.maxWidth = <span class="built_in">double</span>.infinity,<span class="comment">// 最大宽度</span></span><br><span class="line">    <span class="keyword">this</span>.minHeight = <span class="number">0.0</span>,<span class="comment">// 最小高度</span></span><br><span class="line">    <span class="keyword">this</span>.maxHeight = <span class="built_in">double</span>.infinity <span class="comment">// 最大高度    </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>BoxConstraints还定义了一些便捷的构造函数，用于快速生成特定限制规则的BoxConstraints，如<code>BoxConstraints.tight(Size size)</code>，它可以生成给定大小的限制；const <code>BoxConstraints.expand()</code>可以生成一个尽可能大的用以填充另一个容器的BoxConstraints。</p><h2 id="SizedBox"><a href="#SizedBox" class="headerlink" title="SizedBox"></a>SizedBox</h2><blockquote><p>为子Widget指定指定高宽</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  width: <span class="number">80.0</span>,</span><br><span class="line">  height: <span class="number">80.0</span>,</span><br><span class="line">  child: redBox</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>实际上SizedBox和只是ConstrainedBox一个定制，上面代码等价于：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">  constraints: BoxConstraints.tightFor(width: <span class="number">80.0</span>,height: <span class="number">80.0</span>),</span><br><span class="line">  child: redBox, </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>而BoxConstraints.tightFor(width: 80.0,height: 80.0)等价于：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BoxConstraints(minHeight: <span class="number">80.0</span>,maxHeight: <span class="number">80.0</span>,minWidth: <span class="number">80.0</span>,maxWidth: <span class="number">80.0</span>)</span><br></pre></td></tr></table></figure><p>而实际上ConstrainedBox和SizedBox都是通过RenderConstrainedBox来渲染的，我们可以看到ConstrainedBox和SizedBox的createRenderObject()方法都返回的是一个RenderConstrainedBox对象：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">RenderConstrainedBox createRenderObject(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RenderConstrainedBox(</span><br><span class="line">    additionalConstraints: ...,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多重限制"><a href="#多重限制" class="headerlink" title="多重限制"></a>多重限制</h2><p>如果某一个widget有多个父ConstrainedBox限制，那么最终会是哪个生效？我们看一个例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(minWidth: <span class="number">60.0</span>, minHeight: <span class="number">60.0</span>), <span class="comment">//父</span></span><br><span class="line">    child: ConstrainedBox(</span><br><span class="line">      constraints: BoxConstraints(minWidth: <span class="number">90.0</span>, minHeight: <span class="number">20.0</span>),<span class="comment">//子</span></span><br><span class="line">      child: redBox,</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面我们有父子两个ConstrainedBox，他们的限制条件不同。</p><p>最终显示效果是宽90，高60，也就是说是子ConstrainedBox的minWidth生效，而minHeight是父ConstrainedBox生效。单凭这个例子，我们还总结不出什么规律，我们将上例中父子限制条件换一下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(minWidth: <span class="number">90.0</span>, minHeight: <span class="number">20.0</span>),</span><br><span class="line">    child: ConstrainedBox(</span><br><span class="line">      constraints: BoxConstraints(minWidth: <span class="number">60.0</span>, minHeight: <span class="number">60.0</span>),</span><br><span class="line">      child: redBox,</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>最终的显示效果仍然是90，高60，效果相同，但意义不同，因为此时minWidth生效的是父ConstrainedBox，而minHeight是子ConstrainedBox生效。</p><p>通过上面示例，我们发现有多重限制时，对于minWidth和minHeight来说，是取父子中相应数值较大的。实际上，只有这样才能保证父限制与子限制不冲突。</p><h2 id="UnconstrainedBox"><a href="#UnconstrainedBox" class="headerlink" title="UnconstrainedBox"></a>UnconstrainedBox</h2><p>UnconstrainedBox不会对子Widget产生任何限制，它允许其子Widget按照其本身大小绘制。一般情况下，我们会很少直接使用此widget，但在”去除”多重限制的时候也许会有帮助，我们看一下面的代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(minWidth: <span class="number">60.0</span>, minHeight: <span class="number">100.0</span>),  <span class="comment">//父</span></span><br><span class="line">    child: UnconstrainedBox( <span class="comment">//“去除”父级限制</span></span><br><span class="line">      child: ConstrainedBox(</span><br><span class="line">        constraints: BoxConstraints(minWidth: <span class="number">90.0</span>, minHeight: <span class="number">20.0</span>),<span class="comment">//子</span></span><br><span class="line">        child: redBox,</span><br><span class="line">      ),</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面代码中，如果没有中间的UnconstrainedBox，那么根据上面所述的多重限制规则，那么最终将显示一个90×100的红色框。但是由于 UnconstrainedBox “去除”了父ConstrainedBox的限制，则最终会按照子ConstrainedBox的限制来绘制redBox，即90×20：</p><p>但是，UnconstrainedBox对父限制的“去除”并非是真正的去除，上面例子中虽然红色区域大小是90×20，但上方仍然有80的空白空间。也就是说父限制的minHeight(100.0)仍然是生效的，只不过它不影响最终子元素的大小，但仍然还是占有相应的空间，可以认为此时的父ConstrainedBox是作用于子ConstrainedBox上，而redBox只受子ConstrainedBox限制，这一点请读者务必注意。</p><p>那么有什么方法可以彻底去除父BoxConstraints的限制吗？答案是否定的！所以在此提示读者，在定义一个通用的widget时，如果对子widget指定限制时一定要注意，因为一旦指定限制条件，子widget如果要进行相关自定义大小时将可能非常困难，因为子widget在不更改父widget的代码的情况下无法彻底去除其限制条件。</p><h2 id="DecoratedBox"><a href="#DecoratedBox" class="headerlink" title="DecoratedBox"></a>DecoratedBox</h2><p>DecoratedBox可以在其子widget绘制前(或后)绘制一个装饰Decoration（如背景、边框、渐变等）。DecoratedBox定义如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DecoratedBox(&#123;</span><br><span class="line">  Decoration decoration,</span><br><span class="line">  DecorationPosition position = DecorationPosition.background,</span><br><span class="line">  Widget child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>decoration：代表将要绘制的装饰，它类型为Decoration，Decoration是一个抽象类，它定义了一个接口 createBoxPainter()，子类的主要职责是需要通过实现它来创建一个画笔，该画笔用于绘制装饰。</li><li>position：此属性决定在哪里绘制Decoration，它接收DecorationPosition的枚举类型，该枚举类两个值：</li><li>background：在子widget之后绘制，即背景装饰。</li><li>foreground：在子widget之上绘制，即前景。<h2 id="BoxDecoration"><a href="#BoxDecoration" class="headerlink" title="BoxDecoration"></a>BoxDecoration</h2>我们通常会直接使用BoxDecoration，它是一个Decoration的子类，实现了常用的装饰元素的绘制。<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BoxDecoration(&#123;</span><br><span class="line">  Color color, <span class="comment">//颜色</span></span><br><span class="line">  DecorationImage image,<span class="comment">//图片</span></span><br><span class="line">  BoxBorder border, <span class="comment">//边框</span></span><br><span class="line">  BorderRadiusGeometry borderRadius, <span class="comment">//圆角</span></span><br><span class="line">  <span class="built_in">List</span>&lt;BoxShadow&gt; boxShadow, <span class="comment">//阴影,可以指定多个</span></span><br><span class="line">  Gradient gradient, <span class="comment">//渐变</span></span><br><span class="line">  BlendMode backgroundBlendMode, <span class="comment">//背景混合模式</span></span><br><span class="line">  BoxShape shape = BoxShape.rectangle, <span class="comment">//形状</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>各个属性名都是自解释的，详情读者可以查看API文档，我们看一个示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> DecoratedBox(</span><br><span class="line">    decoration: BoxDecoration(</span><br><span class="line">      gradient: LinearGradient(colors:[Colors.red,Colors.orange[<span class="number">700</span>]]), <span class="comment">//背景渐变</span></span><br><span class="line">      borderRadius: BorderRadius.circular(<span class="number">3.0</span>), <span class="comment">//3像素圆角</span></span><br><span class="line">      boxShadow: [ <span class="comment">//阴影</span></span><br><span class="line">        BoxShadow(</span><br><span class="line">            color:Colors.black54,</span><br><span class="line">            offset: Offset(<span class="number">2.0</span>,<span class="number">2.0</span>),</span><br><span class="line">            blurRadius: <span class="number">4.0</span></span><br><span class="line">        )</span><br><span class="line">      ]</span><br><span class="line">    ),</span><br><span class="line">  child: Padding(padding: EdgeInsets.symmetric(horizontal: <span class="number">80.0</span>, vertical: <span class="number">18.0</span>),</span><br><span class="line">    child: Text(<span class="string">"Login"</span>, style: TextStyle(color: Colors.white),),</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180910115903588.png" alt></p><p>怎么样，通过BoxDecoration，我们实现了一个渐变按钮的外观，但此示例还不是一个标准的按钮，因为它还不能响应点击事件，我们将在本章末尾来实现一个完整的GradientButton。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ConstrainedBox和SizedBox都是通过RenderConstrainedBox来渲染的。Sized
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="容器" scheme="http://yoursite.com/categories/Flutter/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>变换Transform</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%AE%B9%E5%99%A8/%E5%8F%98%E6%8D%A2Transform/"/>
    <id>http://yoursite.com/2019/02/26/flutter/容器/变换Transform/</id>
    <published>2019-02-26T09:16:00.000Z</published>
    <updated>2019-10-02T11:58:04.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>Transform可以在其子Widget绘制时对其应用一个矩阵变换（transformation），Matrix4是一个4D矩阵，通过它我们可以实现各种矩阵操作。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  color: Colors.black,</span><br><span class="line">  child: <span class="keyword">new</span> Transform(</span><br><span class="line">    alignment: Alignment.topRight, <span class="comment">//相对于坐标系原点的对齐方式</span></span><br><span class="line">    transform: <span class="keyword">new</span> Matrix4.skewY(<span class="number">0.3</span>), <span class="comment">//沿Y轴倾斜0.3弧度</span></span><br><span class="line">    child: <span class="keyword">new</span> Container(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">      color: Colors.deepOrange,</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">'Apartment for rent!'</span>),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180910160248494.png" alt></p><p>关于矩阵变换的相关内容属于线性代数范畴，本书不做讨论，读者有兴趣可以自行了解。本书中，我们把焦点放在Flutter中一些常见的变换效果上。</p><h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><p>Transform.translate接收一个offset参数，可以在绘制时沿x、y轴对子widget平移指定的距离。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">  decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">  <span class="comment">//默认原点为左上角，左移20像素，向上平移5像素  </span></span><br><span class="line">  child: Transform.translate(offset: Offset(<span class="number">-20.0</span>, <span class="number">-5.0</span>),</span><br><span class="line">    child: Text(<span class="string">"Hello world"</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180910161953078.png" alt></p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>Transform.rotate可以对子widget进行旋转变换，如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">  decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">  child: Transform.rotate(</span><br><span class="line">    <span class="comment">//旋转90度</span></span><br><span class="line">    angle:math.pi/<span class="number">2</span> ,</span><br><span class="line">    child: Text(<span class="string">"Hello world"</span>),</span><br><span class="line">  ),</span><br><span class="line">)；</span><br></pre></td></tr></table></figure><p>注意：要使用math.pi需先进行如下导包。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span> <span class="keyword">as</span> math;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180910162408030.png" alt></p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>Transform.scale可以对子Widget进行缩小或放大，如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">  decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">  child: Transform.scale(</span><br><span class="line">      scale: <span class="number">1.5</span>, <span class="comment">//放大到1.5倍</span></span><br><span class="line">      child: Text(<span class="string">"Hello world"</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180910162817059.png" alt="效果："></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>Transform的变换是应用在绘制阶段，而并不是应用在布局(layout)阶段，所以无论对子widget应用何种变化，其占用空间的大小和在屏幕上的位置都是固定不变的，因为这些是在布局阶段就确定的。下面我们具体说明：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> Row(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    DecoratedBox(</span><br><span class="line">      decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">      child: Transform.scale(scale: <span class="number">1.5</span>,</span><br><span class="line">          child: Text(<span class="string">"Hello world"</span>)</span><br><span class="line">      )</span><br><span class="line">    ),</span><br><span class="line">    Text(<span class="string">"你好"</span>, style: TextStyle(color: Colors.green, fontSize: <span class="number">18.0</span>),)</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180910164454967.png" alt="显示效果："></p><p>由于第一个Text应用变换(放大)后，其在绘制时会放大，但其占用的空间依然为红色部分，所以第二个text会紧挨着红色部分，最终就会出现文字有重合部分。</p><p>由于矩阵变化只会作用在绘制阶段，所以在某些场景下，在UI需要变化时，可以直接通过矩阵变化来达到视觉上的UI改变，而不需要去重新触发build流程，这样会节省layout的开销，所以性能会比较好。如之前介绍的Flow widget，它内部就是用矩阵变换来更新UI，除此之外，Flutter的动画widget中也大量使用了Transform以提高性能。</p><h2 id="RotatedBox"><a href="#RotatedBox" class="headerlink" title="RotatedBox"></a>RotatedBox</h2><p>RotatedBox和Transform.rotate功能相似，它们都可以对子widget进行旋转变换，但是有一点不同：RotatedBox的变换是在layout阶段，会影响在子widget的位置和大小。我们将上面介绍Transform.rotate时的示例改一下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Row(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    DecoratedBox(</span><br><span class="line">      decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">      <span class="comment">//将Transform.rotate换成RotatedBox  </span></span><br><span class="line">      child: RotatedBox(</span><br><span class="line">        quarterTurns: <span class="number">1</span>, <span class="comment">//旋转90度(1/4圈)</span></span><br><span class="line">        child: Text(<span class="string">"Hello world"</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    Text(<span class="string">"你好"</span>, style: TextStyle(color: Colors.green, fontSize: <span class="number">18.0</span>),)</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180910170603964.png" alt="效果："></p><p>由于RotatedBox是作用于layout阶段，所以widget会旋转90度（而不只是绘制的内容），decoration会作用到widget所占用的实际空间上，所以就是上图的效果。读者可以和前面Transform.rotate示例对比理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Transform可以在其子Widget绘制时对其应用一个矩阵变换（transformation），Matrix4
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="容器" scheme="http://yoursite.com/categories/Flutter/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Padding&amp;Align&amp;Center</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%AE%B9%E5%99%A8/Padding&amp;Align&amp;Center/"/>
    <id>http://yoursite.com/2019/02/26/flutter/容器/Padding&amp;Align&amp;Center/</id>
    <published>2019-02-26T08:46:00.000Z</published>
    <updated>2019-10-02T11:59:30.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><blockquote><p>Padding可以给其子节点添加补白（填充）</p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Padding(&#123;</span><br><span class="line">  ...</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>EdgeInsetsGeometry是一个抽象类，开发中，我们一般都使用EdgeInsets，它是EdgeInsetsGeometry的一个子类，定义了一些设置补白的便捷方法。</p><h3 id="EdgeInsets"><a href="#EdgeInsets" class="headerlink" title="EdgeInsets"></a>EdgeInsets</h3><p>我们看看EdgeInsets提供的便捷方法：</p><ul><li>fromLTRB(double left, double top, double right, double bottom)：分别指定四个方向的补白。</li><li>all(double value) : 所有方向均使用相同数值的补白。</li><li>only({left, top, right ,bottom })：可以设置具体某个方向的补白(可以同时指定多个方向)。</li><li>symmetric({ vertical, horizontal })：用于设置对称方向的补白，vertical指top和bottom，horizontal指left和right。</li><li><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  color: Colors.pink,</span><br><span class="line">  child: Padding(</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">    child: Container(</span><br><span class="line">      color: Colors.blue,</span><br><span class="line">      child: Padding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.pink,</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">"演示 Padding"</span>,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              color: Colors.white,</span><br><span class="line">              fontSize: <span class="number">20.0</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p><img src="../img/padding.jpg" alt></p><h2 id="Align"><a href="#Align" class="headerlink" title="Align"></a>Align</h2><blockquote><p>Align本身实现的功能并不复杂，设置child的对齐方式，例如居中、居左居右等，并根据child尺寸调节自身尺寸。</p></blockquote><p>Align的布局行为分为两种情况：</p><ol><li>当widthFactor和heightFactor为null的时候，当其有限制条件的时候，Align会根据限制条件尽量的扩展自己的尺寸，当没有限制条件的时候，会调整到child的尺寸；</li><li>当widthFactor或者heightFactor不为null的时候，Aligin会根据factor属性，扩展自己的尺寸，例如设置widthFactor为2.0的时候，那么，Align的宽度将会是child的两倍。</li></ol><p>Align为什么会有这样的布局行为呢？原因很简单，设置对齐方式的话，如果外层元素尺寸不确定的话，内部的对齐就无法确定。因此，会有宽高因子、根据外层限制扩大到最大尺寸、外层不确定时调整到child尺寸这些行为。</p><h2 id="Center"><a href="#Center" class="headerlink" title="Center"></a>Center</h2><blockquote><p>Center继承自Align，只不过是将alignment设置为Alignment.center，其他属性例如widthFactor、heightFactor，布局行为，都与Align完全一样。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Padding&quot;&gt;&lt;a href=&quot;#Padding&quot; class=&quot;headerlink&quot; title=&quot;Padding&quot;&gt;&lt;/a&gt;Padding&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Padding可以给其子节点添加补白（填充）&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="容器" scheme="http://yoursite.com/categories/Flutter/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Container</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%AE%B9%E5%99%A8/Container/"/>
    <id>http://yoursite.com/2019/02/26/flutter/容器/Container/</id>
    <published>2019-02-26T08:43:00.000Z</published>
    <updated>2019-10-02T11:58:55.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Container 容器控件，包含一个子Widget，具备alignment、padding等属性，方便布局摆放child</p><h2 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h2><p><img src="img/14_1.png" alt></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="child"><a href="#child" class="headerlink" title="child"></a>child</h3><blockquote><p>子控件</p></blockquote><h3 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h3><blockquote><p>对齐方式</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// The top left corner.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> Alignment topLeft = Alignment(<span class="number">-1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line"> <span class="comment">/// The center point along the top edge.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> Alignment topCenter = Alignment(<span class="number">0.0</span>, <span class="number">-1.0</span>);</span><br><span class="line"> <span class="comment">/// The top right corner.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> Alignment topRight = Alignment(<span class="number">1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line"> <span class="comment">/// The center point along the left edge.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> Alignment centerLeft = Alignment(<span class="number">-1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"> <span class="comment">/// The center point, both horizontally and vertically.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> Alignment center = Alignment(<span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line"> <span class="comment">/// The center point along the right edge.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> Alignment centerRight = Alignment(<span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"> <span class="comment">/// The bottom left corner.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> Alignment bottomLeft = Alignment(<span class="number">-1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"> <span class="comment">/// The center point along the bottom edge.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> Alignment bottomCenter = Alignment(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"> <span class="comment">/// The bottom right corner.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> Alignment bottomRight = Alignment(<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br></pre></td></tr></table></figure><h3 id="color-和-decoration"><a href="#color-和-decoration" class="headerlink" title="color  和 decoration"></a>color  和 decoration</h3><blockquote><p>设置背景色或背景</p><ul><li>两者无法共存</li></ul></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(color == <span class="keyword">null</span> || decoration == <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">'Cannot provide both a color and a decoration\n'</span></span><br><span class="line">    <span class="string">'The color argument is just a shorthand for "decoration: new BoxDecoration(color: color)".'</span></span><br><span class="line">),</span><br><span class="line">decoration = decoration ?? (color != <span class="keyword">null</span> ? BoxDecoration(color: color) : <span class="keyword">null</span>),</span><br></pre></td></tr></table></figure><h3 id="foregroundDecoration"><a href="#foregroundDecoration" class="headerlink" title="foregroundDecoration"></a>foregroundDecoration</h3><blockquote><p>前景设置</p></blockquote><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><blockquote><p>边距设置</p></blockquote><h3 id="constraints"><a href="#constraints" class="headerlink" title="constraints"></a>constraints</h3><blockquote><p>布局约束</p></blockquote><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><blockquote><p>矩阵变换</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Container 容器控件，包含一个子Widget，具备alignment、padding等属性，方便布局摆放child&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="容器" scheme="http://yoursite.com/categories/Flutter/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Stack&amp;Positioned</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%B8%83%E5%B1%80/Stack&amp;Positioned/"/>
    <id>http://yoursite.com/2019/02/26/flutter/布局/Stack&amp;Positioned/</id>
    <published>2019-02-26T08:33:00.000Z</published>
    <updated>2019-10-02T11:55:20.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="层叠布局"><a href="#层叠布局" class="headerlink" title="层叠布局"></a>层叠布局</h2><p>层叠布局和Web中的绝对定位、Android中的Frame布局是相似的，子widget可以根据到父容器四个角的位置来确定本身的位置。绝对定位允许子widget堆叠（按照代码中声明的顺序）。Flutter中使用Stack和Positioned来实现绝对定位，Stack允许子widget堆叠，而Positioned可以给子widget定位（根据Stack的四个角）。</p><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stack(&#123;</span><br><span class="line">  <span class="keyword">this</span>.alignment = AlignmentDirectional.topStart,</span><br><span class="line">  <span class="keyword">this</span>.textDirection,</span><br><span class="line">  <span class="keyword">this</span>.fit = StackFit.loose,</span><br><span class="line">  <span class="keyword">this</span>.overflow = Overflow.clip,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>alignment：此参数决定如何去对齐没有定位（没有使用Positioned）或部分定位的子widget。所谓部分定位，在这里特指没有在某一个轴上定位：left、right为横轴，top、bottom为纵轴，只要包含某个轴上的一个定位属性就算在该轴上有定位。</li><li>textDirection：和Row、Wrap的textDirection功能一样，都用于决定alignment对齐的参考系即：textDirection的值为TextDirection.ltr，则alignment的start代表左，end代表右；textDirection的值为TextDirection.rtl，则alignment的start代表右，end代表左。</li><li>fit：此参数用于决定没有定位的子widget如何去适应Stack的大小。StackFit.loose表示使用子widget的大小，StackFit.expand表示扩伸到Stack的大小。</li><li>overflow：此属性决定如何显示超出Stack显示空间的子widget，值为Overflow.clip时，超出部分会被剪裁（隐藏），值为Overflow.visible 时则不会。</li></ul><h2 id="Positioned"><a href="#Positioned" class="headerlink" title="Positioned"></a>Positioned</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Positioned(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.left, </span><br><span class="line">  <span class="keyword">this</span>.top,</span><br><span class="line">  <span class="keyword">this</span>.right,</span><br><span class="line">  <span class="keyword">this</span>.bottom,</span><br><span class="line">  <span class="keyword">this</span>.width,</span><br><span class="line">  <span class="keyword">this</span>.height,</span><br><span class="line">  <span class="meta">@required</span> Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>left、top 、right、 bottom分别代表离Stack左、上、右、底四边的距离。width和height用于指定定位元素的宽度和高度，注意，此处的width、height 和其它地方的意义稍微有点区别，此处用于配合left、top 、right、 bottom来定位widget，举个例子，在水平方向时，你只能指定left、right、width三个属性中的两个，如指定left和width后，right会自动算出(left+width)，如果同时指定三个属性则会报错，垂直方向同理。</p><p>示例</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过ConstrainedBox来确保Stack占满屏幕</span></span><br><span class="line">ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints.expand(),</span><br><span class="line">    child: Stack(</span><br><span class="line">    alignment: Alignment.center, <span class="comment">//指定未定位或部分定位widget的对齐方式</span></span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">        child: Text(<span class="string">"第一层"</span>, style: TextStyle(color: Colors.white)),</span><br><span class="line">        color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">        Positioned(</span><br><span class="line">        left: <span class="number">18.0</span>,</span><br><span class="line">        child: Text(<span class="string">"第二层"</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">        alignment: Alignment.centerRight,</span><br><span class="line">        child: Text(<span class="string">"第三层半透明"</span>, style: TextStyle(color: Colors.blue)),</span><br><span class="line">        color: Color.fromARGB(<span class="number">100</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">        ),</span><br><span class="line">        Positioned(</span><br><span class="line">        top: <span class="number">18.0</span>,</span><br><span class="line">        child: Text(<span class="string">"第四层"</span>),</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">    ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="../img/stack_positioned.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;层叠布局&quot;&gt;&lt;a href=&quot;#层叠布局&quot; class=&quot;headerlink&quot; title=&quot;层叠布局&quot;&gt;&lt;/a&gt;层叠布局&lt;/h2&gt;&lt;p&gt;层叠布局和Web中的绝对定位、Android中的Frame布局是相似的，子widget可以根据到父容器四个角的位置来确定本身
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="布局" scheme="http://yoursite.com/categories/Flutter/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Wrap&amp;Flow</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%B8%83%E5%B1%80/Wrap&amp;Flow/"/>
    <id>http://yoursite.com/2019/02/26/flutter/布局/Wrap&amp;Flow/</id>
    <published>2019-02-26T08:16:00.000Z</published>
    <updated>2019-10-02T11:55:49.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Wrap"><a href="#Wrap" class="headerlink" title="Wrap"></a>Wrap</h2><p>在介绍Row和Colum时，如果子widget超出屏幕范围，则会报溢出错误，如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Row(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Text(<span class="string">"xxx"</span>*<span class="number">100</span>)</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180905171113290.png" alt></p><p>可以看到，右边溢出部分报错。这是因为Row默认只有一行，如果超出屏幕不会折行。我们把超出屏幕显示范围会自动折行的布局称为流式布局。Flutter中通过Wrap和Flow来支持流式布局，将上例中的Row换成Wrap后溢出部分则会自动折行。下面是Wrap的定义:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Wrap(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">this</span>.direction = Axis.horizontal,</span><br><span class="line">  <span class="keyword">this</span>.alignment = WrapAlignment.start,</span><br><span class="line">  <span class="keyword">this</span>.spacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="keyword">this</span>.runAlignment = WrapAlignment.start,</span><br><span class="line">  <span class="keyword">this</span>.runSpacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="keyword">this</span>.crossAxisAlignment = WrapCrossAlignment.start,</span><br><span class="line">  <span class="keyword">this</span>.textDirection,</span><br><span class="line">  <span class="keyword">this</span>.verticalDirection = VerticalDirection.down,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们可以看到Wrap的很多属性在Row（包括Flex和Column）中也有，如<code>direction</code>、<code>crossAxisAlignment</code>、<code>textDirection</code>、<code>verticalDirection</code>等，这些参数意义是相同的，我们不再重复介绍，读者可以查阅前面介绍Row的部分。读者可以认为Wrap和Flex（包括Row和Column）除了超出显示范围后Wrap会折行外，其它行为基本相同。下面我们看一下Wrap特有的几个属性：</p><ul><li>spacing：主轴方向子widget的间距</li><li>runSpacing：纵轴方向的间距</li><li>runAlignment：纵轴方向的对齐方式<br>下面看一个示例子：<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Wrap(</span><br><span class="line">  spacing: <span class="number">8.0</span>, <span class="comment">// 主轴(水平)方向间距</span></span><br><span class="line">  runSpacing: <span class="number">4.0</span>, <span class="comment">// 纵轴（垂直）方向间距</span></span><br><span class="line">  alignment: WrapAlignment.center, <span class="comment">//沿主轴方向居中</span></span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    <span class="keyword">new</span> Chip(</span><br><span class="line">      avatar: <span class="keyword">new</span> CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">'A'</span>)),</span><br><span class="line">      label: <span class="keyword">new</span> Text(<span class="string">'Hamilton'</span>),</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> Chip(</span><br><span class="line">      avatar: <span class="keyword">new</span> CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">'M'</span>)),</span><br><span class="line">      label: <span class="keyword">new</span> Text(<span class="string">'Lafayette'</span>),</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> Chip(</span><br><span class="line">      avatar: <span class="keyword">new</span> CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">'H'</span>)),</span><br><span class="line">      label: <span class="keyword">new</span> Text(<span class="string">'Mulligan'</span>),</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> Chip(</span><br><span class="line">      avatar: <span class="keyword">new</span> CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">'J'</span>)),</span><br><span class="line">      label: <span class="keyword">new</span> Text(<span class="string">'Laurens'</span>),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180905173658950.png" alt></p><h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><p>我们一般很少会使用Flow，因为其过于复杂，需要自己实现子widget的位置转换，在很多场景下首先要考虑的是Wrap是否满足需求。Flow主要用于一些需要自定义布局策略或性能要求较高(如动画中)的场景。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p><strong>性能好</strong>：Flow是一个对child尺寸以及位置调整非常高效的控件，Flow用转换矩阵（transformation matrices）在对child进行位置调整的时候进行了优化：在Flow定位过后，如果child的尺寸或者位置发生了变化，在FlowDelegate中的paintChildren()方法中调用context.paintChild 进行重绘，而context.paintChild在重绘时使用了转换矩阵（transformation matrices），并没有实际调整Widget位置。</p></li><li><p><strong>灵活</strong>：由于我们需要自己实现FlowDelegate的paintChildren()方法，所以我们需要自己计算每一个widget的位置，因此，可以自定义布局策略。</p></li><li><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li><p>使用复杂.</p></li><li><p>不能自适应子widget大小，必须通过指定父容器大小或实现TestFlowDelegate的getSize返回固定大小。</p></li></ul><h3 id="我们对六个色块进行自定义流式布局："><a href="#我们对六个色块进行自定义流式布局：" class="headerlink" title="我们对六个色块进行自定义流式布局："></a>我们对六个色块进行自定义流式布局：</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Flow(</span><br><span class="line">  delegate: TestFlowDelegate(margin: EdgeInsets.all(<span class="number">10.0</span>)),</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    <span class="keyword">new</span> Container(width: <span class="number">80.0</span>, height:<span class="number">80.0</span>, color: Colors.red,),</span><br><span class="line">    <span class="keyword">new</span> Container(width: <span class="number">80.0</span>, height:<span class="number">80.0</span>, color: Colors.green,),</span><br><span class="line">    <span class="keyword">new</span> Container(width: <span class="number">80.0</span>, height:<span class="number">80.0</span>, color: Colors.blue,),</span><br><span class="line">    <span class="keyword">new</span> Container(width: <span class="number">80.0</span>, height:<span class="number">80.0</span>,  color: Colors.yellow,),</span><br><span class="line">    <span class="keyword">new</span> Container(width: <span class="number">80.0</span>, height:<span class="number">80.0</span>, color: Colors.brown,),</span><br><span class="line">    <span class="keyword">new</span> Container(width: <span class="number">80.0</span>, height:<span class="number">80.0</span>,  color: Colors.purple,),</span><br><span class="line">  ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestFlowDelegate</span> <span class="keyword">extends</span> <span class="title">FlowDelegate</span> </span>&#123;</span><br><span class="line">  EdgeInsets margin = EdgeInsets.zero;</span><br><span class="line">  TestFlowDelegate(&#123;<span class="keyword">this</span>.margin&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paintChildren(FlowPaintingContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = margin.left;</span><br><span class="line">    <span class="keyword">var</span> y = margin.top;</span><br><span class="line">    <span class="comment">//计算每一个子widget的位置  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; context.childCount; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> w = context.getChildSize(i).width + x + margin.right;</span><br><span class="line">      <span class="keyword">if</span> (w &lt; context.size.width) &#123;</span><br><span class="line">        context.paintChild(i,</span><br><span class="line">            transform: <span class="keyword">new</span> Matrix4.translationValues(</span><br><span class="line">                x, y, <span class="number">0.0</span>));</span><br><span class="line">        x = w + margin.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x = margin.left;</span><br><span class="line">        y += context.getChildSize(i).height + margin.top + margin.bottom;</span><br><span class="line">        <span class="comment">//绘制子widget(有优化)  </span></span><br><span class="line">        context.paintChild(i,</span><br><span class="line">            transform: <span class="keyword">new</span> Matrix4.translationValues(</span><br><span class="line">                x, y, <span class="number">0.0</span>));</span><br><span class="line">         x += context.getChildSize(i).width + margin.left + margin.right;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSize(BoxConstraints constraints)&#123;</span><br><span class="line">    <span class="comment">//指定Flow的大小  </span></span><br><span class="line">    <span class="keyword">return</span> Size(<span class="built_in">double</span>.infinity,<span class="number">200.0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(FlowDelegate oldDelegate) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldDelegate != <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0/docs/imgs/image-20180905184427501.png" alt></p><p>可以看到我们主要的任务就是实现paintChildren，它的主要任务是确定每个子widget位置。由于Flow不能自适应子widget的大小，我们通过在getSize返回一个固定大小来指定Flow的大小。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Wrap&quot;&gt;&lt;a href=&quot;#Wrap&quot; class=&quot;headerlink&quot; title=&quot;Wrap&quot;&gt;&lt;/a&gt;Wrap&lt;/h2&gt;&lt;p&gt;在介绍Row和Colum时，如果子widget超出屏幕范围，则会报溢出错误，如：&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="布局" scheme="http://yoursite.com/categories/Flutter/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flex&amp;Expand</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%B8%83%E5%B1%80/Flex&amp;Expand/"/>
    <id>http://yoursite.com/2019/02/26/flutter/布局/Flex&amp;Expand/</id>
    <published>2019-02-26T08:16:00.000Z</published>
    <updated>2019-10-02T11:53:51.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><p>Flex可以沿着水平或垂直方向排列子widget，如果你知道主轴方向，使用Row或Column会方便一些，因为Row和Column都继承自Flex，参数基本相同，所以能使用Flex的地方一定可以使用Row或Column。Flex本身功能是很强大的，它也可以和Expanded配合实现弹性布局，接下来我们只讨论Flex和弹性布局相关的属性(其它属性已经在介绍Row和Column时介绍过了)。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flex(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@required</span> <span class="keyword">this</span>.direction, <span class="comment">//弹性布局的方向, Row默认为水平方向，Column默认为垂直方向</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Flex继承自MultiChildRenderObjectWidget，对应的RenderObject为RenderFlex，RenderFlex中实现了其布局算法。</p><h2 id="Expanded"><a href="#Expanded" class="headerlink" title="Expanded"></a>Expanded</h2><p>可以按比例“扩伸”Row、Column和Flex子widget所占用的空间。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Expanded(&#123;</span><br><span class="line">  <span class="built_in">int</span> flex = <span class="number">1</span>, </span><br><span class="line">  <span class="meta">@required</span> Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>flex为弹性系数，如果为0或null，则child是没有弹性的，即不会被扩伸占用的空间。如果大于0，所有的Expanded按照其flex的比例来分割主轴的全部空闲空间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flex&quot;&gt;&lt;a href=&quot;#Flex&quot; class=&quot;headerlink&quot; title=&quot;Flex&quot;&gt;&lt;/a&gt;Flex&lt;/h2&gt;&lt;p&gt;Flex可以沿着水平或垂直方向排列子widget，如果你知道主轴方向，使用Row或Column会方便一些，因为Row和Col
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="布局" scheme="http://yoursite.com/categories/Flutter/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Button</title>
    <link href="http://yoursite.com/2019/02/26/flutter/widget/Button/"/>
    <id>http://yoursite.com/2019/02/26/flutter/widget/Button/</id>
    <published>2019-02-26T07:54:00.000Z</published>
    <updated>2019-10-02T11:51:29.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>在Material Widget 库中提供了多种按钮Widget，如RaisedButton、FlatButton、OutlineButton等。</p></blockquote><p>所有Material库中的按钮都具备以下共同点：</p><ol><li>按下时会有“水波动画”。</li><li>有一个onPressed属性来设置点击的回调，当按下时会执行回调，如果不提供该回调则按钮会处于禁用状态，不相应用户点击。</li></ol><h2 id="RaisedButton"><a href="#RaisedButton" class="headerlink" title="RaisedButton"></a>RaisedButton</h2><blockquote><p>漂浮按钮，默认带有阴影、灰色背景，按下后，阴影变大。</p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RaisedButton(&#123;</span><br><span class="line">   Key key,</span><br><span class="line">   <span class="meta">@required</span> VoidCallback onPressed, <span class="comment">//按钮点击回调</span></span><br><span class="line">   ValueChanged&lt;<span class="built_in">bool</span>&gt; onHighlightChanged,</span><br><span class="line">   ButtonTextTheme textTheme,</span><br><span class="line">   Color textColor, <span class="comment">//按钮文字颜色</span></span><br><span class="line">   Color disabledTextColor, <span class="comment">//按钮禁用时的文字颜色</span></span><br><span class="line">   Color color,<span class="comment">//按钮背景颜色</span></span><br><span class="line">   Color disabledColor,<span class="comment">//按钮禁用时的背景颜色</span></span><br><span class="line">   Color highlightColor,<span class="comment">//按钮按下时的背景颜色</span></span><br><span class="line">   Color splashColor,<span class="comment">//点击时，水波动画中水波的颜色</span></span><br><span class="line">   Brightness colorBrightness, <span class="comment">//按钮主题</span></span><br><span class="line">   <span class="built_in">double</span> elevation,<span class="comment">//正常状态下的阴影</span></span><br><span class="line">   <span class="built_in">double</span> highlightElevation,<span class="comment">//按下时的阴影</span></span><br><span class="line">   <span class="built_in">double</span> disabledElevation,<span class="comment">// 禁用时的阴影</span></span><br><span class="line">   EdgeInsetsGeometry padding, <span class="comment">//按钮的填充</span></span><br><span class="line">   ShapeBorder shape, <span class="comment">//外形</span></span><br><span class="line">   Clip clipBehavior = Clip.none,</span><br><span class="line">   MaterialTapTargetSize materialTapTargetSize,</span><br><span class="line">   <span class="built_in">Duration</span> animationDuration,</span><br><span class="line">   Widget child, <span class="comment">//按钮的内容</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="简单样例"><a href="#简单样例" class="headerlink" title="简单样例"></a>简单样例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line">    onPressed: () =&gt; <span class="built_in">print</span>(<span class="string">"你点击了RaisedButton"</span>),</span><br><span class="line">    child: Text(<span class="string">"RaisedButton"</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="FlatButton"><a href="#FlatButton" class="headerlink" title="FlatButton"></a>FlatButton</h2><blockquote><p>扁平按钮，默认背景透明并不带阴影，按下后，会有背景色。</p></blockquote><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FlatButton(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> VoidCallback onPressed,<span class="comment">//按钮点击回调</span></span><br><span class="line">    ValueChanged&lt;<span class="built_in">bool</span>&gt; onHighlightChanged,</span><br><span class="line">    ButtonTextTheme textTheme,</span><br><span class="line">    Color textColor,<span class="comment">//按钮文字颜色</span></span><br><span class="line">    Color disabledTextColor, <span class="comment">//按钮禁用时的文字颜色</span></span><br><span class="line">    Color color,<span class="comment">//按钮背景颜色</span></span><br><span class="line">    Color disabledColor,<span class="comment">//按钮禁用时的背景颜色</span></span><br><span class="line">    Color highlightColor,<span class="comment">//按钮按下时的背景颜色</span></span><br><span class="line">    Color splashColor,<span class="comment">//点击时，水波动画中水波的颜色</span></span><br><span class="line">    Brightness colorBrightness,<span class="comment">//按钮主题，默认是浅色主题 </span></span><br><span class="line">    EdgeInsetsGeometry padding,<span class="comment">//按钮的填充</span></span><br><span class="line">    ShapeBorder shape,<span class="comment">//外形</span></span><br><span class="line">    Clip clipBehavior = Clip.none,</span><br><span class="line">    MaterialTapTargetSize materialTapTargetSize,</span><br><span class="line">    <span class="meta">@required</span> Widget child,<span class="comment">//按钮的内容</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FlatButton(</span><br><span class="line">    onPressed: () =&gt; <span class="built_in">print</span>(<span class="string">"你点击了FlatButton"</span>),</span><br><span class="line">    child: Text(<span class="string">"FlatButton"</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="OutlineButton"><a href="#OutlineButton" class="headerlink" title="OutlineButton"></a>OutlineButton</h2><blockquote><p>OutlineButton默认有一个边框，不带阴影且背景透明。按下后，边框颜色会变亮、同时出现背景和阴影(较弱)：</p></blockquote><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OutlineButton(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> VoidCallback onPressed, </span><br><span class="line">    ButtonTextTheme textTheme,</span><br><span class="line">    Color textColor,</span><br><span class="line">    Color disabledTextColor,</span><br><span class="line">    Color color,<span class="comment">//按钮背景颜色</span></span><br><span class="line">    Color highlightColor,<span class="comment">//按钮按下时的背景颜色</span></span><br><span class="line">    Color splashColor,<span class="comment">//点击时，水波动画中水波的颜色</span></span><br><span class="line">    <span class="built_in">double</span> highlightElevation,</span><br><span class="line">    <span class="keyword">this</span>.borderSide,</span><br><span class="line">    <span class="keyword">this</span>.disabledBorderColor,</span><br><span class="line">    <span class="keyword">this</span>.highlightedBorderColor,</span><br><span class="line">    EdgeInsetsGeometry padding,</span><br><span class="line">    ShapeBorder shape,</span><br><span class="line">    Clip clipBehavior = Clip.none,</span><br><span class="line">    Widget child,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OutlineButton(</span><br><span class="line">    onPressed: () =&gt; <span class="built_in">print</span>(<span class="string">"你点击了OutlineButton"</span>),</span><br><span class="line">    child: Text(<span class="string">"OutlineButton"</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="IconButton"><a href="#IconButton" class="headerlink" title="IconButton"></a>IconButton</h2><blockquote><p>可点击的Icon，不包含文字，默认没有背景，点击会出现背景</p></blockquote><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> IconButton(&#123;</span><br><span class="line">   Key key,</span><br><span class="line">   <span class="keyword">this</span>.iconSize = <span class="number">24.0</span>,<span class="comment">// icon大小</span></span><br><span class="line">   <span class="keyword">this</span>.padding = <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">   <span class="keyword">this</span>.alignment = Alignment.center,<span class="comment">// 默认居中</span></span><br><span class="line">   <span class="meta">@required</span> <span class="keyword">this</span>.icon,<span class="comment">// 内部的icon</span></span><br><span class="line">   <span class="keyword">this</span>.color,<span class="comment">//按钮背景颜色</span></span><br><span class="line">   <span class="keyword">this</span>.highlightColor,<span class="comment">//按钮按下时的背景颜色</span></span><br><span class="line">   <span class="keyword">this</span>.splashColor, <span class="comment">//点击时，水波动画中水波的颜色</span></span><br><span class="line">   <span class="keyword">this</span>.disabledColor,<span class="comment">// 禁用颜色</span></span><br><span class="line">   <span class="meta">@required</span> <span class="keyword">this</span>.onPressed,<span class="comment">// 点击回调</span></span><br><span class="line">   <span class="keyword">this</span>.tooltip <span class="comment">// 长按回调</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IconButton(</span><br><span class="line">    onPressed: () =&gt; <span class="built_in">print</span>(<span class="string">"你点击了IconButton"</span>),</span><br><span class="line">    tooltip:<span class="string">"你长按了我"</span>,</span><br><span class="line">    icon: Icon(Icons.thumb_up),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="自定义按钮样式"><a href="#自定义按钮样式" class="headerlink" title="自定义按钮样式"></a>自定义按钮样式</h2><blockquote><p>按钮外观可以通过其属性来定义，不同按钮属性大同小异。</p></blockquote><h3 id="自定义一个圆角蓝色按钮"><a href="#自定义一个圆角蓝色按钮" class="headerlink" title="自定义一个圆角蓝色按钮"></a>自定义一个圆角蓝色按钮</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FlatButton(</span><br><span class="line">    color</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在Material Widget 库中提供了多种按钮Widget，如RaisedButton、FlatButton
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="Widget" scheme="http://yoursite.com/categories/Flutter/Widget/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Row&amp;Colum</title>
    <link href="http://yoursite.com/2019/02/26/flutter/%E5%B8%83%E5%B1%80/Row&amp;Colum/"/>
    <id>http://yoursite.com/2019/02/26/flutter/布局/Row&amp;Colum/</id>
    <published>2019-02-26T07:51:00.000Z</published>
    <updated>2019-10-02T11:54:39.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>沿着水平或垂直方向排列Widget。</p></blockquote><h2 id="Column-amp-Row"><a href="#Column-amp-Row" class="headerlink" title="Column&amp;Row"></a>Column&amp;Row</h2><blockquote><p>垂直和水平线性布局</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Column(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,<span class="comment">// 表示子Widgets在Column所占用的水平空间内对齐方式</span></span><br><span class="line">    MainAxisSize mainAxisSize = MainAxisSize.max,<span class="comment">//在垂直方向上的占据空间</span></span><br><span class="line">    CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,<span class="comment">// 表示子Widgets在纵轴方向的对齐方式</span></span><br><span class="line">    TextDirection textDirection,<span class="comment">// 水平布局的顺序（从左到右、从右到左）</span></span><br><span class="line">    VerticalDirection verticalDirection = VerticalDirection.down,<span class="comment">// 表示Column纵轴（垂直）的对齐方向</span></span><br><span class="line">    TextBaseline textBaseline,</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],<span class="comment">// 子控件</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li>textDirection：表示水平方向子widget的布局顺序(是从左往右还是从右往左)，默认为系统当前Locale环境的文本方向(如中文、英语都是从左往右，而阿拉伯语是从右往左)。</li><li>mainAxisSize：表示Row在主轴(水平)方向占用的空间，默认是MainAxisSize.max，表示尽可能多的占用水平方向的空间，此时无论子widgets实际占用多少水平空间，Row的宽度始终等于水平方向的最大宽度；而MainAxisSize.min表示尽可能少的占用水平空间，当子widgets没有占满水平剩余空间，则Row的实际宽度等于所有子widgets占用的的水平空间；</li><li>mainAxisAlignment：表示子Widgets在Row所占用的水平空间内对齐方式，如果mainAxisSize值为MainAxisSize.min，则此属性无意义，因为子widgets的宽度等于Row的宽度。只有当mainAxisSize的值为MainAxisSize.max时，此属性才有意义，MainAxisAlignment.start表示沿textDirection的初始方向对齐，如textDirection取值为TextDirection.ltr时，则MainAxisAlignment.start表示左对齐，textDirection取值为TextDirection.rtl时表示从右对齐。而MainAxisAlignment.end和MainAxisAlignment.start正好相反；MainAxisAlignment.center表示居中对齐。读者可以这么理解：textDirection是mainAxisAlignment的参考系。</li><li>verticalDirection：表示Row纵轴（垂直）的对齐方向，默认是VerticalDirection.down，表示从上到下。</li><li>crossAxisAlignment：表示子Widgets在纵轴方向的对齐方式，Row的高度等于子Widgets中最高的子元素高度，它的取值和MainAxisAlignment一样(包含start、end、 center三个值)，不同的是crossAxisAlignment的参考系是verticalDirection，即verticalDirection值为VerticalDirection.down时crossAxisAlignment.start指顶部对齐，verticalDirection值为VerticalDirection.up时，crossAxisAlignment.start指底部对齐；而crossAxisAlignment.end和crossAxisAlignment.start正好相反；</li><li>children ：子Widgets数组。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;沿着水平或垂直方向排列Widget。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Column-amp-R
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="布局" scheme="http://yoursite.com/categories/Flutter/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Text</title>
    <link href="http://yoursite.com/2019/02/26/flutter/widget/Text/"/>
    <id>http://yoursite.com/2019/02/26/flutter/widget/Text/</id>
    <published>2019-02-26T07:14:00.000Z</published>
    <updated>2019-10-02T11:51:45.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><blockquote><p>Text用于显示简单样式文本，它包含一些控制文本显示样式的一些属性。</p></blockquote><h2 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h2><p><img src="../img/13_1.png" alt></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><blockquote><p>显示的文本</p></blockquote><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><blockquote><p>字体样式</p></blockquote><table><thead><tr><th>属性值</th><th>意义</th></tr></thead><tbody><tr><td>inherit</td><td>是否继承</td></tr><tr><td>color</td><td>字体颜色</td></tr><tr><td>fontSize</td><td>字体大小</td></tr><tr><td>fontWeight</td><td>字体厚度，也就是字体粗细</td></tr><tr><td>fontStyle</td><td>normal或者italic</td></tr><tr><td>letterSpacing</td><td>字母间隙(负值可以让字母更紧凑)</td></tr><tr><td>wordSpacing</td><td>单词间隙(负值可以让单词更紧凑)</td></tr><tr><td>textBaseLine</td><td>文本绘制基线(alphabetic/ideographic)</td></tr><tr><td>height</td><td>高度</td></tr><tr><td>locale</td><td>区域设置</td></tr><tr><td>decoration</td><td>文字装饰(none/underline/overline/lineThrough)</td></tr><tr><td>decorationColor</td><td>文字装饰的颜色</td></tr><tr><td>decorationStyle</td><td>文字装饰的风格(solid/double/dotted/dashed/wavy)</td></tr><tr><td>fontFamily</td><td>字体</td></tr></tbody></table><h3 id="textAlign"><a href="#textAlign" class="headerlink" title="textAlign"></a>textAlign</h3><blockquote><p>文本对齐</p></blockquote><table><thead><tr><th>TextAlign</th><th>说明</th></tr></thead><tbody><tr><td>TextAlign.left</td><td>左对齐</td></tr><tr><td>TextAlign.right</td><td>右对齐</td></tr><tr><td>TextAlign.center</td><td>居中</td></tr><tr><td>TextAlign.justfy</td><td>两端对齐</td></tr><tr><td>TextAlign.start</td><td>类似left</td></tr><tr><td>TextAlign.end</td><td>类似right</td></tr></tbody></table><h3 id="textDiection"><a href="#textDiection" class="headerlink" title="textDiection"></a>textDiection</h3><blockquote><p>文字方向</p><ul><li>TextDirection.ltr 左</li><li>TextDirection.rtl 右</li></ul></blockquote><h3 id="softWrap"><a href="#softWrap" class="headerlink" title="softWrap"></a>softWrap</h3><blockquote><p>是否自动换行,若为false，文字将不考虑容器大小，单行显示，超出屏幕部分将默认截断处理</p></blockquote><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><blockquote><p>文字溢出的显示方式</p><ul><li>TextOverflow.clip 默认裁剪</li><li>TextOverflow.fade 逐渐隐藏</li><li>TextOverflow.ellipsis 省略号</li></ul></blockquote><h3 id="textScaleFactor"><a href="#textScaleFactor" class="headerlink" title="textScaleFactor"></a>textScaleFactor</h3><blockquote><p>显示倍率，相当于放大多少倍</p></blockquote><h3 id="maxLines"><a href="#maxLines" class="headerlink" title="maxLines"></a>maxLines</h3><blockquote><p>最大显示行数</p></blockquote><h3 id="textSpan"><a href="#textSpan" class="headerlink" title="textSpan"></a>textSpan</h3><blockquote><p>对一个Text内容的不同部分按照不同的样式显示，这时就可以使用TextSpan。</p></blockquote><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TextSpan(&#123;</span><br><span class="line">  TextStyle style, </span><br><span class="line">  Sting text,</span><br><span class="line">  <span class="built_in">List</span>&lt;TextSpan&gt; children,</span><br><span class="line">  GestureRecognizer recognizer,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Text.rich(TextSpan(</span><br><span class="line">    children: [</span><br><span class="line">     TextSpan(</span><br><span class="line">       text: <span class="string">"Home: "</span></span><br><span class="line">     ),</span><br><span class="line">     TextSpan(</span><br><span class="line">       text: <span class="string">"https://flutterchina.club"</span>,</span><br><span class="line">       style: TextStyle(</span><br><span class="line">         color: Colors.blue</span><br><span class="line">       ),  </span><br><span class="line">       recognizer: _tapRecognizer</span><br><span class="line">     ),</span><br><span class="line">    ]</span><br><span class="line">))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Text用于显示简单样式文本，它包含一些控制文本显示样式的一些属性。&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="Widget" scheme="http://yoursite.com/categories/Flutter/Widget/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>StatefulWidget和StatelessWidget</title>
    <link href="http://yoursite.com/2019/02/26/flutter/widget/FlutterWidget/"/>
    <id>http://yoursite.com/2019/02/26/flutter/widget/FlutterWidget/</id>
    <published>2019-02-26T05:54:00.000Z</published>
    <updated>2019-10-02T11:51:36.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Flutter提供了一套丰富、强大的基础widget，在基础widget库之上Flutter又提供了一套Material风格（Android默认的视觉风格）和一套Cupertino风格（iOS视觉风格）的widget库。要使用基础widget库，需要先导入：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/widgets.dart'</span>;</span><br></pre></td></tr></table></figure><h2 id="基础widget"><a href="#基础widget" class="headerlink" title="基础widget"></a>基础widget</h2><ul><li><code>Text</code>：该 widget 可让您创建一个带格式的文本。</li><li><code>Row</code>、 <code>Column</code>： 这些具有弹性空间的布局类Widget可让您在水平（Row）和垂直（Column）方向上创建灵活的布局。其设计是基于web开发中的Flexbox布局模型。</li><li><code>Stack</code>： 取代线性布局 (译者语：和Android中的FrameLayout相似)，Stack允许子 widget 堆叠， 你可以使用 Positioned 来定位他们相对于Stack的上下左右四条边的位置。Stacks是基于Web开发中的绝对定位（absolute positioning )布局模型设计的。</li><li><code>Container</code>：可让您创建矩形视觉元素。container 可以装饰一个BoxDecoration, 如 background、一个边框、或者一个阴影。 Container 也可以具有边距（margins）、填充(padding)和应用于其大小的约束(constraints)。另外，  Container可以使用矩阵在三维空间中对其进行变换。</li></ul><h2 id="什么是-Material-Design-和-Flutter-Material-组件？"><a href="#什么是-Material-Design-和-Flutter-Material-组件？" class="headerlink" title="什么是 Material Design 和 Flutter Material 组件？"></a>什么是 Material Design 和 Flutter Material 组件？</h2><p>Material Design 意在为你构建一个大胆而且美观的数字产品设计系统。将风格、品牌、交互、动效通过统一的准则结合，发掘产品最大的设计潜力。</p><p><strong>Flutter 的 Material 组件（MDC - Flutter）</strong> 通过在应用间和平台间提供一个统一的用户体验组件库，把设计和工程合二为一。秉承着 Google 的前端开发标准，Material Design 系统正在向多端一致体验、像素级完美呈现的方向发展。Material Design 组件（MDC）也同样适用于 Android、iOS 和 Web。</p><h2 id="Material-widget"><a href="#Material-widget" class="headerlink" title="Material widget"></a>Material widget</h2><p>Flutter提供了一套丰富的Material widget，可帮助您构建遵循Material Design的应用程序。Material应用程序以MaterialApp widget开始， 该widget在应用程序的根部创建了一些有用的widget，比如一个Theme，它配置了应用的主题。 是否使用MaterialApp完全是可选的，但是使用它是一个很好的做法。在之前的示例中，我们已经使用过多个Material widget了，如：Scaffold、AppBar、FlatButton等。要使用Material widget，需要先引入它：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br></pre></td></tr></table></figure><h2 id="Cupertino-widget"><a href="#Cupertino-widget" class="headerlink" title="Cupertino widget"></a>Cupertino widget</h2><p>Flutter也提供了一套丰富的Cupertino风格的widget，尽管目前还没有Material widget那么丰富，但也在不断的完善中。值得一提的是在Material widget库中，有一些widget可以根据实际运行平台来切换表现风格，比如MaterialPageRoute，在路由切换时，如果是Android系统，它将会使用Android系统默认的页面切换动画(从底向上)，如果是iOS系统时，它会使用iOS系统默认的页面切换动画（从右向左）。由于在前面的示例中还没有Cupertino widget的示例，我们实现一个简单的Cupertino页面：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入cupertino widget库</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/cupertino.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CupertinoTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CupertinoPageScaffold(</span><br><span class="line">      navigationBar: CupertinoNavigationBar(</span><br><span class="line">        middle: Text(<span class="string">"Cupertino Demo"</span>),</span><br><span class="line">      ),</span><br><span class="line">      child: Center(</span><br><span class="line">        child: CupertinoButton(</span><br><span class="line">            color: CupertinoColors.activeBlue,</span><br><span class="line">            child: Text(<span class="string">"Press"</span>),</span><br><span class="line">            onPressed: () &#123;&#125;</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Widget与Element"><a href="#Widget与Element" class="headerlink" title="Widget与Element"></a>Widget与Element</h2><blockquote><p>Widget的功能是“描述一个UI元素的配置数据”,Flutter中真正代表屏幕上显示元素的类是Element。</p><ul><li>Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。</li><li>一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。</li></ul></blockquote><h2 id="主要接口"><a href="#主要接口" class="headerlink" title="主要接口"></a>主要接口</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Widget(&#123; <span class="keyword">this</span>.key &#125;);</span><br><span class="line">  <span class="keyword">final</span> Key key;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="built_in">Element</span> createElement();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toStringShort() &#123;</span><br><span class="line">    <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="string">'<span class="subst">$runtimeType</span>'</span> : <span class="string">'<span class="subst">$runtimeType</span>-<span class="subst">$key</span>'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> debugFillProperties(DiagnosticPropertiesBuilder properties) &#123;</span><br><span class="line">    <span class="keyword">super</span>.debugFillProperties(properties);</span><br><span class="line">    properties.defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.dense;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">        &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Widget类继承自<code>DiagnosticableTree</code>，DiagnosticableTree即“诊断树”，主要作用是提供调试信息。</li><li><code>Key</code>: 这个key属性类似于React/Vue中的key，主要的作用是决定是否在下一次build时复用旧的widget，决定的条件在<code>canUpdate()</code>方法中。</li><li><code>createElement()</code>：正如前文所述“一个Widget可以对应多个Element”；Flutter Framework在构建UI树时，会先调用此方法生成对应节点的Element对象。此方法是Flutter Framework隐式调用的，在我们开发过程中基本不会调用到。</li><li><code>debugFillProperties(...)</code> 复写父类的方法，主要是设置诊断树的一些特性。</li><li><code>canUpdate(...)</code>是一个静态方法，它主要用于在Widget树重新build时复用旧的widget，其实具体来说，应该是：是否用新的Widget对象去更新旧UI树上所对应的Element对象的配置；通过其源码我们可以看到，只要newWidget与oldWidget的runtimeType和key同时相等时就会用newWidget去更新Element对象的配置，否则就会创建新的Element。</li></ul><h2 id="StatelessWidget"><a href="#StatelessWidget" class="headerlink" title="StatelessWidget"></a>StatelessWidget</h2><blockquote><p>StatelessWidget用于不需要维护状态的场景，它通常在build方法中通过嵌套其它Widget来构建UI，在构建过程中会递归的构建其嵌套的Widget。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Echo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Echo(&#123;</span><br><span class="line">    Key key,  </span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.text,</span><br><span class="line">    <span class="keyword">this</span>.backgroundColor:Colors.grey,</span><br><span class="line">  &#125;):<span class="keyword">super</span>(key:key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line">  <span class="keyword">final</span> Color backgroundColor;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: backgroundColor,</span><br><span class="line">        child: Text(text),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StatefulWidget"><a href="#StatefulWidget" class="headerlink" title="StatefulWidget"></a>StatefulWidget</h2><blockquote><p>具有可变状态(<code>state</code>)的<code>Widget</code>.</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StatefulWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> StatefulWidget(&#123; Key key &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  StatefulElement createElement() =&gt; <span class="keyword">new</span> StatefulElement(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  State createState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>StatefulElement</code> 间接继承自<code>Element</code>类，与<code>StatefulWidget</code>相对应（作为其配置数据）。<code>StatefulElement</code>中可能会多次调用<code>createState()</code>来创建状态(<code>State</code>)对象。</li><li><code>createState()</code> 用于创建和Stateful widget相关的状态，它在Stateful widget的生命周期中可能会被多次调用。例如，当一个Stateful widget同时插入到widget树的多个位置时，Flutter framework就会调用该方法为每一个位置生成一个独立的<code>State</code>实例，其实，本质上就是一个<code>StatefulElement</code>对应一个<code>State</code>实例。</li></ul><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><blockquote><p>一个StatefulWidget类会对应一个State类，State表示与其对应的StatefulWidget要维护的状态。</p><ol><li>在widget build时可以被同步读取。</li><li>在widget生命周期中可以被改变，当<code>State</code>被改变时，可以手动调用其<code>setState()</code>方法通知Flutter framework状态发生改变，Flutter framework在收到消息后，会重新调用其build方法重新构建widget树，从而达到更新UI的目的。</li></ol></blockquote><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ul><li>widget<blockquote><p>它表示与该State实例关联的widget实例，由Flutter framework动态设置。注意，这种关联并非永久的，因为在应用声明周期中，UI树上的某一个节点的widget实例在重新构建时可能会变化，但State实例只会在第一次插入到树中时被创建，当在重新构建时，如果widget被修改了，Flutter framework会动态设置State.widget为新的widget实例。</p></blockquote></li><li>context<blockquote><p>它是BuildContext类的一个实例，表示构建widget的上下文，它是操作widget在树中位置的一个句柄，它包含了一些查找、遍历当前Widget树的一些方法。每一个widget都有一个自己的context对象。</p></blockquote></li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="../img/state_life.png" alt></p><p>大致可以看成三个阶段</p><ol><li>初始化（插入渲染树）</li><li>状态改变（在渲染树中存在）</li><li>销毁（从渲染树中移除）</li></ol><h3 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h3><ul><li>initState<blockquote><p>当插入渲染树的时候调用，这个函数在生命周期中只调用一次。这里可以做一些初始化工作，比如初始化State的变量。</p></blockquote></li><li>didChangeDependencies<blockquote><p>这个函数会紧跟在initState之后调用，并且可以调用BuildContext.inheritFromWidgetOfExactType</p></blockquote></li><li>didUpdateWidget<blockquote><p>当组件的状态改变的时候就会调用didUpdateWidget,比如调用了setState.</p></blockquote></li><li>deactivate<blockquote><p>在dispose之前，会调用这个函数。</p></blockquote></li><li>dispose<blockquote><p>一旦到这个阶段，组件就要被销毁了，这个函数一般会移除监听，清理环境。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Flutter提供了一套丰富、强大的基础widget，在基础widget库之上Flutter又提供了一套Material风格（Android
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="Widget" scheme="http://yoursite.com/categories/Flutter/Widget/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Image&amp;Icon</title>
    <link href="http://yoursite.com/2019/02/26/flutter/widget/Image&amp;Icon/"/>
    <id>http://yoursite.com/2019/02/26/flutter/widget/Image&amp;Icon/</id>
    <published>2019-02-26T05:14:00.000Z</published>
    <updated>2019-10-02T11:51:41.152Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Flutter 可以使用Image加载显示asset、本地、内存以及网络图片</p></blockquote><h2 id="ImageProvider"><a href="#ImageProvider" class="headerlink" title="ImageProvider"></a>ImageProvider</h2><blockquote><p>是一个抽象类，定义了图片数据获取的接口load()，不同的数据源由对应不同的ImageProvider，如AssertImage、NetworkImage</p></blockquote><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><h3 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Image(&#123;</span><br><span class="line">   Key key,</span><br><span class="line">   <span class="meta">@required</span> <span class="keyword">this</span>.image, <span class="comment">// 图片源</span></span><br><span class="line">   <span class="keyword">this</span>.semanticLabel,</span><br><span class="line">   <span class="keyword">this</span>.excludeFromSemantics = <span class="keyword">false</span>,</span><br><span class="line">   <span class="keyword">this</span>.width,<span class="comment">//图片的宽</span></span><br><span class="line">   <span class="keyword">this</span>.height, <span class="comment">//图片高度</span></span><br><span class="line">   <span class="keyword">this</span>.color,<span class="comment">//图片的混合色值</span></span><br><span class="line">   <span class="keyword">this</span>.colorBlendMode,<span class="comment">//混合模式</span></span><br><span class="line">   <span class="keyword">this</span>.fit,<span class="comment">//缩放模式</span></span><br><span class="line">   <span class="keyword">this</span>.alignment = Alignment.center, <span class="comment">//对齐方式</span></span><br><span class="line">   <span class="keyword">this</span>.repeat = ImageRepeat.noRepeat,<span class="comment">//重复方式</span></span><br><span class="line">   <span class="keyword">this</span>.centerSlice,<span class="comment">// 内部拉伸区域</span></span><br><span class="line">   <span class="keyword">this</span>.matchTextDirection = <span class="keyword">false</span>,</span><br><span class="line">   <span class="keyword">this</span>.gaplessPlayback = <span class="keyword">false</span>,</span><br><span class="line">   <span class="keyword">this</span>.filterQuality = FilterQuality.low,</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><table><thead><tr><th>方式</th><th>解释</th></tr></thead><tbody><tr><td>Image()</td><td>通用方法，使用ImageProvider实现，如下方法本质上也是使用的这个方法</td></tr><tr><td>Image.asset</td><td>加载资源图片</td></tr><tr><td>Image.file</td><td>加载本地图片文件</td></tr><tr><td>Image.network</td><td>加载网络图片</td></tr><tr><td>Image.memory</td><td>加载Uint8List资源图片</td></tr></tbody></table><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><blockquote><p>抽象类，需要自己实现获取图片数据的操作</p></blockquote><p>常用ImageProvider</p><ul><li>ExactAssetImage</li><li>AssetImage</li><li>NetworkImage</li><li>FileImage</li><li>MemoryImage</li></ul><h4 id="width-amp-height"><a href="#width-amp-height" class="headerlink" title="width &amp; height"></a>width &amp; height</h4><blockquote><p>显示区域的宽和高。</p></blockquote><h4 id="fit"><a href="#fit" class="headerlink" title="fit"></a>fit</h4><blockquote><p>缩放模式</p></blockquote><ul><li>BoxFit.fill 全图显示，拉伸、充满</li><li>BoxFit.contain 原比例全图显示</li><li>BoxFit.cover 拉伸、裁剪、充满</li><li>BoxFit.fitWidth 宽度充满</li><li>BoxFit.fitHeight 高度充满</li><li>BoxFit.scaleDown 类似contain，但是不允许显示超过源图片大小，可变小，不可变大</li><li>BoxFit.none 原图显示</li></ul><h4 id="color-amp-colorBlendMode"><a href="#color-amp-colorBlendMode" class="headerlink" title="color &amp; colorBlendMode"></a>color &amp; colorBlendMode</h4><blockquote><p>混合模式，配合使用</p></blockquote><h4 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h4><blockquote><p>控制图片的摆放位置</p></blockquote><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><blockquote><p>重复显示</p><ul><li>ImageRepeat.repeat X、Y方向都重复显示</li><li>ImageRepeat.repeatX 横向重复</li><li>ImageRepeat.repeatY 竖向重复</li><li>ImageRepeat.none 不重复</li></ul></blockquote><h4 id="centerSlice"><a href="#centerSlice" class="headerlink" title="centerSlice"></a>centerSlice</h4><blockquote><p>当图片被拉伸时，centerSlice定义的区域会被拉升</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Image image = Image.asset(</span><br><span class="line">    <span class="string">'image/14v.png'</span>,</span><br><span class="line">    width: <span class="number">300.0</span>,</span><br><span class="line">    height: <span class="number">300.0</span>,</span><br><span class="line">    fit: BoxFit.contain,</span><br><span class="line">    centerSlice: Rect.fromCircle(</span><br><span class="line">        center: <span class="keyword">const</span> Offset(<span class="number">100.0</span>,<span class="number">100.0</span>),</span><br><span class="line">        radius: <span class="number">10.0</span>,</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(sourceSize == inputSize, <span class="string">'centerSlice was used with a BoxFit that does not guarantee that the image is fully visible.'</span>);</span><br></pre></td></tr></table></figure><p><code>* 当显示比例小于原图片大小时，会报错！</code></p><h4 id="matchTextDirection"><a href="#matchTextDirection" class="headerlink" title="matchTextDirection"></a>matchTextDirection</h4><blockquote><p>与 Directionality 配合使用</p></blockquote><h4 id="gaplessPlayback"><a href="#gaplessPlayback" class="headerlink" title="gaplessPlayback"></a>gaplessPlayback</h4><blockquote><p>当ImageProvider发生变化后，重新加载图片的过程中，原图片的展示是否保留。若值为true，保留，若为false，不保留，直接空白等待下一张图片加载。</p></blockquote><h2 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h2><blockquote><p>Flutter中可以像Web开发一样使用iconfont,即字体图标，它是将图标做成字体文件，然后通过指定不同的字符而显示不同的图片。</p></blockquote><p>Icon与Image相比有如下优势</p><ol><li>体积小</li><li>矢量化，放大不变形。</li><li>可以应用文本样式。</li><li>可以利用TextSpan和文本混用。</li></ol><h3 id="使用Material-Design字体图标"><a href="#使用Material-Design字体图标" class="headerlink" title="使用Material Design字体图标"></a>使用Material Design字体图标</h3><p>Flutter默认包含了一套Material Design的字体图标，在pubspec.yaml文件中的配置如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  user-material-design: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>所有的图标集合可查看官网 <a href="http://material.io/tools/icons" target="_blank" rel="noopener">http://material.io/tools/icons</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Flutter 可以使用Image加载显示asset、本地、内存以及网络图片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ImageProvider&quot;&gt;&lt;a href=&quot;#ImageProvider&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="Widget" scheme="http://yoursite.com/categories/Flutter/Widget/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>PopupMenu</title>
    <link href="http://yoursite.com/2019/02/25/flutter/widget/19_Material_PopupMenu/"/>
    <id>http://yoursite.com/2019/02/25/flutter/widget/19_Material_PopupMenu/</id>
    <published>2019-02-25T09:54:00.000Z</published>
    <updated>2019-10-02T11:51:25.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>弹出式菜单</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PopupMenuMaterial</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> _PopupMenuDemo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PopupMenuDemo</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PopupMenuMaterial</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _normalTitle = <span class="string">"NormalPopMenu"</span>;</span><br><span class="line">  <span class="built_in">String</span> _iconTitle = <span class="string">"IconPopMenu"</span>;</span><br><span class="line">  <span class="built_in">String</span> _checkedTitle = <span class="string">"CheckedPopupMenuItem"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> _popupMenuList(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// 创建</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  Widget _popupMenuList(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      padding: EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        _normalPopMenu(),</span><br><span class="line">        Divider(),</span><br><span class="line">        _iconPopMenu(),</span><br><span class="line">        Divider(),</span><br><span class="line">        _checkedPopupMenuItem(),</span><br><span class="line">        Divider(),</span><br><span class="line">        _popupMenuDivider(),</span><br><span class="line">        Divider(),</span><br><span class="line">        _showMenu(context),</span><br><span class="line">        Divider(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// 1. 默认PopMenu</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  Widget _normalPopMenu() &#123;</span><br><span class="line">    <span class="keyword">return</span> PopupMenuButton&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">      child: Text(</span><br><span class="line">        _normalTitle,</span><br><span class="line">      ),</span><br><span class="line">      itemBuilder: (BuildContext context) =&gt; &lt;PopupMenuItem&lt;<span class="built_in">String</span>&gt;&gt;[</span><br><span class="line">            <span class="keyword">new</span> PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">                value: <span class="string">'Item One'</span>, child: <span class="keyword">new</span> Text(<span class="string">'Item One'</span>)),</span><br><span class="line">            <span class="keyword">new</span> PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">                value: <span class="string">'Item Two'</span>, child: <span class="keyword">new</span> Text(<span class="string">'Item Two'</span>)),</span><br><span class="line">            <span class="keyword">new</span> PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">                value: <span class="string">'Item Three'</span>, child: <span class="keyword">new</span> Text(<span class="string">'Item Three'</span>)),</span><br><span class="line">            <span class="keyword">new</span> PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">                value: <span class="string">'I am Item Four'</span>, child: <span class="keyword">new</span> Text(<span class="string">'I am Item Four'</span>))</span><br><span class="line">          ],</span><br><span class="line">      onSelected: (<span class="built_in">String</span> value) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            _normalTitle = <span class="string">"NormalPopMenu : "</span> + value;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// 2. 带有Icon</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  Widget _iconPopMenu() &#123;</span><br><span class="line">    <span class="keyword">return</span> PopupMenuButton&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">      child: Text(</span><br><span class="line">        _iconTitle,</span><br><span class="line">      ),</span><br><span class="line">      itemBuilder: (BuildContext context) =&gt; &lt;PopupMenuItem&lt;<span class="built_in">String</span>&gt;&gt;[</span><br><span class="line">            PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              value: <span class="string">'Icon One'</span>,</span><br><span class="line">              child: ListTile(</span><br><span class="line">                leading: Icon(Icons.looks_one),</span><br><span class="line">                title: Text(<span class="string">"Item one"</span>),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              value: <span class="string">'Icon Two'</span>,</span><br><span class="line">              <span class="comment">// 若需要处理带图标的样式时，官网提供的 Demo 是借助的 ListTile 来处理的，</span></span><br><span class="line">              <span class="comment">// 但是小菜测试发现图标与文字距离偏大，原因在于 ListTile 默认左侧图标 leading 距离不可直接调整，</span></span><br><span class="line">              <span class="comment">// 建议用 Row 或其他方式调整</span></span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Padding(</span><br><span class="line">                      padding: EdgeInsets.fromLTRB(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">8.0</span>, <span class="number">0.0</span>),</span><br><span class="line">                      child: Icon(Icons.looks_two)),</span><br><span class="line">                  Text(<span class="string">'Item Two'</span>)</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              value: <span class="string">'Icon Three'</span>,</span><br><span class="line">              child: ListTile(</span><br><span class="line">                leading: Icon(Icons.threed_rotation),</span><br><span class="line">                title: Text(<span class="string">"Item Three"</span>),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              value: <span class="string">'Icon Four , No Icon !'</span>,</span><br><span class="line">              child: ListTile(</span><br><span class="line">                title: Text(<span class="string">"Item Four,No Icon"</span>),</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">      onSelected: (<span class="built_in">String</span> value) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          _iconTitle = <span class="string">"IconPopMenu : "</span> + value;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// 3. CheckedPopupMenuItem</span></span><br><span class="line">  Widget _checkedPopupMenuItem() &#123;</span><br><span class="line">    <span class="keyword">return</span> PopupMenuButton&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">      child: Text(_checkedTitle),</span><br><span class="line">      itemBuilder: (BuildContext context) =&gt; &lt;PopupMenuItem&lt;<span class="built_in">String</span>&gt;&gt;[</span><br><span class="line">            CheckedPopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              checked: _checkedTitle == <span class="string">'Checked One'</span>,</span><br><span class="line">              value: <span class="string">'Checked One'</span>,</span><br><span class="line">              child: Text(<span class="string">"Check One"</span>),</span><br><span class="line">            ),</span><br><span class="line">            CheckedPopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              checked: _checkedTitle == <span class="string">'Checked Two'</span>,</span><br><span class="line">              value: <span class="string">'Checked Two'</span>,</span><br><span class="line">              child: Text(<span class="string">"Check Two"</span>),</span><br><span class="line">            ),</span><br><span class="line">            CheckedPopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              checked: _checkedTitle == <span class="string">'Checked Three'</span>,</span><br><span class="line">              value: <span class="string">'Checked Three'</span>,</span><br><span class="line">              child: Text(<span class="string">"Check Three"</span>),</span><br><span class="line">            ),</span><br><span class="line">            CheckedPopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              checked: _checkedTitle == <span class="string">'Checked Four'</span>,</span><br><span class="line">              value: <span class="string">'Checked Four'</span>,</span><br><span class="line">              child: Text(<span class="string">"Check Four"</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">      onSelected: (<span class="built_in">String</span> value) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          _checkedTitle = value;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// 4. PopupMenuDivider</span></span><br><span class="line">  <span class="comment">///  PopupMenuDivider 是一条水平分割线，注意数组要使用父类 PopupMenuEntry，配合其他 item 样式共同使用。</span></span><br><span class="line">  <span class="comment">///  PopupMenuDivider 可以调整高度，但无法调整颜色，有需要的话可以进行自定义。</span></span><br><span class="line">  Widget _popupMenuDivider() &#123;</span><br><span class="line">    <span class="keyword">return</span> PopupMenuButton&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">      itemBuilder: (BuildContext context) =&gt; &lt;PopupMenuEntry&lt;<span class="built_in">String</span>&gt;&gt;[</span><br><span class="line">            PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              value: <span class="string">'Item One'</span>,</span><br><span class="line">              child: Text(<span class="string">'Item One'</span>),</span><br><span class="line">            ),</span><br><span class="line">            PopupMenuDivider(</span><br><span class="line">              height: <span class="number">1.0</span>,</span><br><span class="line">            ),</span><br><span class="line">            PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              value: <span class="string">'Item Two'</span>,</span><br><span class="line">              child: Text(<span class="string">'Item Two'</span>),</span><br><span class="line">            ),</span><br><span class="line">            PopupMenuDivider(</span><br><span class="line">              height: <span class="number">4.0</span>,</span><br><span class="line">            ),</span><br><span class="line">            PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              value: <span class="string">'Item Three'</span>,</span><br><span class="line">              child: Text(<span class="string">'Item Three'</span>),</span><br><span class="line">            ),</span><br><span class="line">            PopupMenuDivider(</span><br><span class="line">              height: <span class="number">2.0</span>,</span><br><span class="line">            ),</span><br><span class="line">            PopupMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              value: <span class="string">'Item Four'</span>,</span><br><span class="line">              child: Text(<span class="string">'Item Four'</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">      child: Text(<span class="string">"PopupMenuDivider"</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// 5. showMenu</span></span><br><span class="line">  Widget _showMenu(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">"// TODO showMenu"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;弹出式菜单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="Widget" scheme="http://yoursite.com/categories/Flutter/Widget/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>BottomNavigationBar</title>
    <link href="http://yoursite.com/2019/02/25/flutter/widget/18_Material_BottomNavigationBar/"/>
    <id>http://yoursite.com/2019/02/25/flutter/widget/18_Material_BottomNavigationBar/</id>
    <published>2019-02-25T03:54:00.000Z</published>
    <updated>2019-10-02T11:51:22.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>底部导航是常见的APP布局方式，实际上我自己常用的app都是底部导航的</p></blockquote><p>##相关属性</p><h3 id="BottomNavigationBar"><a href="#BottomNavigationBar" class="headerlink" title="BottomNavigationBar"></a>BottomNavigationBar</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>items</td><td>BottomNavigationBarItem 列表，包含了导航栏中的按钮</td></tr><tr><td>currentIndex</td><td>当前所高亮的按钮index</td></tr><tr><td>type</td><td>BottomNavigationBarType 中定义的类型，有 fixed 和 shifting 两种类型</td></tr><tr><td>fixedColor</td><td>如果 type 类型为 fixed，则通过 fixedColor 设置选中 item 的颜色</td></tr><tr><td>iconSize</td><td>BottomNavigationBarItem 中 icon 的大小</td></tr><tr><td>### BottomNavigationBarItem</td><td></td></tr><tr><td>属性</td><td>说明</td></tr><tr><td>—————</td><td>————————</td></tr><tr><td>icon</td><td>图标 widget，一般为 Icon</td></tr><tr><td>title</td><td>标题 widget，一般为 Text</td></tr><tr><td>backgroundColor</td><td>item 的背景颜色</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BottomNavigationBarMaterial</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; _BottomNavigationBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BottomNavigationBar</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BottomNavigationBarMaterial</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _selectIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">"BottomNavigationBar"</span>),</span><br><span class="line">        ),</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              title: Text(</span><br><span class="line">                <span class="string">'首页'</span>,</span><br><span class="line">              ),</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.home,</span><br><span class="line">                color: Colors.black,</span><br><span class="line">              ),</span><br><span class="line">              activeIcon: Icon(</span><br><span class="line">                Icons.home,</span><br><span class="line">                color: Colors.pinkAccent,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              title: Text(</span><br><span class="line">                <span class="string">'通讯录'</span>,</span><br><span class="line">              ),</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.perm_contact_calendar,</span><br><span class="line">                color: Colors.black,</span><br><span class="line">              ),</span><br><span class="line">              activeIcon: Icon(</span><br><span class="line">                Icons.perm_contact_calendar,</span><br><span class="line">                color: Colors.pinkAccent,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              title: Text(</span><br><span class="line">                <span class="string">'新闻'</span>,</span><br><span class="line">              ),</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.fiber_new,</span><br><span class="line">                color: Colors.black,</span><br><span class="line">              ),</span><br><span class="line">              activeIcon: Icon(</span><br><span class="line">                Icons.fiber_new,</span><br><span class="line">                color: Colors.pinkAccent,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              title: Text(</span><br><span class="line">                <span class="string">'我'</span>,</span><br><span class="line">              ),</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.person_pin,</span><br><span class="line">                color: Colors.black,</span><br><span class="line">              ),</span><br><span class="line">              activeIcon: Icon(</span><br><span class="line">                Icons.person_pin,</span><br><span class="line">                color: Colors.pinkAccent,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">          <span class="comment">// icon大小</span></span><br><span class="line">          iconSize: <span class="number">24</span>,</span><br><span class="line">          <span class="comment">// 默认选中第几个</span></span><br><span class="line">          currentIndex: _selectIndex,</span><br><span class="line">          <span class="comment">// 选中变化回调</span></span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              _selectIndex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// type=BottomNavigationBarType.fixed时选中字体的颜色</span></span><br><span class="line">          fixedColor: Colors.pinkAccent,</span><br><span class="line">          type: BottomNavigationBarType.fixed,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="img/bottomNavigationBarDemo.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;底部导航是常见的APP布局方式，实际上我自己常用的app都是底部导航的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
      <category term="Widget" scheme="http://yoursite.com/categories/Flutter/Widget/"/>
    
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
</feed>
