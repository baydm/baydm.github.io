{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/archives/index.md","path":"archives/index.md","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/apple-touch-icon.png","hash":"fbd2744aedd23c6addea809a9e5e7cbb3306e7b9","modified":1569822379618},{"_id":"source/favicon.ico","hash":"92d61ec769765f2fb7bc1882c2c3b18931ac40f2","modified":1569822262504},{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1569824776810},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1569824776812},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1569824776813},{"_id":"themes/maupassant/README.md","hash":"4e402501b89720f18ffbfce4203663c79b3c0a7f","modified":1569824776815},{"_id":"themes/maupassant/_config.yml","hash":"82b200e5f516ba16800daa74bdec1bcd2a24848a","modified":1569990727259},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1569824776880},{"_id":"source/about/index.md","hash":"2f2ddc1e0c36f8dfc248834e3f37083ed8836147","modified":1569832245280},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1569824776820},{"_id":"themes/maupassant/languages/en.yml","hash":"518beaa8538a772ca697122264d667059797e458","modified":1569824776822},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1569824776824},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1569824776825},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1569824776827},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1569824776828},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"a1a9888b6cd0fd3dc45ffed3490f4ca8ce1abfd7","modified":1569824776831},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"34dba7ac67aeb316f629ca73e546fa143cc362d5","modified":1569824776833},{"_id":"themes/maupassant/layout/archive.pug","hash":"05f751cb766616ff96ff22ad0790d9cd28777270","modified":1569824776865},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1569824776867},{"_id":"themes/maupassant/layout/base.pug","hash":"7451a590db6943edc099dc0e13b317c38686e8fc","modified":1569824776869},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1569824776870},{"_id":"themes/maupassant/layout/page.pug","hash":"a21e638d5459120d88e45e8f18a23dc072d9ca07","modified":1569824776872},{"_id":"themes/maupassant/layout/post.pug","hash":"faa84d65681da6f4697f2b3aec1e27f615569f7a","modified":1569834254736},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1569824776875},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"4c8923bd7fe2a6d413cde7945ac3c34eeef9942b","modified":1569824776877},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1569824776878},{"_id":"source/_posts/git/Git远程操作详解.md","hash":"b76d1181b8ea588646fc65ba6122fc3d4964088d","modified":1570005738966},{"_id":"source/_posts/hexo/hexo配置.md","hash":"1116a8a4096f128a34c65816ca56aaf37a3f3fc8","modified":1570005686962},{"_id":"source/_posts/hexo/利用Hexo+GitHub搭建个人博客.md","hash":"669da26a1627d07f9b13136382b0cb7808150bf2","modified":1570005714758},{"_id":"source/_posts/ide/Eclipse.ini参数设置.md","hash":"cc883bab830dc8f321a5750de322daaed359c8a4","modified":1570005748543},{"_id":"source/_posts/ide/PHP开发工具ZendStudio10.md","hash":"bc08654f39d3ce648393e37c37fe1352686727bc","modified":1570005751101},{"_id":"source/_posts/mysql/Win8(X64)下MySQL5.6版本安装及配置.md","hash":"0ccdaaed2da693a357670d3728a28aec21f29970","modified":1570005635546},{"_id":"source/_posts/mysql/mysql常用信息函数.md","hash":"c36da120b0b01055d6efe33bba5af2a562513c0c","modified":1570005622980},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"d2ffd7c34c743ec3c01dc1a1ddb8913ffd025f2a","modified":1569824776836},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"78c9a74bc379feca35342e4753a4cc6330a0fe94","modified":1569824776838},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1569824776839},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"235660024477ba0f68dacbbde12492280f82242a","modified":1569824776841},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1569824776843},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1569824776846},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1569824776844},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1569824776848},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1569824776850},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1569824776851},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1569824776853},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"6fb1d8ee09cfc4fd31e8ae53736e4f479d45e31e","modified":1569824776854},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1569824776857},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1569824776857},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1569824776859},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1569824776860},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1569824776862},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1569824776863},{"_id":"themes/maupassant/source/css/donate.css","hash":"ca39d14a598e1de5c51db4170ceb399c6a7131fe","modified":1569824776885},{"_id":"themes/maupassant/source/archives/index.md","hash":"f6247f6b31fd4fa7723b05264d3757fbffb70e4f","modified":1569824968622},{"_id":"themes/maupassant/source/css/style.scss","hash":"ee0800852fc68c82821b7a7c7a77e933fb00d157","modified":1569824776888},{"_id":"themes/maupassant/source/css/default.css","hash":"b41d95120f9e64fd4530ae00ceaef09c7ea20818","modified":1569824776884},{"_id":"themes/maupassant/source/donate/index.html","hash":"72e48cbc939df9e4f963ebf570e0181e129a51c5","modified":1569824776890},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1569824776893},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1569824776895},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1569824776897},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1569824776899},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1569824776902},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1569824776901},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1569824776905},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1569824776907},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1569824776908},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1569824776911},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1569824776913},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1569824776914},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1569824776920},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1569824776921},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1569824776924},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1569824776925},{"_id":"source/_posts/android/base/Android应用的基本组件.md","hash":"6571919c912a6b1478d8c93540f5f3ba82803da1","modified":1570005662792},{"_id":"source/_posts/android/base/android发展史及系统架构.md","hash":"dc4df0788593bba9a10994c6706a2d1d5bd9abb9","modified":1570005659303},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1569824776918},{"_id":"public/atom.xml","hash":"e8526f7d397031ba2eff463e3b59aaef8ffa3914","modified":1570005794407},{"_id":"public/archives/index.html","hash":"61b66ed8ae2d770dea350ed83d9a0cc90c0f2d0c","modified":1570005794606},{"_id":"public/about/index.html","hash":"067677ee18cd8bb9961c58e83b36b42ba926ff68","modified":1570005794607},{"_id":"public/2019/09/30/hexo/hexo配置/index.html","hash":"c92d52d3bf14ea2738de27e3d7ca70f2689fc8de","modified":1570005794617},{"_id":"public/2017/01/12/mysql/mysql常用信息函数/index.html","hash":"7422ce54c382024e795ce45423f995165e6c53f2","modified":1570005794618},{"_id":"public/2019/09/30/hexo/利用Hexo+GitHub搭建个人博客/index.html","hash":"aeade3dac974bc67fd45466aaa94fd4bd0c7f8fc","modified":1570005794618},{"_id":"public/2015/04/29/android/base/Android应用的基本组件/index.html","hash":"342e21236fc122fc489be07bd13457fe54f65998","modified":1570005794618},{"_id":"public/2016/01/11/git/Git远程操作详解/index.html","hash":"7a8636074ccc5469fb7c2e9c10fc3e1e2f72613b","modified":1570005794618},{"_id":"public/2015/04/17/ide/PHP开发工具ZendStudio10/index.html","hash":"92cc295d5a15b1cce0b3639b58cb48c0ab9b03e3","modified":1570005794630},{"_id":"public/2015/04/16/ide/Eclipse.ini参数设置/index.html","hash":"3bb6eb016359475ca704d4f97ab88f627dfdb524","modified":1570005794630},{"_id":"public/categories/hexo/index.html","hash":"e5e4e7dab761a319b14e1165599a2cc1a3bfecc6","modified":1570005794630},{"_id":"public/categories/MySql/index.html","hash":"f5820a7bcb0d049d36f9076b8c7b29eaacd84a22","modified":1570005794630},{"_id":"public/categories/IDE/index.html","hash":"6c828d4b87afc2575769add93afcc9786e37620d","modified":1570005794630},{"_id":"public/categories/Android基础/index.html","hash":"b1aa37843b927f8949b1907c54b7b98898d947b0","modified":1570005794631},{"_id":"public/archives/2015/index.html","hash":"59f0360cd7bc4f949f71a3742c35d39f361d0132","modified":1570005794631},{"_id":"public/archives/2015/04/index.html","hash":"59f0360cd7bc4f949f71a3742c35d39f361d0132","modified":1570005794631},{"_id":"public/archives/2016/01/index.html","hash":"3fe075ac9f85638546ca0dbf7611dc7f1dd75ab4","modified":1570005794631},{"_id":"public/archives/2016/index.html","hash":"3fe075ac9f85638546ca0dbf7611dc7f1dd75ab4","modified":1570005794631},{"_id":"public/archives/2017/index.html","hash":"7f41f207fd355a9156ed20a7808eb5aad66fa5a7","modified":1570005794631},{"_id":"public/archives/2017/01/index.html","hash":"7f41f207fd355a9156ed20a7808eb5aad66fa5a7","modified":1570005794632},{"_id":"public/archives/2019/09/index.html","hash":"fd844f8bb73c7f2e1e7e1c782949588d9fd16aee","modified":1570005794632},{"_id":"public/archives/2019/index.html","hash":"fd844f8bb73c7f2e1e7e1c782949588d9fd16aee","modified":1570005794632},{"_id":"public/tags/hexo/index.html","hash":"e5e4e7dab761a319b14e1165599a2cc1a3bfecc6","modified":1570005794632},{"_id":"public/tags/php/index.html","hash":"769e78b9ac5ac2cf0f69d2587e997825463e422a","modified":1570005794632},{"_id":"public/tags/mysql/index.html","hash":"dc3421efe228548eacfdb85bc13923aaf3a712f9","modified":1570005794632},{"_id":"public/tags/数据库/index.html","hash":"04de30e086d7b066c341a1a76a902100aef2d228","modified":1570005794633},{"_id":"public/tags/eclipse/index.html","hash":"61f53c5d89093bc9b7384b2e378ecf25d47d45d7","modified":1570005794633},{"_id":"public/tags/git/index.html","hash":"a21f0455e52fad2de734f8b5d8385bee96119f9b","modified":1570005794633},{"_id":"public/tags/Android/index.html","hash":"9e83dae734afd2f550b112e58b376ad23f899b4c","modified":1570005794633},{"_id":"public/2015/04/29/android/base/android发展史及系统架构/index.html","hash":"6f763d5db50cb18460bb9bab287d820b2dbad33b","modified":1570005794633},{"_id":"public/2015/04/16/mysql/Win8(X64)下MySQL5.6版本安装及配置/index.html","hash":"e0e5c67b9dd711fe4582a301f7555c5afea43234","modified":1570005794633},{"_id":"public/index.html","hash":"8b3454fa1dbea56376681300e0f60545c48ecabb","modified":1570005794633},{"_id":"public/favicon.ico","hash":"92d61ec769765f2fb7bc1882c2c3b18931ac40f2","modified":1570005794634},{"_id":"public/apple-touch-icon.png","hash":"fbd2744aedd23c6addea809a9e5e7cbb3306e7b9","modified":1570005794634},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1570005794634},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1570005794634},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1570005794634},{"_id":"public/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1570005794635},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1570005794635},{"_id":"public/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1570005794635},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1570005794635},{"_id":"public/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1570005794635},{"_id":"public/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1570005794636},{"_id":"public/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1570005794654},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1570005794655},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1570005794655},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1570005794655},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1570005794656},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1570005794656},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1570005794656},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1570005794656},{"_id":"public/donate/index.html","hash":"7374db74b42ed03f138d25f10f8d47e5aab4efec","modified":1570005794656},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1570005794669},{"_id":"public/css/style.css","hash":"9cffbc12bd2b40733e64d8de9c9e9403cd8fd581","modified":1570005794785},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1570005794867}],"Category":[{"name":"hexo","_id":"ck190wv440003rowkudic9zfh"},{"name":"IDE","_id":"ck190wv4n0008rowk0jffbkdm"},{"name":"MySql","_id":"ck190wvcf000srowk4i34pfsn"},{"name":"Android基础","_id":"ck190wvcv0010rowkwavptf7f"}],"Data":[],"Page":[{"title":"一个理想主义者","date":"2019-09-30T07:22:57.000Z","_content":"\n随便写写，后面再补充吧","source":"about/index.md","raw":"title: 一个理想主义者\ndate: 2019-09-30 15:22:57\n---\n\n随便写写，后面再补充吧","updated":"2019-09-30T08:30:45.280Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck190wtav0000rowkzx52f43q","content":"<p>随便写写，后面再补充吧</p>\n","site":{"data":{}},"excerpt":"","more":"<p>随便写写，后面再补充吧</p>\n"}],"Post":[{"title":"利用Hexo+GitHub搭建个人博客(一)","author":"JsonYe","date":"2019-09-30T05:55:00.000Z","_content":"\n## 前言\n很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。`hexo`让我的想法变成了现实。\n下面就简单说一下整体打搭建流程。\n\n## 搭建步骤：\n> 最开始以为要把hexo安装到服务器上，后来了解后恍然大悟，他是在本地安装的，然后将我们写的markdown文件转换为静态网站文件，放到github上，利用github来作为服务器的。\n\n 1. 安装git bash。\n 2. 安装npm。\n 3. 安装NodeJs\n 4. 申请github账户，并创建一个仓库，命名规范为  \"账户名\".github.io。\n 5. 创建SSH并添加到github上。\n 6. 安装hexo。\n 7. 部署项目，本地测试。\n 8. 上传到github上。\n \n到这一步，博客就搭建好了，域名可选择性进行关联。后续可以设置主题、添加RSS、设置评论、以及写文章。具体可参考[官方文档](https://hexo.io/zh-cn/docs/writing.html)","source":"_posts/hexo/利用Hexo+GitHub搭建个人博客.md","raw":"title: 利用Hexo+GitHub搭建个人博客(一)\ncategories:\n  - hexo\ntags:\n  - hexo\nauthor: JsonYe\ndate: 2019-09-30 13:55:00\n---\n\n## 前言\n很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。`hexo`让我的想法变成了现实。\n下面就简单说一下整体打搭建流程。\n\n## 搭建步骤：\n> 最开始以为要把hexo安装到服务器上，后来了解后恍然大悟，他是在本地安装的，然后将我们写的markdown文件转换为静态网站文件，放到github上，利用github来作为服务器的。\n\n 1. 安装git bash。\n 2. 安装npm。\n 3. 安装NodeJs\n 4. 申请github账户，并创建一个仓库，命名规范为  \"账户名\".github.io。\n 5. 创建SSH并添加到github上。\n 6. 安装hexo。\n 7. 部署项目，本地测试。\n 8. 上传到github上。\n \n到这一步，博客就搭建好了，域名可选择性进行关联。后续可以设置主题、添加RSS、设置评论、以及写文章。具体可参考[官方文档](https://hexo.io/zh-cn/docs/writing.html)","slug":"hexo/利用Hexo+GitHub搭建个人博客","published":1,"updated":"2019-10-02T08:41:54.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck190wv3g0001rowk9ki0usxi","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。<code>hexo</code>让我的想法变成了现实。<br>下面就简单说一下整体打搭建流程。</p>\n<h2 id=\"搭建步骤：\"><a href=\"#搭建步骤：\" class=\"headerlink\" title=\"搭建步骤：\"></a>搭建步骤：</h2><blockquote>\n<p>最开始以为要把hexo安装到服务器上，后来了解后恍然大悟，他是在本地安装的，然后将我们写的markdown文件转换为静态网站文件，放到github上，利用github来作为服务器的。</p>\n</blockquote>\n<ol>\n<li>安装git bash。</li>\n<li>安装npm。</li>\n<li>安装NodeJs</li>\n<li>申请github账户，并创建一个仓库，命名规范为  “账户名”.github.io。</li>\n<li>创建SSH并添加到github上。</li>\n<li>安装hexo。</li>\n<li>部署项目，本地测试。</li>\n<li>上传到github上。</li>\n</ol>\n<p>到这一步，博客就搭建好了，域名可选择性进行关联。后续可以设置主题、添加RSS、设置评论、以及写文章。具体可参考<a href=\"https://hexo.io/zh-cn/docs/writing.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。<code>hexo</code>让我的想法变成了现实。<br>下面就简单说一下整体打搭建流程。</p>\n<h2 id=\"搭建步骤：\"><a href=\"#搭建步骤：\" class=\"headerlink\" title=\"搭建步骤：\"></a>搭建步骤：</h2><blockquote>\n<p>最开始以为要把hexo安装到服务器上，后来了解后恍然大悟，他是在本地安装的，然后将我们写的markdown文件转换为静态网站文件，放到github上，利用github来作为服务器的。</p>\n</blockquote>\n<ol>\n<li>安装git bash。</li>\n<li>安装npm。</li>\n<li>安装NodeJs</li>\n<li>申请github账户，并创建一个仓库，命名规范为  “账户名”.github.io。</li>\n<li>创建SSH并添加到github上。</li>\n<li>安装hexo。</li>\n<li>部署项目，本地测试。</li>\n<li>上传到github上。</li>\n</ol>\n<p>到这一步，博客就搭建好了，域名可选择性进行关联。后续可以设置主题、添加RSS、设置评论、以及写文章。具体可参考<a href=\"https://hexo.io/zh-cn/docs/writing.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n"},{"title":"PHP开发工具ZendStudio10","author":"JsonYe","copyright":true,"comments":1,"toc":true,"date":"2015-04-17T08:59:00.000Z","_content":"## 一、zend studio 10破解/汉化，参考文档\n\n[http://blog.csdn.net/qq1355541448/article/details/16807429](http://blog.csdn.net/qq1355541448/article/details/16807429)\n\n## 二、安装Composer\n\n去到官网下载[https://getcomposer.org/download/](https://getcomposer.org/download/)\n\n[![image](http://static.oschina.net/uploads/img/201504/17120800_gpew.png \"image\")](http://static.oschina.net/uploads/img/201504/17120759_Znd7.png)\n\n## 常见问题\n### windows下Composer因php_openssl扩展缺失而安装失败。\n\nComposer( https://getcomposer.org/ )是PHP下的一个依赖管理工具。你可以在你的项目中声明你所需要用到的类库，然后Composer会在项目中为你安装它们。如果你了解Node的 npm 或者Ruby的 Bundler ，就理解它是做什么的了，但是，它不是包管理器。\n\n在Windows的Wamp环境下安装Composer(注：Composer要求PHP版本在5.3.2+)，你可能会遇到这种安装失败的情况：出错信息是\n\n\n```\n \"The openssl extension is missing, which will reduce the security and stability of Composer. If possible you should enable it or recompile php with --with-openssl\" ，大意就是你的PHP缺少openssl扩展。\n\n你可能会去屏幕右下角的Wamp的控制台，去加载php的openssl扩展，或者在php.ini中去掉 extension=php_openssl.dll 这一行开头的注释，然后重启server，结果发现还是不行。\n\n正确的做法是在php的安装目录比如说C:\\wamp\\bin\\php\\php5.3.3\\中，找到找个目录下的php.ini文件，然后去掉 extension=php_openssl.dll 这一行开头的注释，之后就可以顺利安装Composer了。\n\n你可以发现上面出现了两个php.ini，是的Wamp在Apache和在CLI(命令行)模式下使用了不同的php.ini文件，当你在WAMP的控制台去启用php_openssl这个扩展，是启用的Apache的，而非CLI。而修改php安装目录中的php.ini配置文件，则可以启用CLI模式下的openssl。\n```\n\n### Win7下运行php Composer出现SSL报错的问题没有安装CA证书导致的！！！[http://my.oschina.net/yearnfar/blog/346727](http://my.oschina.net/yearnfar/blog/346727)\n\nCA证书下载地址：http://curl.haxx.se/docs/caextract.html\n\n然后修改php.ini文件\n\n```\nopenssl.cafile= D:/wamp/php/verify/cacert.pem\n```","source":"_posts/ide/PHP开发工具ZendStudio10.md","raw":"---\ntitle: PHP开发工具ZendStudio10\nauthor: JsonYe\ntags:\n  - php\ncategories:\n  - IDE \ncopyright: true\ncomments: true\ntoc: true\ndate: 2015-04-17 16:59:00\n---\n## 一、zend studio 10破解/汉化，参考文档\n\n[http://blog.csdn.net/qq1355541448/article/details/16807429](http://blog.csdn.net/qq1355541448/article/details/16807429)\n\n## 二、安装Composer\n\n去到官网下载[https://getcomposer.org/download/](https://getcomposer.org/download/)\n\n[![image](http://static.oschina.net/uploads/img/201504/17120800_gpew.png \"image\")](http://static.oschina.net/uploads/img/201504/17120759_Znd7.png)\n\n## 常见问题\n### windows下Composer因php_openssl扩展缺失而安装失败。\n\nComposer( https://getcomposer.org/ )是PHP下的一个依赖管理工具。你可以在你的项目中声明你所需要用到的类库，然后Composer会在项目中为你安装它们。如果你了解Node的 npm 或者Ruby的 Bundler ，就理解它是做什么的了，但是，它不是包管理器。\n\n在Windows的Wamp环境下安装Composer(注：Composer要求PHP版本在5.3.2+)，你可能会遇到这种安装失败的情况：出错信息是\n\n\n```\n \"The openssl extension is missing, which will reduce the security and stability of Composer. If possible you should enable it or recompile php with --with-openssl\" ，大意就是你的PHP缺少openssl扩展。\n\n你可能会去屏幕右下角的Wamp的控制台，去加载php的openssl扩展，或者在php.ini中去掉 extension=php_openssl.dll 这一行开头的注释，然后重启server，结果发现还是不行。\n\n正确的做法是在php的安装目录比如说C:\\wamp\\bin\\php\\php5.3.3\\中，找到找个目录下的php.ini文件，然后去掉 extension=php_openssl.dll 这一行开头的注释，之后就可以顺利安装Composer了。\n\n你可以发现上面出现了两个php.ini，是的Wamp在Apache和在CLI(命令行)模式下使用了不同的php.ini文件，当你在WAMP的控制台去启用php_openssl这个扩展，是启用的Apache的，而非CLI。而修改php安装目录中的php.ini配置文件，则可以启用CLI模式下的openssl。\n```\n\n### Win7下运行php Composer出现SSL报错的问题没有安装CA证书导致的！！！[http://my.oschina.net/yearnfar/blog/346727](http://my.oschina.net/yearnfar/blog/346727)\n\nCA证书下载地址：http://curl.haxx.se/docs/caextract.html\n\n然后修改php.ini文件\n\n```\nopenssl.cafile= D:/wamp/php/verify/cacert.pem\n```","slug":"ide/PHP开发工具ZendStudio10","published":1,"updated":"2019-10-02T08:42:31.101Z","layout":"post","photos":[],"link":"","_id":"ck190wv3z0002rowkarygo8i7","content":"<h2 id=\"一、zend-studio-10破解-汉化，参考文档\"><a href=\"#一、zend-studio-10破解-汉化，参考文档\" class=\"headerlink\" title=\"一、zend studio 10破解/汉化，参考文档\"></a>一、zend studio 10破解/汉化，参考文档</h2><p><a href=\"http://blog.csdn.net/qq1355541448/article/details/16807429\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq1355541448/article/details/16807429</a></p>\n<h2 id=\"二、安装Composer\"><a href=\"#二、安装Composer\" class=\"headerlink\" title=\"二、安装Composer\"></a>二、安装Composer</h2><p>去到官网下载<a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"noopener\">https://getcomposer.org/download/</a></p>\n<p><a href=\"http://static.oschina.net/uploads/img/201504/17120759_Znd7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/17120800_gpew.png\" alt=\"image\" title=\"image\"></a></p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"windows下Composer因php-openssl扩展缺失而安装失败。\"><a href=\"#windows下Composer因php-openssl扩展缺失而安装失败。\" class=\"headerlink\" title=\"windows下Composer因php_openssl扩展缺失而安装失败。\"></a>windows下Composer因php_openssl扩展缺失而安装失败。</h3><p>Composer( <a href=\"https://getcomposer.org/\" target=\"_blank\" rel=\"noopener\">https://getcomposer.org/</a> )是PHP下的一个依赖管理工具。你可以在你的项目中声明你所需要用到的类库，然后Composer会在项目中为你安装它们。如果你了解Node的 npm 或者Ruby的 Bundler ，就理解它是做什么的了，但是，它不是包管理器。</p>\n<p>在Windows的Wamp环境下安装Composer(注：Composer要求PHP版本在5.3.2+)，你可能会遇到这种安装失败的情况：出错信息是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &quot;The openssl extension is missing, which will reduce the security and stability of Composer. If possible you should enable it or recompile php with --with-openssl&quot; ，大意就是你的PHP缺少openssl扩展。</span><br><span class=\"line\"></span><br><span class=\"line\">你可能会去屏幕右下角的Wamp的控制台，去加载php的openssl扩展，或者在php.ini中去掉 extension=php_openssl.dll 这一行开头的注释，然后重启server，结果发现还是不行。</span><br><span class=\"line\"></span><br><span class=\"line\">正确的做法是在php的安装目录比如说C:\\wamp\\bin\\php\\php5.3.3\\中，找到找个目录下的php.ini文件，然后去掉 extension=php_openssl.dll 这一行开头的注释，之后就可以顺利安装Composer了。</span><br><span class=\"line\"></span><br><span class=\"line\">你可以发现上面出现了两个php.ini，是的Wamp在Apache和在CLI(命令行)模式下使用了不同的php.ini文件，当你在WAMP的控制台去启用php_openssl这个扩展，是启用的Apache的，而非CLI。而修改php安装目录中的php.ini配置文件，则可以启用CLI模式下的openssl。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Win7下运行php-Composer出现SSL报错的问题没有安装CA证书导致的！！！http-my-oschina-net-yearnfar-blog-346727\"><a href=\"#Win7下运行php-Composer出现SSL报错的问题没有安装CA证书导致的！！！http-my-oschina-net-yearnfar-blog-346727\" class=\"headerlink\" title=\"Win7下运行php Composer出现SSL报错的问题没有安装CA证书导致的！！！http://my.oschina.net/yearnfar/blog/346727\"></a>Win7下运行php Composer出现SSL报错的问题没有安装CA证书导致的！！！<a href=\"http://my.oschina.net/yearnfar/blog/346727\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/yearnfar/blog/346727</a></h3><p>CA证书下载地址：<a href=\"http://curl.haxx.se/docs/caextract.html\" target=\"_blank\" rel=\"noopener\">http://curl.haxx.se/docs/caextract.html</a></p>\n<p>然后修改php.ini文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl.cafile= D:/wamp/php/verify/cacert.pem</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、zend-studio-10破解-汉化，参考文档\"><a href=\"#一、zend-studio-10破解-汉化，参考文档\" class=\"headerlink\" title=\"一、zend studio 10破解/汉化，参考文档\"></a>一、zend studio 10破解/汉化，参考文档</h2><p><a href=\"http://blog.csdn.net/qq1355541448/article/details/16807429\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq1355541448/article/details/16807429</a></p>\n<h2 id=\"二、安装Composer\"><a href=\"#二、安装Composer\" class=\"headerlink\" title=\"二、安装Composer\"></a>二、安装Composer</h2><p>去到官网下载<a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"noopener\">https://getcomposer.org/download/</a></p>\n<p><a href=\"http://static.oschina.net/uploads/img/201504/17120759_Znd7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/17120800_gpew.png\" alt=\"image\" title=\"image\"></a></p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"windows下Composer因php-openssl扩展缺失而安装失败。\"><a href=\"#windows下Composer因php-openssl扩展缺失而安装失败。\" class=\"headerlink\" title=\"windows下Composer因php_openssl扩展缺失而安装失败。\"></a>windows下Composer因php_openssl扩展缺失而安装失败。</h3><p>Composer( <a href=\"https://getcomposer.org/\" target=\"_blank\" rel=\"noopener\">https://getcomposer.org/</a> )是PHP下的一个依赖管理工具。你可以在你的项目中声明你所需要用到的类库，然后Composer会在项目中为你安装它们。如果你了解Node的 npm 或者Ruby的 Bundler ，就理解它是做什么的了，但是，它不是包管理器。</p>\n<p>在Windows的Wamp环境下安装Composer(注：Composer要求PHP版本在5.3.2+)，你可能会遇到这种安装失败的情况：出错信息是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &quot;The openssl extension is missing, which will reduce the security and stability of Composer. If possible you should enable it or recompile php with --with-openssl&quot; ，大意就是你的PHP缺少openssl扩展。</span><br><span class=\"line\"></span><br><span class=\"line\">你可能会去屏幕右下角的Wamp的控制台，去加载php的openssl扩展，或者在php.ini中去掉 extension=php_openssl.dll 这一行开头的注释，然后重启server，结果发现还是不行。</span><br><span class=\"line\"></span><br><span class=\"line\">正确的做法是在php的安装目录比如说C:\\wamp\\bin\\php\\php5.3.3\\中，找到找个目录下的php.ini文件，然后去掉 extension=php_openssl.dll 这一行开头的注释，之后就可以顺利安装Composer了。</span><br><span class=\"line\"></span><br><span class=\"line\">你可以发现上面出现了两个php.ini，是的Wamp在Apache和在CLI(命令行)模式下使用了不同的php.ini文件，当你在WAMP的控制台去启用php_openssl这个扩展，是启用的Apache的，而非CLI。而修改php安装目录中的php.ini配置文件，则可以启用CLI模式下的openssl。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Win7下运行php-Composer出现SSL报错的问题没有安装CA证书导致的！！！http-my-oschina-net-yearnfar-blog-346727\"><a href=\"#Win7下运行php-Composer出现SSL报错的问题没有安装CA证书导致的！！！http-my-oschina-net-yearnfar-blog-346727\" class=\"headerlink\" title=\"Win7下运行php Composer出现SSL报错的问题没有安装CA证书导致的！！！http://my.oschina.net/yearnfar/blog/346727\"></a>Win7下运行php Composer出现SSL报错的问题没有安装CA证书导致的！！！<a href=\"http://my.oschina.net/yearnfar/blog/346727\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/yearnfar/blog/346727</a></h3><p>CA证书下载地址：<a href=\"http://curl.haxx.se/docs/caextract.html\" target=\"_blank\" rel=\"noopener\">http://curl.haxx.se/docs/caextract.html</a></p>\n<p>然后修改php.ini文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl.cafile= D:/wamp/php/verify/cacert.pem</span><br></pre></td></tr></table></figure>"},{"title":"Win8(X64)下MySQL5.6版本安装及配置","author":"JsonYe","copyright":true,"comments":1,"toc":true,"date":"2015-04-16T08:59:00.000Z","_content":"\n### 步骤1：双击MySQL安装程序\n\n官方网站http://dev.mysql.com/downloads/下载该软件\n\n### 步骤2：“Install MySQL Products” 文字，会弹出的用户许可证协议窗口，安装类型设置窗口,安装类型界面各设置项含义:\n\n> Developer Default 默认安装类型\n> \n> Server only 仅作为服务器\n> \n> Client only 仅作为客户端\n> \n> Full 完全安装类型\n> \n> Custom 用户自定义安装类型\n> \n> 根据自己的情况选择安装，我们这里以自定义安装为例：\n> \n> [![image](http://static.oschina.net/uploads/img/201504/16165918_xBtP.png \"image\")](http://static.oschina.net/uploads/img/201504/16165918_FGf6.png)\n\n### 步骤3：选择安装内容及安装目录：\n\n> [![image](http://static.oschina.net/uploads/img/201504/16165918_xZtq.png \"image\")](http://static.oschina.net/uploads/img/201504/16165918_0GLM.png) [![image](http://static.oschina.net/uploads/img/201504/16165919_WpTX.png \"image\")](http://static.oschina.net/uploads/img/201504/16165919_YIKU.png) [![image](http://static.oschina.net/uploads/img/201504/16165919_0DmF.png \"image\")](http://static.oschina.net/uploads/img/201504/16165919_vrIa.png)\n\n### 步骤4：选择类型\n\n> Developer Machine(开发机器)，个人用桌面工作站，占用最少的系统资源\n> \n> Server Machine（服务器），MySQL服务器可以同其它应用程序一起运行，例如FTP、email和web服务器。MySQL服务器配置成使用适当比例的系统资源。\n> \n> Dedicated MySQL Server Machine（专用MySQL服务器）：该选项代表只运行MySQL服务的服务器。假定运行没有运行其它应用程序。MySQL服务器配置成使用所有可用系统资源。\n\n根据自己情况选择即可，一般WEB服务器选择第二个，Server Machine即可！个人电脑安装选择第一个，Developer Machine比较好。\n\n[![image](http://static.oschina.net/uploads/img/201504/16165920_8GEz.png \"image\")](http://static.oschina.net/uploads/img/201504/16165919_d9x7.png)\n\n### 步骤5：配置密码\n\n[![image](http://static.oschina.net/uploads/img/201504/16165920_c01w.png \"image\")](http://static.oschina.net/uploads/img/201504/16165920_a2cR.png)\n\n对应的界面中，我们需要设置root用户的密码，在“MySQL Root password”(输入新密码)和“Repeat Password”（确认）两个编辑框内输入期望的密码。也可以单击下面的【Add User】按钮另行添加新的用户。(**注:Current Root Password:为空；如果输入密码了在后面安装会报错**)\n\n### 步骤6：**设置Windows Service Name<可默认>，此名为启动数据库服务名，要记住。**\n\n[![image](http://static.oschina.net/uploads/img/201504/16165921_A9pr.png \"image\")](http://static.oschina.net/uploads/img/201504/16165921_kz1L.png)\n\n### 步骤7：验证服务：\n\n在开始菜单栏->**附件->**右键命令提示符->以管理员身份运行:\n\n```\nnet start MySQL56 为启动数据库服务命令；\n```\n\n```\nnet stop MySQL56  为停止数据库服务命令。\n```\n\n[![image](http://static.oschina.net/uploads/img/201504/16165921_qsYm.png \"image\")](http://static.oschina.net/uploads/img/201504/16165921_IAgd.png)\n\n### 步骤8：连接测试：\n\n进入bin目录，执行mysql -u root -p 回车输入密码\n\n```\nD:\\>cd D:\\Programs\\WAPM\\MySQL\\MySQL Server 5.6\\bin\nD:\\Programs\\WAPM\\MySQL\\MySQL Server 5.6\\bin>mysql -u root -p\nEnter password: ****** Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 1 Server version: 5.6.24-log MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n```","source":"_posts/mysql/Win8(X64)下MySQL5.6版本安装及配置.md","raw":"title: Win8(X64)下MySQL5.6版本安装及配置\nauthor: JsonYe\ntags:\n  - mysql\n  - 数据库\ncategories:\n  - IDE \ncopyright: true\ncomments: true\ntoc: true\ndate: 2015-04-16 16:59:00\n---\n\n### 步骤1：双击MySQL安装程序\n\n官方网站http://dev.mysql.com/downloads/下载该软件\n\n### 步骤2：“Install MySQL Products” 文字，会弹出的用户许可证协议窗口，安装类型设置窗口,安装类型界面各设置项含义:\n\n> Developer Default 默认安装类型\n> \n> Server only 仅作为服务器\n> \n> Client only 仅作为客户端\n> \n> Full 完全安装类型\n> \n> Custom 用户自定义安装类型\n> \n> 根据自己的情况选择安装，我们这里以自定义安装为例：\n> \n> [![image](http://static.oschina.net/uploads/img/201504/16165918_xBtP.png \"image\")](http://static.oschina.net/uploads/img/201504/16165918_FGf6.png)\n\n### 步骤3：选择安装内容及安装目录：\n\n> [![image](http://static.oschina.net/uploads/img/201504/16165918_xZtq.png \"image\")](http://static.oschina.net/uploads/img/201504/16165918_0GLM.png) [![image](http://static.oschina.net/uploads/img/201504/16165919_WpTX.png \"image\")](http://static.oschina.net/uploads/img/201504/16165919_YIKU.png) [![image](http://static.oschina.net/uploads/img/201504/16165919_0DmF.png \"image\")](http://static.oschina.net/uploads/img/201504/16165919_vrIa.png)\n\n### 步骤4：选择类型\n\n> Developer Machine(开发机器)，个人用桌面工作站，占用最少的系统资源\n> \n> Server Machine（服务器），MySQL服务器可以同其它应用程序一起运行，例如FTP、email和web服务器。MySQL服务器配置成使用适当比例的系统资源。\n> \n> Dedicated MySQL Server Machine（专用MySQL服务器）：该选项代表只运行MySQL服务的服务器。假定运行没有运行其它应用程序。MySQL服务器配置成使用所有可用系统资源。\n\n根据自己情况选择即可，一般WEB服务器选择第二个，Server Machine即可！个人电脑安装选择第一个，Developer Machine比较好。\n\n[![image](http://static.oschina.net/uploads/img/201504/16165920_8GEz.png \"image\")](http://static.oschina.net/uploads/img/201504/16165919_d9x7.png)\n\n### 步骤5：配置密码\n\n[![image](http://static.oschina.net/uploads/img/201504/16165920_c01w.png \"image\")](http://static.oschina.net/uploads/img/201504/16165920_a2cR.png)\n\n对应的界面中，我们需要设置root用户的密码，在“MySQL Root password”(输入新密码)和“Repeat Password”（确认）两个编辑框内输入期望的密码。也可以单击下面的【Add User】按钮另行添加新的用户。(**注:Current Root Password:为空；如果输入密码了在后面安装会报错**)\n\n### 步骤6：**设置Windows Service Name<可默认>，此名为启动数据库服务名，要记住。**\n\n[![image](http://static.oschina.net/uploads/img/201504/16165921_A9pr.png \"image\")](http://static.oschina.net/uploads/img/201504/16165921_kz1L.png)\n\n### 步骤7：验证服务：\n\n在开始菜单栏->**附件->**右键命令提示符->以管理员身份运行:\n\n```\nnet start MySQL56 为启动数据库服务命令；\n```\n\n```\nnet stop MySQL56  为停止数据库服务命令。\n```\n\n[![image](http://static.oschina.net/uploads/img/201504/16165921_qsYm.png \"image\")](http://static.oschina.net/uploads/img/201504/16165921_IAgd.png)\n\n### 步骤8：连接测试：\n\n进入bin目录，执行mysql -u root -p 回车输入密码\n\n```\nD:\\>cd D:\\Programs\\WAPM\\MySQL\\MySQL Server 5.6\\bin\nD:\\Programs\\WAPM\\MySQL\\MySQL Server 5.6\\bin>mysql -u root -p\nEnter password: ****** Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 1 Server version: 5.6.24-log MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n```","slug":"mysql/Win8(X64)下MySQL5.6版本安装及配置","published":1,"updated":"2019-10-02T08:40:35.546Z","layout":"post","photos":[],"link":"","_id":"ck190wv4b0005rowkbfgqczaq","content":"<h3 id=\"步骤1：双击MySQL安装程序\"><a href=\"#步骤1：双击MySQL安装程序\" class=\"headerlink\" title=\"步骤1：双击MySQL安装程序\"></a>步骤1：双击MySQL安装程序</h3><p>官方网站<a href=\"http://dev.mysql.com/downloads/下载该软件\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/downloads/下载该软件</a></p>\n<h3 id=\"步骤2：“Install-MySQL-Products”-文字，会弹出的用户许可证协议窗口，安装类型设置窗口-安装类型界面各设置项含义\"><a href=\"#步骤2：“Install-MySQL-Products”-文字，会弹出的用户许可证协议窗口，安装类型设置窗口-安装类型界面各设置项含义\" class=\"headerlink\" title=\"步骤2：“Install MySQL Products” 文字，会弹出的用户许可证协议窗口，安装类型设置窗口,安装类型界面各设置项含义:\"></a>步骤2：“Install MySQL Products” 文字，会弹出的用户许可证协议窗口，安装类型设置窗口,安装类型界面各设置项含义:</h3><blockquote>\n<p>Developer Default 默认安装类型</p>\n<p>Server only 仅作为服务器</p>\n<p>Client only 仅作为客户端</p>\n<p>Full 完全安装类型</p>\n<p>Custom 用户自定义安装类型</p>\n<p>根据自己的情况选择安装，我们这里以自定义安装为例：</p>\n<p><a href=\"http://static.oschina.net/uploads/img/201504/16165918_FGf6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165918_xBtP.png\" alt=\"image\" title=\"image\"></a></p>\n</blockquote>\n<h3 id=\"步骤3：选择安装内容及安装目录：\"><a href=\"#步骤3：选择安装内容及安装目录：\" class=\"headerlink\" title=\"步骤3：选择安装内容及安装目录：\"></a>步骤3：选择安装内容及安装目录：</h3><blockquote>\n<p><a href=\"http://static.oschina.net/uploads/img/201504/16165918_0GLM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165918_xZtq.png\" alt=\"image\" title=\"image\"></a> <a href=\"http://static.oschina.net/uploads/img/201504/16165919_YIKU.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165919_WpTX.png\" alt=\"image\" title=\"image\"></a> <a href=\"http://static.oschina.net/uploads/img/201504/16165919_vrIa.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165919_0DmF.png\" alt=\"image\" title=\"image\"></a></p>\n</blockquote>\n<h3 id=\"步骤4：选择类型\"><a href=\"#步骤4：选择类型\" class=\"headerlink\" title=\"步骤4：选择类型\"></a>步骤4：选择类型</h3><blockquote>\n<p>Developer Machine(开发机器)，个人用桌面工作站，占用最少的系统资源</p>\n<p>Server Machine（服务器），MySQL服务器可以同其它应用程序一起运行，例如FTP、email和web服务器。MySQL服务器配置成使用适当比例的系统资源。</p>\n<p>Dedicated MySQL Server Machine（专用MySQL服务器）：该选项代表只运行MySQL服务的服务器。假定运行没有运行其它应用程序。MySQL服务器配置成使用所有可用系统资源。</p>\n</blockquote>\n<p>根据自己情况选择即可，一般WEB服务器选择第二个，Server Machine即可！个人电脑安装选择第一个，Developer Machine比较好。</p>\n<p><a href=\"http://static.oschina.net/uploads/img/201504/16165919_d9x7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165920_8GEz.png\" alt=\"image\" title=\"image\"></a></p>\n<h3 id=\"步骤5：配置密码\"><a href=\"#步骤5：配置密码\" class=\"headerlink\" title=\"步骤5：配置密码\"></a>步骤5：配置密码</h3><p><a href=\"http://static.oschina.net/uploads/img/201504/16165920_a2cR.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165920_c01w.png\" alt=\"image\" title=\"image\"></a></p>\n<p>对应的界面中，我们需要设置root用户的密码，在“MySQL Root password”(输入新密码)和“Repeat Password”（确认）两个编辑框内输入期望的密码。也可以单击下面的【Add User】按钮另行添加新的用户。(<strong>注:Current Root Password:为空；如果输入密码了在后面安装会报错</strong>)</p>\n<h3 id=\"步骤6：设置Windows-Service-Name-lt-可默认-gt-，此名为启动数据库服务名，要记住。\"><a href=\"#步骤6：设置Windows-Service-Name-lt-可默认-gt-，此名为启动数据库服务名，要记住。\" class=\"headerlink\" title=\"步骤6：设置Windows Service Name&lt;可默认&gt;，此名为启动数据库服务名，要记住。\"></a>步骤6：<strong>设置Windows Service Name&lt;可默认&gt;，此名为启动数据库服务名，要记住。</strong></h3><p><a href=\"http://static.oschina.net/uploads/img/201504/16165921_kz1L.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165921_A9pr.png\" alt=\"image\" title=\"image\"></a></p>\n<h3 id=\"步骤7：验证服务：\"><a href=\"#步骤7：验证服务：\" class=\"headerlink\" title=\"步骤7：验证服务：\"></a>步骤7：验证服务：</h3><p>在开始菜单栏-&gt;<strong>附件-&gt;</strong>右键命令提示符-&gt;以管理员身份运行:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MySQL56 为启动数据库服务命令；</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net stop MySQL56  为停止数据库服务命令。</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://static.oschina.net/uploads/img/201504/16165921_IAgd.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165921_qsYm.png\" alt=\"image\" title=\"image\"></a></p>\n<h3 id=\"步骤8：连接测试：\"><a href=\"#步骤8：连接测试：\" class=\"headerlink\" title=\"步骤8：连接测试：\"></a>步骤8：连接测试：</h3><p>进入bin目录，执行mysql -u root -p 回车输入密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\&gt;cd D:\\Programs\\WAPM\\MySQL\\MySQL Server 5.6\\bin</span><br><span class=\"line\">D:\\Programs\\WAPM\\MySQL\\MySQL Server 5.6\\bin&gt;mysql -u root -p</span><br><span class=\"line\">Enter password: ****** Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 1 Server version: 5.6.24-log MySQL Community Server (GPL)</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"步骤1：双击MySQL安装程序\"><a href=\"#步骤1：双击MySQL安装程序\" class=\"headerlink\" title=\"步骤1：双击MySQL安装程序\"></a>步骤1：双击MySQL安装程序</h3><p>官方网站<a href=\"http://dev.mysql.com/downloads/下载该软件\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/downloads/下载该软件</a></p>\n<h3 id=\"步骤2：“Install-MySQL-Products”-文字，会弹出的用户许可证协议窗口，安装类型设置窗口-安装类型界面各设置项含义\"><a href=\"#步骤2：“Install-MySQL-Products”-文字，会弹出的用户许可证协议窗口，安装类型设置窗口-安装类型界面各设置项含义\" class=\"headerlink\" title=\"步骤2：“Install MySQL Products” 文字，会弹出的用户许可证协议窗口，安装类型设置窗口,安装类型界面各设置项含义:\"></a>步骤2：“Install MySQL Products” 文字，会弹出的用户许可证协议窗口，安装类型设置窗口,安装类型界面各设置项含义:</h3><blockquote>\n<p>Developer Default 默认安装类型</p>\n<p>Server only 仅作为服务器</p>\n<p>Client only 仅作为客户端</p>\n<p>Full 完全安装类型</p>\n<p>Custom 用户自定义安装类型</p>\n<p>根据自己的情况选择安装，我们这里以自定义安装为例：</p>\n<p><a href=\"http://static.oschina.net/uploads/img/201504/16165918_FGf6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165918_xBtP.png\" alt=\"image\" title=\"image\"></a></p>\n</blockquote>\n<h3 id=\"步骤3：选择安装内容及安装目录：\"><a href=\"#步骤3：选择安装内容及安装目录：\" class=\"headerlink\" title=\"步骤3：选择安装内容及安装目录：\"></a>步骤3：选择安装内容及安装目录：</h3><blockquote>\n<p><a href=\"http://static.oschina.net/uploads/img/201504/16165918_0GLM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165918_xZtq.png\" alt=\"image\" title=\"image\"></a> <a href=\"http://static.oschina.net/uploads/img/201504/16165919_YIKU.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165919_WpTX.png\" alt=\"image\" title=\"image\"></a> <a href=\"http://static.oschina.net/uploads/img/201504/16165919_vrIa.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165919_0DmF.png\" alt=\"image\" title=\"image\"></a></p>\n</blockquote>\n<h3 id=\"步骤4：选择类型\"><a href=\"#步骤4：选择类型\" class=\"headerlink\" title=\"步骤4：选择类型\"></a>步骤4：选择类型</h3><blockquote>\n<p>Developer Machine(开发机器)，个人用桌面工作站，占用最少的系统资源</p>\n<p>Server Machine（服务器），MySQL服务器可以同其它应用程序一起运行，例如FTP、email和web服务器。MySQL服务器配置成使用适当比例的系统资源。</p>\n<p>Dedicated MySQL Server Machine（专用MySQL服务器）：该选项代表只运行MySQL服务的服务器。假定运行没有运行其它应用程序。MySQL服务器配置成使用所有可用系统资源。</p>\n</blockquote>\n<p>根据自己情况选择即可，一般WEB服务器选择第二个，Server Machine即可！个人电脑安装选择第一个，Developer Machine比较好。</p>\n<p><a href=\"http://static.oschina.net/uploads/img/201504/16165919_d9x7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165920_8GEz.png\" alt=\"image\" title=\"image\"></a></p>\n<h3 id=\"步骤5：配置密码\"><a href=\"#步骤5：配置密码\" class=\"headerlink\" title=\"步骤5：配置密码\"></a>步骤5：配置密码</h3><p><a href=\"http://static.oschina.net/uploads/img/201504/16165920_a2cR.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165920_c01w.png\" alt=\"image\" title=\"image\"></a></p>\n<p>对应的界面中，我们需要设置root用户的密码，在“MySQL Root password”(输入新密码)和“Repeat Password”（确认）两个编辑框内输入期望的密码。也可以单击下面的【Add User】按钮另行添加新的用户。(<strong>注:Current Root Password:为空；如果输入密码了在后面安装会报错</strong>)</p>\n<h3 id=\"步骤6：设置Windows-Service-Name-lt-可默认-gt-，此名为启动数据库服务名，要记住。\"><a href=\"#步骤6：设置Windows-Service-Name-lt-可默认-gt-，此名为启动数据库服务名，要记住。\" class=\"headerlink\" title=\"步骤6：设置Windows Service Name&lt;可默认&gt;，此名为启动数据库服务名，要记住。\"></a>步骤6：<strong>设置Windows Service Name&lt;可默认&gt;，此名为启动数据库服务名，要记住。</strong></h3><p><a href=\"http://static.oschina.net/uploads/img/201504/16165921_kz1L.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165921_A9pr.png\" alt=\"image\" title=\"image\"></a></p>\n<h3 id=\"步骤7：验证服务：\"><a href=\"#步骤7：验证服务：\" class=\"headerlink\" title=\"步骤7：验证服务：\"></a>步骤7：验证服务：</h3><p>在开始菜单栏-&gt;<strong>附件-&gt;</strong>右键命令提示符-&gt;以管理员身份运行:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MySQL56 为启动数据库服务命令；</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net stop MySQL56  为停止数据库服务命令。</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://static.oschina.net/uploads/img/201504/16165921_IAgd.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://static.oschina.net/uploads/img/201504/16165921_qsYm.png\" alt=\"image\" title=\"image\"></a></p>\n<h3 id=\"步骤8：连接测试：\"><a href=\"#步骤8：连接测试：\" class=\"headerlink\" title=\"步骤8：连接测试：\"></a>步骤8：连接测试：</h3><p>进入bin目录，执行mysql -u root -p 回车输入密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\&gt;cd D:\\Programs\\WAPM\\MySQL\\MySQL Server 5.6\\bin</span><br><span class=\"line\">D:\\Programs\\WAPM\\MySQL\\MySQL Server 5.6\\bin&gt;mysql -u root -p</span><br><span class=\"line\">Enter password: ****** Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 1 Server version: 5.6.24-log MySQL Community Server (GPL)</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>"},{"title":"利用Hexo+GitHub搭建个人博客(二)","author":"JsonYe","date":"2019-09-30T06:55:00.000Z","_content":"> 安装好hexo后，可进行各项配置\n\n### 关于页面\n使用：`hexo new page “about” `新建一个 关于我 页面。 \n主题的` _config.yml `文件中的 `menu` 中进行匹配 \n不同主题 `_config. yml`文件有区别\n```\nmenu:\n  home: /      //主页\n  categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签\n  about: /about   //关于                  （添加此行即可）\n或    \nmenu:\n  - page: home\n    directory: .      //主页\n    icon: fa-home\n  - page: archive\n    directory: archives/    //归档\n    icon: fa-archive\n  - page: about\n    directory: about/    //关于\n    icon: fa-user\n  - page: rss\n    directory: atom.xml    //rss订阅\n    icon: fa-rss\n```\n编辑 about 关于页面 md文件 部署就能看到\n\n### 添加分类\n使用： `hexo new page categories` 新建一个 分类 页面。  \n主题的 `_config.yml` 文件中的 `menu` 中进行匹配\n```\nmenu:\n  home: /      //主页\n  categories: /categories //分类   \n  archives: /archives   //归档\n  tags: /tags   //标签                  \n  about: /about   //关于\n```\n底下代码是一篇包含 分类 文章的例子：\n```\ntitle: 分类测试\ncategories:\n- hexo                       （这个就是文章的分类了）\n```\n\n\n### 添加RSS\n#### 安装\nhexo博客有一个专门生成RSS xml文件的插件`hexo-generator-feed`\n我们来安装它\n```\nnpm install hexo-generator-feed\n```\n\n看到`added 3 packages`说明安装成功了。\n\n#### 启用\n在博客工程文件根目录下`_config.yml`文件中添加如下内容\n```\n# Extensions\nplugins:\n    hexo-generator-feed\n#Feed Atom\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n```\n\n#### 生成RSS\n```\n$ hexo g\n(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.\nINFO  Start processing\nINFO  Files loaded in 6.33 s\nINFO  Generated: atom.xml <----------成功生成atom.xml文件\nINFO  Generated: sitemap.xml\nINFO  Generated: baidusitemap.xml\nINFO  Generated: about/index.html\n......\n......\n......\n```","source":"_posts/hexo/hexo配置.md","raw":"title: 利用Hexo+GitHub搭建个人博客(二)\ncategories:\n  - hexo\ntags:\n  - hexo\nauthor: JsonYe\ndate: 2019-09-30 14:55:00\n---\n> 安装好hexo后，可进行各项配置\n\n### 关于页面\n使用：`hexo new page “about” `新建一个 关于我 页面。 \n主题的` _config.yml `文件中的 `menu` 中进行匹配 \n不同主题 `_config. yml`文件有区别\n```\nmenu:\n  home: /      //主页\n  categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签\n  about: /about   //关于                  （添加此行即可）\n或    \nmenu:\n  - page: home\n    directory: .      //主页\n    icon: fa-home\n  - page: archive\n    directory: archives/    //归档\n    icon: fa-archive\n  - page: about\n    directory: about/    //关于\n    icon: fa-user\n  - page: rss\n    directory: atom.xml    //rss订阅\n    icon: fa-rss\n```\n编辑 about 关于页面 md文件 部署就能看到\n\n### 添加分类\n使用： `hexo new page categories` 新建一个 分类 页面。  \n主题的 `_config.yml` 文件中的 `menu` 中进行匹配\n```\nmenu:\n  home: /      //主页\n  categories: /categories //分类   \n  archives: /archives   //归档\n  tags: /tags   //标签                  \n  about: /about   //关于\n```\n底下代码是一篇包含 分类 文章的例子：\n```\ntitle: 分类测试\ncategories:\n- hexo                       （这个就是文章的分类了）\n```\n\n\n### 添加RSS\n#### 安装\nhexo博客有一个专门生成RSS xml文件的插件`hexo-generator-feed`\n我们来安装它\n```\nnpm install hexo-generator-feed\n```\n\n看到`added 3 packages`说明安装成功了。\n\n#### 启用\n在博客工程文件根目录下`_config.yml`文件中添加如下内容\n```\n# Extensions\nplugins:\n    hexo-generator-feed\n#Feed Atom\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n```\n\n#### 生成RSS\n```\n$ hexo g\n(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.\nINFO  Start processing\nINFO  Files loaded in 6.33 s\nINFO  Generated: atom.xml <----------成功生成atom.xml文件\nINFO  Generated: sitemap.xml\nINFO  Generated: baidusitemap.xml\nINFO  Generated: about/index.html\n......\n......\n......\n```","slug":"hexo/hexo配置","published":1,"updated":"2019-10-02T08:41:26.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck190wv4f0006rowkqtvh2dtu","content":"<blockquote>\n<p>安装好hexo后，可进行各项配置</p>\n</blockquote>\n<h3 id=\"关于页面\"><a href=\"#关于页面\" class=\"headerlink\" title=\"关于页面\"></a>关于页面</h3><p>使用：<code>hexo new page “about”</code>新建一个 关于我 页面。<br>主题的<code>_config.yml</code>文件中的 <code>menu</code> 中进行匹配<br>不同主题 <code>_config. yml</code>文件有区别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /      //主页</span><br><span class=\"line\">  categories: /categories //分类</span><br><span class=\"line\">  archives: /archives   //归档</span><br><span class=\"line\">  tags: /tags   //标签</span><br><span class=\"line\">  about: /about   //关于                  （添加此行即可）</span><br><span class=\"line\">或    </span><br><span class=\"line\">menu:</span><br><span class=\"line\">  - page: home</span><br><span class=\"line\">    directory: .      //主页</span><br><span class=\"line\">    icon: fa-home</span><br><span class=\"line\">  - page: archive</span><br><span class=\"line\">    directory: archives/    //归档</span><br><span class=\"line\">    icon: fa-archive</span><br><span class=\"line\">  - page: about</span><br><span class=\"line\">    directory: about/    //关于</span><br><span class=\"line\">    icon: fa-user</span><br><span class=\"line\">  - page: rss</span><br><span class=\"line\">    directory: atom.xml    //rss订阅</span><br><span class=\"line\">    icon: fa-rss</span><br></pre></td></tr></table></figure>\n\n<p>编辑 about 关于页面 md文件 部署就能看到</p>\n<h3 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h3><p>使用： <code>hexo new page categories</code> 新建一个 分类 页面。<br>主题的 <code>_config.yml</code> 文件中的 <code>menu</code> 中进行匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /      //主页</span><br><span class=\"line\">  categories: /categories //分类   </span><br><span class=\"line\">  archives: /archives   //归档</span><br><span class=\"line\">  tags: /tags   //标签                  </span><br><span class=\"line\">  about: /about   //关于</span><br></pre></td></tr></table></figure>\n\n<p>底下代码是一篇包含 分类 文章的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 分类测试</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- hexo                       （这个就是文章的分类了）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加RSS\"><a href=\"#添加RSS\" class=\"headerlink\" title=\"添加RSS\"></a>添加RSS</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>hexo博客有一个专门生成RSS xml文件的插件<code>hexo-generator-feed</code><br>我们来安装它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>看到<code>added 3 packages</code>说明安装成功了。</p>\n<h4 id=\"启用\"><a href=\"#启用\" class=\"headerlink\" title=\"启用\"></a>启用</h4><p>在博客工程文件根目录下<code>_config.yml</code>文件中添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">plugins:</span><br><span class=\"line\">    hexo-generator-feed</span><br><span class=\"line\">#Feed Atom</span><br><span class=\"line\">feed:</span><br><span class=\"line\">    type: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    limit: 20</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成RSS\"><a href=\"#生成RSS\" class=\"headerlink\" title=\"生成RSS\"></a>生成RSS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Files loaded in 6.33 s</span><br><span class=\"line\">INFO  Generated: atom.xml &lt;----------成功生成atom.xml文件</span><br><span class=\"line\">INFO  Generated: sitemap.xml</span><br><span class=\"line\">INFO  Generated: baidusitemap.xml</span><br><span class=\"line\">INFO  Generated: about/index.html</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>安装好hexo后，可进行各项配置</p>\n</blockquote>\n<h3 id=\"关于页面\"><a href=\"#关于页面\" class=\"headerlink\" title=\"关于页面\"></a>关于页面</h3><p>使用：<code>hexo new page “about”</code>新建一个 关于我 页面。<br>主题的<code>_config.yml</code>文件中的 <code>menu</code> 中进行匹配<br>不同主题 <code>_config. yml</code>文件有区别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /      //主页</span><br><span class=\"line\">  categories: /categories //分类</span><br><span class=\"line\">  archives: /archives   //归档</span><br><span class=\"line\">  tags: /tags   //标签</span><br><span class=\"line\">  about: /about   //关于                  （添加此行即可）</span><br><span class=\"line\">或    </span><br><span class=\"line\">menu:</span><br><span class=\"line\">  - page: home</span><br><span class=\"line\">    directory: .      //主页</span><br><span class=\"line\">    icon: fa-home</span><br><span class=\"line\">  - page: archive</span><br><span class=\"line\">    directory: archives/    //归档</span><br><span class=\"line\">    icon: fa-archive</span><br><span class=\"line\">  - page: about</span><br><span class=\"line\">    directory: about/    //关于</span><br><span class=\"line\">    icon: fa-user</span><br><span class=\"line\">  - page: rss</span><br><span class=\"line\">    directory: atom.xml    //rss订阅</span><br><span class=\"line\">    icon: fa-rss</span><br></pre></td></tr></table></figure>\n\n<p>编辑 about 关于页面 md文件 部署就能看到</p>\n<h3 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h3><p>使用： <code>hexo new page categories</code> 新建一个 分类 页面。<br>主题的 <code>_config.yml</code> 文件中的 <code>menu</code> 中进行匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /      //主页</span><br><span class=\"line\">  categories: /categories //分类   </span><br><span class=\"line\">  archives: /archives   //归档</span><br><span class=\"line\">  tags: /tags   //标签                  </span><br><span class=\"line\">  about: /about   //关于</span><br></pre></td></tr></table></figure>\n\n<p>底下代码是一篇包含 分类 文章的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 分类测试</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- hexo                       （这个就是文章的分类了）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加RSS\"><a href=\"#添加RSS\" class=\"headerlink\" title=\"添加RSS\"></a>添加RSS</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>hexo博客有一个专门生成RSS xml文件的插件<code>hexo-generator-feed</code><br>我们来安装它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>看到<code>added 3 packages</code>说明安装成功了。</p>\n<h4 id=\"启用\"><a href=\"#启用\" class=\"headerlink\" title=\"启用\"></a>启用</h4><p>在博客工程文件根目录下<code>_config.yml</code>文件中添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">plugins:</span><br><span class=\"line\">    hexo-generator-feed</span><br><span class=\"line\">#Feed Atom</span><br><span class=\"line\">feed:</span><br><span class=\"line\">    type: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    limit: 20</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成RSS\"><a href=\"#生成RSS\" class=\"headerlink\" title=\"生成RSS\"></a>生成RSS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Files loaded in 6.33 s</span><br><span class=\"line\">INFO  Generated: atom.xml &lt;----------成功生成atom.xml文件</span><br><span class=\"line\">INFO  Generated: sitemap.xml</span><br><span class=\"line\">INFO  Generated: baidusitemap.xml</span><br><span class=\"line\">INFO  Generated: about/index.html</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>"},{"title":"Eclipse.ini参数设置","author":"JsonYe","copyright":true,"comments":1,"toc":true,"date":"2015-04-16T06:03:00.000Z","_content":"### vmargs下常见参数的意思：\n```\n-vmargs  \n-Xms40m  \n-Xmx256m  \n-XX:PermSize=64M  \n-XX:MaxPermSize=128M\n```\n\n- -vmargs: 说明后面是VM的参数  \n- -Xms40m: 虚拟机占用系统的最小内存,初始分配  \n- -Xmx256m: 虚拟机占用系统的最大内存,按需分配  \n- -XX:PermSize: 最小堆大小。一般报内存不足时,都是说这个太小, 堆空间剩余小于5%就会警告,建议把这个稍微设大一点,不过要视自己机器内存大小来设置，但不能超过MaxPermSize  \n- -XX:MaxPermSize: 最大堆大小。这个也适当大些所以若出现问题，首先请调整 `-Xms40m：`将其设置的小一些，就可以解决问题`PermSize`和`MaxPermSize`指虚拟机为java永久生成对象（Permanate generation）等这些可反射对象分配内 存的限制，这些内存不包括在Heap（堆内存）区之中.\n\n### 解决Failed to creat java virtual machine问题:  \n打开eclipse安装目录下的eclipse.ini文件，修改：  \n```\n--launcher.XXMaxPermSize  \n128M;  \n```\n为：\n```  \n--launcher.XXMaxPermSize  \n256m\n```\n设置Eclipse使用的JRE为本机安装的JDK目录：  \n在eclipse.ini中添加两行  \n```\n -vm  \nC:\\\\Program Files\\\\Java\\\\jdk1.6.0_10\\\\bin\\\\javaw.exe   \n```\n* 注意: 要写在两行，写在一行不能生效；这两行要定在-vmargs之前，不然也不能生效。\n\n### 我的eclipes.ini文件配置如下：\n\n```\n-startup\nplugins/org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar\n--launcher.library\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.200.v20140603-1326\n-product\norg.eclipse.epp.package.java.product\n-showsplash\norg.eclipse.platform\n--launcher.defaultAction\nopenFile\n--launcher.XXMaxPermSize\n384M\n-vm\nC:\\Program Files\\Java\\jre7\\bin\\javaw.exe\n-vmargs\n-Dcom.sun.management.jmxremote \n-Dosgi.requiredJavaVersion=1.6\n-Xverify:none\n-Xmn128m\n-Xms256m\n-Xmx768m\n-Xss1m\n-XX:PermSize=128M\n-XX:MaxPermSize=512M\n```","source":"_posts/ide/Eclipse.ini参数设置.md","raw":"title: Eclipse.ini参数设置\nauthor: JsonYe\ntags:\n  - eclipse\ncategories:\n  - IDE  \ncopyright: true\ncomments: true\ntoc: true\ndate: 2015-04-16 14:03:00\n---\n### vmargs下常见参数的意思：\n```\n-vmargs  \n-Xms40m  \n-Xmx256m  \n-XX:PermSize=64M  \n-XX:MaxPermSize=128M\n```\n\n- -vmargs: 说明后面是VM的参数  \n- -Xms40m: 虚拟机占用系统的最小内存,初始分配  \n- -Xmx256m: 虚拟机占用系统的最大内存,按需分配  \n- -XX:PermSize: 最小堆大小。一般报内存不足时,都是说这个太小, 堆空间剩余小于5%就会警告,建议把这个稍微设大一点,不过要视自己机器内存大小来设置，但不能超过MaxPermSize  \n- -XX:MaxPermSize: 最大堆大小。这个也适当大些所以若出现问题，首先请调整 `-Xms40m：`将其设置的小一些，就可以解决问题`PermSize`和`MaxPermSize`指虚拟机为java永久生成对象（Permanate generation）等这些可反射对象分配内 存的限制，这些内存不包括在Heap（堆内存）区之中.\n\n### 解决Failed to creat java virtual machine问题:  \n打开eclipse安装目录下的eclipse.ini文件，修改：  \n```\n--launcher.XXMaxPermSize  \n128M;  \n```\n为：\n```  \n--launcher.XXMaxPermSize  \n256m\n```\n设置Eclipse使用的JRE为本机安装的JDK目录：  \n在eclipse.ini中添加两行  \n```\n -vm  \nC:\\\\Program Files\\\\Java\\\\jdk1.6.0_10\\\\bin\\\\javaw.exe   \n```\n* 注意: 要写在两行，写在一行不能生效；这两行要定在-vmargs之前，不然也不能生效。\n\n### 我的eclipes.ini文件配置如下：\n\n```\n-startup\nplugins/org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar\n--launcher.library\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.200.v20140603-1326\n-product\norg.eclipse.epp.package.java.product\n-showsplash\norg.eclipse.platform\n--launcher.defaultAction\nopenFile\n--launcher.XXMaxPermSize\n384M\n-vm\nC:\\Program Files\\Java\\jre7\\bin\\javaw.exe\n-vmargs\n-Dcom.sun.management.jmxremote \n-Dosgi.requiredJavaVersion=1.6\n-Xverify:none\n-Xmn128m\n-Xms256m\n-Xmx768m\n-Xss1m\n-XX:PermSize=128M\n-XX:MaxPermSize=512M\n```","slug":"ide/Eclipse.ini参数设置","published":1,"updated":"2019-10-02T08:42:28.543Z","layout":"post","photos":[],"link":"","_id":"ck190wv4i0007rowk479kep07","content":"<h3 id=\"vmargs下常见参数的意思：\"><a href=\"#vmargs下常见参数的意思：\" class=\"headerlink\" title=\"vmargs下常见参数的意思：\"></a>vmargs下常见参数的意思：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-vmargs  </span><br><span class=\"line\">-Xms40m  </span><br><span class=\"line\">-Xmx256m  </span><br><span class=\"line\">-XX:PermSize=64M  </span><br><span class=\"line\">-XX:MaxPermSize=128M</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-vmargs: 说明后面是VM的参数  </li>\n<li>-Xms40m: 虚拟机占用系统的最小内存,初始分配  </li>\n<li>-Xmx256m: 虚拟机占用系统的最大内存,按需分配  </li>\n<li>-XX:PermSize: 最小堆大小。一般报内存不足时,都是说这个太小, 堆空间剩余小于5%就会警告,建议把这个稍微设大一点,不过要视自己机器内存大小来设置，但不能超过MaxPermSize  </li>\n<li>-XX:MaxPermSize: 最大堆大小。这个也适当大些所以若出现问题，首先请调整 <code>-Xms40m：</code>将其设置的小一些，就可以解决问题<code>PermSize</code>和<code>MaxPermSize</code>指虚拟机为java永久生成对象（Permanate generation）等这些可反射对象分配内 存的限制，这些内存不包括在Heap（堆内存）区之中.</li>\n</ul>\n<h3 id=\"解决Failed-to-creat-java-virtual-machine问题\"><a href=\"#解决Failed-to-creat-java-virtual-machine问题\" class=\"headerlink\" title=\"解决Failed to creat java virtual machine问题:\"></a>解决Failed to creat java virtual machine问题:</h3><p>打开eclipse安装目录下的eclipse.ini文件，修改：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--launcher.XXMaxPermSize  </span><br><span class=\"line\">128M;</span><br></pre></td></tr></table></figure>\n\n<p>为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--launcher.XXMaxPermSize  </span><br><span class=\"line\">256m</span><br></pre></td></tr></table></figure>\n\n<p>设置Eclipse使用的JRE为本机安装的JDK目录：<br>在eclipse.ini中添加两行  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> -vm  </span><br><span class=\"line\">C:\\\\Program Files\\\\Java\\\\jdk1.6.0_10\\\\bin\\\\javaw.exe</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意: 要写在两行，写在一行不能生效；这两行要定在-vmargs之前，不然也不能生效。</li>\n</ul>\n<h3 id=\"我的eclipes-ini文件配置如下：\"><a href=\"#我的eclipes-ini文件配置如下：\" class=\"headerlink\" title=\"我的eclipes.ini文件配置如下：\"></a>我的eclipes.ini文件配置如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-startup</span><br><span class=\"line\">plugins/org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar</span><br><span class=\"line\">--launcher.library</span><br><span class=\"line\">plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.200.v20140603-1326</span><br><span class=\"line\">-product</span><br><span class=\"line\">org.eclipse.epp.package.java.product</span><br><span class=\"line\">-showsplash</span><br><span class=\"line\">org.eclipse.platform</span><br><span class=\"line\">--launcher.defaultAction</span><br><span class=\"line\">openFile</span><br><span class=\"line\">--launcher.XXMaxPermSize</span><br><span class=\"line\">384M</span><br><span class=\"line\">-vm</span><br><span class=\"line\">C:\\Program Files\\Java\\jre7\\bin\\javaw.exe</span><br><span class=\"line\">-vmargs</span><br><span class=\"line\">-Dcom.sun.management.jmxremote </span><br><span class=\"line\">-Dosgi.requiredJavaVersion=1.6</span><br><span class=\"line\">-Xverify:none</span><br><span class=\"line\">-Xmn128m</span><br><span class=\"line\">-Xms256m</span><br><span class=\"line\">-Xmx768m</span><br><span class=\"line\">-Xss1m</span><br><span class=\"line\">-XX:PermSize=128M</span><br><span class=\"line\">-XX:MaxPermSize=512M</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"vmargs下常见参数的意思：\"><a href=\"#vmargs下常见参数的意思：\" class=\"headerlink\" title=\"vmargs下常见参数的意思：\"></a>vmargs下常见参数的意思：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-vmargs  </span><br><span class=\"line\">-Xms40m  </span><br><span class=\"line\">-Xmx256m  </span><br><span class=\"line\">-XX:PermSize=64M  </span><br><span class=\"line\">-XX:MaxPermSize=128M</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-vmargs: 说明后面是VM的参数  </li>\n<li>-Xms40m: 虚拟机占用系统的最小内存,初始分配  </li>\n<li>-Xmx256m: 虚拟机占用系统的最大内存,按需分配  </li>\n<li>-XX:PermSize: 最小堆大小。一般报内存不足时,都是说这个太小, 堆空间剩余小于5%就会警告,建议把这个稍微设大一点,不过要视自己机器内存大小来设置，但不能超过MaxPermSize  </li>\n<li>-XX:MaxPermSize: 最大堆大小。这个也适当大些所以若出现问题，首先请调整 <code>-Xms40m：</code>将其设置的小一些，就可以解决问题<code>PermSize</code>和<code>MaxPermSize</code>指虚拟机为java永久生成对象（Permanate generation）等这些可反射对象分配内 存的限制，这些内存不包括在Heap（堆内存）区之中.</li>\n</ul>\n<h3 id=\"解决Failed-to-creat-java-virtual-machine问题\"><a href=\"#解决Failed-to-creat-java-virtual-machine问题\" class=\"headerlink\" title=\"解决Failed to creat java virtual machine问题:\"></a>解决Failed to creat java virtual machine问题:</h3><p>打开eclipse安装目录下的eclipse.ini文件，修改：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--launcher.XXMaxPermSize  </span><br><span class=\"line\">128M;</span><br></pre></td></tr></table></figure>\n\n<p>为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--launcher.XXMaxPermSize  </span><br><span class=\"line\">256m</span><br></pre></td></tr></table></figure>\n\n<p>设置Eclipse使用的JRE为本机安装的JDK目录：<br>在eclipse.ini中添加两行  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> -vm  </span><br><span class=\"line\">C:\\\\Program Files\\\\Java\\\\jdk1.6.0_10\\\\bin\\\\javaw.exe</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意: 要写在两行，写在一行不能生效；这两行要定在-vmargs之前，不然也不能生效。</li>\n</ul>\n<h3 id=\"我的eclipes-ini文件配置如下：\"><a href=\"#我的eclipes-ini文件配置如下：\" class=\"headerlink\" title=\"我的eclipes.ini文件配置如下：\"></a>我的eclipes.ini文件配置如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-startup</span><br><span class=\"line\">plugins/org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar</span><br><span class=\"line\">--launcher.library</span><br><span class=\"line\">plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.200.v20140603-1326</span><br><span class=\"line\">-product</span><br><span class=\"line\">org.eclipse.epp.package.java.product</span><br><span class=\"line\">-showsplash</span><br><span class=\"line\">org.eclipse.platform</span><br><span class=\"line\">--launcher.defaultAction</span><br><span class=\"line\">openFile</span><br><span class=\"line\">--launcher.XXMaxPermSize</span><br><span class=\"line\">384M</span><br><span class=\"line\">-vm</span><br><span class=\"line\">C:\\Program Files\\Java\\jre7\\bin\\javaw.exe</span><br><span class=\"line\">-vmargs</span><br><span class=\"line\">-Dcom.sun.management.jmxremote </span><br><span class=\"line\">-Dosgi.requiredJavaVersion=1.6</span><br><span class=\"line\">-Xverify:none</span><br><span class=\"line\">-Xmn128m</span><br><span class=\"line\">-Xms256m</span><br><span class=\"line\">-Xmx768m</span><br><span class=\"line\">-Xss1m</span><br><span class=\"line\">-XX:PermSize=128M</span><br><span class=\"line\">-XX:MaxPermSize=512M</span><br></pre></td></tr></table></figure>"},{"title":"MySql常用信息函数","author":"JsonYe","copyright":true,"comments":1,"toc":true,"date":"2017-01-12T08:59:00.000Z","_content":"## 基本命令\n```sql\n-- 管理员登录\nmysql -uroot\n-- 查看当前服务器版本\nselect version();\n-- 查看当前使用的数据库\nselect database();\n-- 当前用户\nselect current_user();\nselect user();\n\n-- 查询当前日期、时间、日期+时间\nselect curdate(),curtime(),now();\nselect current_date(),current_time(),current_timestamp();\n\n-- 显示所有表\nshow tables;\n-- 显示所有库\nshow databases;\n-- 查看标准建库语句\nshow create database db_name;\n-- 查看标准建表语句\nshow create table tb_name;\n-- 查看表字段信息\nshow full columns from tname;\n-- 显示当前数据库服务器支持的存储引擎\nshow engines;\n-- 查询当前服务器所支持的字符集。\nshow charset;\n\n```\n\n## 存储引擎\n- MyISAM 不支持事务，速度快，引用最多的引擎\n- InnoDB 支持事务\n\n## 常见支持简体中文的字符集\n我国定制，支持中文简体、繁体 日文。\ngb2312 简体中文，只支持6763简体汉字\ngbk 简繁体支持\ngb18030 \n\nutf-8 美国制定，支持所有国家语言","source":"_posts/mysql/mysql常用信息函数.md","raw":"---\ntitle: MySql常用信息函数\nauthor: JsonYe\ntags:\n  - mysql\n  - 数据库\ncategories:\n  - MySql \ncopyright: true\ncomments: true\ntoc: true\ndate: 2017-01-12 16:59:00\n---\n## 基本命令\n```sql\n-- 管理员登录\nmysql -uroot\n-- 查看当前服务器版本\nselect version();\n-- 查看当前使用的数据库\nselect database();\n-- 当前用户\nselect current_user();\nselect user();\n\n-- 查询当前日期、时间、日期+时间\nselect curdate(),curtime(),now();\nselect current_date(),current_time(),current_timestamp();\n\n-- 显示所有表\nshow tables;\n-- 显示所有库\nshow databases;\n-- 查看标准建库语句\nshow create database db_name;\n-- 查看标准建表语句\nshow create table tb_name;\n-- 查看表字段信息\nshow full columns from tname;\n-- 显示当前数据库服务器支持的存储引擎\nshow engines;\n-- 查询当前服务器所支持的字符集。\nshow charset;\n\n```\n\n## 存储引擎\n- MyISAM 不支持事务，速度快，引用最多的引擎\n- InnoDB 支持事务\n\n## 常见支持简体中文的字符集\n我国定制，支持中文简体、繁体 日文。\ngb2312 简体中文，只支持6763简体汉字\ngbk 简繁体支持\ngb18030 \n\nutf-8 美国制定，支持所有国家语言","slug":"mysql/mysql常用信息函数","published":1,"updated":"2019-10-02T08:40:22.980Z","layout":"post","photos":[],"link":"","_id":"ck190wvc6000qrowk3z64kggl","content":"<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 管理员登录</span></span><br><span class=\"line\">mysql -uroot</span><br><span class=\"line\"><span class=\"comment\">-- 查看当前服务器版本</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">version</span>();</span><br><span class=\"line\"><span class=\"comment\">-- 查看当前使用的数据库</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">database</span>();</span><br><span class=\"line\"><span class=\"comment\">-- 当前用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">current_user</span>();</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">user</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询当前日期、时间、日期+时间</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">curdate</span>(),<span class=\"keyword\">curtime</span>(),<span class=\"keyword\">now</span>();</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">current_date</span>(),<span class=\"keyword\">current_time</span>(),<span class=\"keyword\">current_timestamp</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 显示所有表</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 显示所有库</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 查看标准建库语句</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">database</span> db_name;</span><br><span class=\"line\"><span class=\"comment\">-- 查看标准建表语句</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name;</span><br><span class=\"line\"><span class=\"comment\">-- 查看表字段信息</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">full</span> <span class=\"keyword\">columns</span> <span class=\"keyword\">from</span> tname;</span><br><span class=\"line\"><span class=\"comment\">-- 显示当前数据库服务器支持的存储引擎</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">engines</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 查询当前服务器所支持的字符集。</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">charset</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><ul>\n<li>MyISAM 不支持事务，速度快，引用最多的引擎</li>\n<li>InnoDB 支持事务</li>\n</ul>\n<h2 id=\"常见支持简体中文的字符集\"><a href=\"#常见支持简体中文的字符集\" class=\"headerlink\" title=\"常见支持简体中文的字符集\"></a>常见支持简体中文的字符集</h2><p>我国定制，支持中文简体、繁体 日文。<br>gb2312 简体中文，只支持6763简体汉字<br>gbk 简繁体支持<br>gb18030 </p>\n<p>utf-8 美国制定，支持所有国家语言</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 管理员登录</span></span><br><span class=\"line\">mysql -uroot</span><br><span class=\"line\"><span class=\"comment\">-- 查看当前服务器版本</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">version</span>();</span><br><span class=\"line\"><span class=\"comment\">-- 查看当前使用的数据库</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">database</span>();</span><br><span class=\"line\"><span class=\"comment\">-- 当前用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">current_user</span>();</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">user</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询当前日期、时间、日期+时间</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">curdate</span>(),<span class=\"keyword\">curtime</span>(),<span class=\"keyword\">now</span>();</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">current_date</span>(),<span class=\"keyword\">current_time</span>(),<span class=\"keyword\">current_timestamp</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 显示所有表</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 显示所有库</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 查看标准建库语句</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">database</span> db_name;</span><br><span class=\"line\"><span class=\"comment\">-- 查看标准建表语句</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name;</span><br><span class=\"line\"><span class=\"comment\">-- 查看表字段信息</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">full</span> <span class=\"keyword\">columns</span> <span class=\"keyword\">from</span> tname;</span><br><span class=\"line\"><span class=\"comment\">-- 显示当前数据库服务器支持的存储引擎</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">engines</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 查询当前服务器所支持的字符集。</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">charset</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><ul>\n<li>MyISAM 不支持事务，速度快，引用最多的引擎</li>\n<li>InnoDB 支持事务</li>\n</ul>\n<h2 id=\"常见支持简体中文的字符集\"><a href=\"#常见支持简体中文的字符集\" class=\"headerlink\" title=\"常见支持简体中文的字符集\"></a>常见支持简体中文的字符集</h2><p>我国定制，支持中文简体、繁体 日文。<br>gb2312 简体中文，只支持6763简体汉字<br>gbk 简繁体支持<br>gb18030 </p>\n<p>utf-8 美国制定，支持所有国家语言</p>\n"},{"title":"Git远程操作详解","author":"JsonYe","comments":1,"toc":true,"date":"2016-01-11T08:22:00.000Z","_content":"Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。\n```\ngit clone\n\ngit remote\n\ngit fetch\n\ngit pull\n\ngit push\n```\n本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。\n\n## 一、git clone\n\n远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。\n\n```\n git clone <版本库的网址>\n```\n\n比如，克隆jQuery的版本库。\n\n```\ngit clone https://github.com/jquery/jquery.git\n```\n\n该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。\n\n```\ngit clone <版本库的网址> <本地目录名>\n```\n\ngit clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。\n\n```\n git clone http[s]://example.com/path/to/repo.git/\n git clone ssh://example.com/path/to/repo.git/\n git clone git://example.com/path/to/repo.git/\n git clone /opt/git/project.git \n git clone file:///opt/git/project.git\n git clone ftp[s]://example.com/path/to/repo.git/\n git clone rsync://example.com/path/to/repo.git/\n```\n\nSSH协议还有另一种写法。\n\n```\n git clone [user@]example.com:path/to/repo.git/\n```\n\n通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。\n\n## 二、git remote\n\n为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。\n\n不带选项的时候，git remote命令列出所有远程主机。\n\n```\ngit remote\norigin\n```\n\n使用-v选项，可以参看远程主机的网址。\n\n```\n git remote -v\norigin  git@github.com:jquery/jquery.git (fetch)\norigin  git@github.com:jquery/jquery.git (push)\n```\n\n上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。\n\n克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。\n\n```\n git clone -o jQuery https://github.com/jquery/jquery.git\n git remote\njQuery\n```\n\n上面命令表示，克隆的时候，指定远程主机叫做jQuery。\n\n```\ngit remote show命令加上主机名，可以查看该主机的详细信息。\n git remote show <主机名>\ngit remote add命令用于添加远程主机。\n git remote add <主机名> <网址>\ngit remote rm命令用于删除远程主机。\n git remote rm <主机名>\ngit remote rename命令用于远程主机的改名。\n git remote rename <原主机名> <新主机名>\n```\n\n## 三、git fetch\n\n一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。\n\n```\n git fetch <远程主机名>\n```\n\n上面命令将某个远程主机的更新，全部取回本地。\n\ngit fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。\n\n默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。\n\n```\n git fetch <远程主机名> <分支名>\n```\n\n比如，取回origin主机的master分支。\n\n```\n git fetch origin master\n```\n\n所取回的更新，在本地主机上要用\"远程主机名/分支名\"的形式读取。比如origin主机的master，就要用origin/master读取。\n\ngit branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。\n\n```\n git branch -r\norigin/master\n git branch -a\n* master\n  remotes/origin/master\n```\n\n上面命令表示，本地主机的当前分支是master，远程分支是origin/master。\n\n取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。\n\n```\n git checkout -b newBrach origin/master\n```\n\n上面命令表示，在origin/master的基础上，创建一个新分支。\n\n此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。\n\n```\n git merge origin/master\n```\n\n\\# 或者\n\n```\n git rebase origin/master\n```\n\n上面命令表示在当前分支上，合并origin/master。\n\n## 四、git pull\n\ngit pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。\n\n```\n git pull <远程主机名> <远程分支名>:<本地分支名>\n```\n\n比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。\n\n```\n git pull origin next:master\n```\n\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n\n```\n git pull origin next\n```\n\n上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。\n\n```\n git fetch origin\n git merge origin/next\n```\n\n在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动\"追踪\"origin/master分支。\n\nGit也允许手动建立追踪关系。\n\n```\ngit branch --set-upstream master origin/next\n```\n\n上面命令指定master分支追踪origin/next分支。\n\n如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。\n\n```\n git pull origin\n```\n\n上面命令表示，本地的当前分支自动与对应的origin主机\"追踪分支\"（remote-tracking branch）进行合并。\n\n如果当前分支只有一个追踪分支，连远程主机名都可以省略。\n\n```\n git pull\n```\n\n上面命令表示，当前分支自动与唯一一个追踪分支进行合并。\n\n如果合并需要采用rebase模式，可以使用--rebase选项。\n\n```\n git pull --rebase <远程主机名> <远程分支名>:<本地分支名>\n```\n\n如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。\n\n但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。\n\n```\n git pull -p\n# 等同于下面的命令\n git fetch --prune origin \n git fetch -p\n```\n\n## 五、git push\n\ngit push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。\n\n```\n git push <远程主机名> <本地分支名>:<远程分支名>\n```\n\n注意，分支推送顺序的写法是<来源地>:<目的地>，所以git pull是<远程分支>:<本地分支>，而git push是<本地分支>:<远程分支>。\n\n如果省略远程分支名，则表示将本地分支推送与之存在\"追踪关系\"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。\n\n```\n git push origin master\n```\n\n上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。\n\n如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。\n\n```\n git push origin :master\n```\n\n\\# 等同于\n\n```\n git push origin --delete master\n```\n\n上面命令表示删除origin主机的master分支。\n\n如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。\n\n```\n git push origin\n```\n\n上面命令表示，将当前分支推送到origin主机的对应分支。\n\n如果当前分支只有一个追踪分支，那么主机名都可以省略。\n\n```\n git push\n```\n\n如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。\n\n```\n git push -u origin master\n```\n\n上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。\n\n不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。\n\n```\n git config --global push.default matching\n```\n\n或者\n\n```\n git config --global push.default simple\n```\n\n还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。\n\n```\n git push --all origin\n```\n\n上面命令表示，将所有本地分支都推送到origin主机。\n\n如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。\n\n```\n git push --force origin\n```\n\n上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。\n\n最后，git push不会推送标签（tag），除非使用--tags选项。\n\n```\n git push origin --tags\n```\n\n（完）","source":"_posts/git/Git远程操作详解.md","raw":"---\ntitle: 'Git远程操作详解'\nauthor: JsonYe\ntags:\n  - git\ncategories:\n  - IDE \ncomments: true\ntoc: true\ndate:  2016-01-11 16:22:00\n---\nGit有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。\n```\ngit clone\n\ngit remote\n\ngit fetch\n\ngit pull\n\ngit push\n```\n本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。\n\n## 一、git clone\n\n远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。\n\n```\n git clone <版本库的网址>\n```\n\n比如，克隆jQuery的版本库。\n\n```\ngit clone https://github.com/jquery/jquery.git\n```\n\n该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。\n\n```\ngit clone <版本库的网址> <本地目录名>\n```\n\ngit clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。\n\n```\n git clone http[s]://example.com/path/to/repo.git/\n git clone ssh://example.com/path/to/repo.git/\n git clone git://example.com/path/to/repo.git/\n git clone /opt/git/project.git \n git clone file:///opt/git/project.git\n git clone ftp[s]://example.com/path/to/repo.git/\n git clone rsync://example.com/path/to/repo.git/\n```\n\nSSH协议还有另一种写法。\n\n```\n git clone [user@]example.com:path/to/repo.git/\n```\n\n通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。\n\n## 二、git remote\n\n为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。\n\n不带选项的时候，git remote命令列出所有远程主机。\n\n```\ngit remote\norigin\n```\n\n使用-v选项，可以参看远程主机的网址。\n\n```\n git remote -v\norigin  git@github.com:jquery/jquery.git (fetch)\norigin  git@github.com:jquery/jquery.git (push)\n```\n\n上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。\n\n克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。\n\n```\n git clone -o jQuery https://github.com/jquery/jquery.git\n git remote\njQuery\n```\n\n上面命令表示，克隆的时候，指定远程主机叫做jQuery。\n\n```\ngit remote show命令加上主机名，可以查看该主机的详细信息。\n git remote show <主机名>\ngit remote add命令用于添加远程主机。\n git remote add <主机名> <网址>\ngit remote rm命令用于删除远程主机。\n git remote rm <主机名>\ngit remote rename命令用于远程主机的改名。\n git remote rename <原主机名> <新主机名>\n```\n\n## 三、git fetch\n\n一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。\n\n```\n git fetch <远程主机名>\n```\n\n上面命令将某个远程主机的更新，全部取回本地。\n\ngit fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。\n\n默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。\n\n```\n git fetch <远程主机名> <分支名>\n```\n\n比如，取回origin主机的master分支。\n\n```\n git fetch origin master\n```\n\n所取回的更新，在本地主机上要用\"远程主机名/分支名\"的形式读取。比如origin主机的master，就要用origin/master读取。\n\ngit branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。\n\n```\n git branch -r\norigin/master\n git branch -a\n* master\n  remotes/origin/master\n```\n\n上面命令表示，本地主机的当前分支是master，远程分支是origin/master。\n\n取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。\n\n```\n git checkout -b newBrach origin/master\n```\n\n上面命令表示，在origin/master的基础上，创建一个新分支。\n\n此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。\n\n```\n git merge origin/master\n```\n\n\\# 或者\n\n```\n git rebase origin/master\n```\n\n上面命令表示在当前分支上，合并origin/master。\n\n## 四、git pull\n\ngit pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。\n\n```\n git pull <远程主机名> <远程分支名>:<本地分支名>\n```\n\n比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。\n\n```\n git pull origin next:master\n```\n\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n\n```\n git pull origin next\n```\n\n上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。\n\n```\n git fetch origin\n git merge origin/next\n```\n\n在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动\"追踪\"origin/master分支。\n\nGit也允许手动建立追踪关系。\n\n```\ngit branch --set-upstream master origin/next\n```\n\n上面命令指定master分支追踪origin/next分支。\n\n如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。\n\n```\n git pull origin\n```\n\n上面命令表示，本地的当前分支自动与对应的origin主机\"追踪分支\"（remote-tracking branch）进行合并。\n\n如果当前分支只有一个追踪分支，连远程主机名都可以省略。\n\n```\n git pull\n```\n\n上面命令表示，当前分支自动与唯一一个追踪分支进行合并。\n\n如果合并需要采用rebase模式，可以使用--rebase选项。\n\n```\n git pull --rebase <远程主机名> <远程分支名>:<本地分支名>\n```\n\n如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。\n\n但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。\n\n```\n git pull -p\n# 等同于下面的命令\n git fetch --prune origin \n git fetch -p\n```\n\n## 五、git push\n\ngit push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。\n\n```\n git push <远程主机名> <本地分支名>:<远程分支名>\n```\n\n注意，分支推送顺序的写法是<来源地>:<目的地>，所以git pull是<远程分支>:<本地分支>，而git push是<本地分支>:<远程分支>。\n\n如果省略远程分支名，则表示将本地分支推送与之存在\"追踪关系\"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。\n\n```\n git push origin master\n```\n\n上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。\n\n如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。\n\n```\n git push origin :master\n```\n\n\\# 等同于\n\n```\n git push origin --delete master\n```\n\n上面命令表示删除origin主机的master分支。\n\n如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。\n\n```\n git push origin\n```\n\n上面命令表示，将当前分支推送到origin主机的对应分支。\n\n如果当前分支只有一个追踪分支，那么主机名都可以省略。\n\n```\n git push\n```\n\n如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。\n\n```\n git push -u origin master\n```\n\n上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。\n\n不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。\n\n```\n git config --global push.default matching\n```\n\n或者\n\n```\n git config --global push.default simple\n```\n\n还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。\n\n```\n git push --all origin\n```\n\n上面命令表示，将所有本地分支都推送到origin主机。\n\n如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。\n\n```\n git push --force origin\n```\n\n上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。\n\n最后，git push不会推送标签（tag），除非使用--tags选项。\n\n```\n git push origin --tags\n```\n\n（完）","slug":"git/Git远程操作详解","published":1,"updated":"2019-10-02T08:42:18.966Z","layout":"post","photos":[],"link":"","_id":"ck190wvc9000rrowkplf35kcs","content":"<p>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone</span><br><span class=\"line\"></span><br><span class=\"line\">git remote</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。</p>\n<h2 id=\"一、git-clone\"><a href=\"#一、git-clone\" class=\"headerlink\" title=\"一、git clone\"></a>一、git clone</h2><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git clone &lt;版本库的网址&gt;</span><br></pre></td></tr></table></figure>\n\n<p>比如，克隆jQuery的版本库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n\n<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git clone http[s]://example.com/path/to/repo.git/</span><br><span class=\"line\"> git clone ssh://example.com/path/to/repo.git/</span><br><span class=\"line\"> git clone git://example.com/path/to/repo.git/</span><br><span class=\"line\"> git clone /opt/git/project.git </span><br><span class=\"line\"> git clone file:///opt/git/project.git</span><br><span class=\"line\"> git clone ftp[s]://example.com/path/to/repo.git/</span><br><span class=\"line\"> git clone rsync://example.com/path/to/repo.git/</span><br></pre></td></tr></table></figure>\n\n<p>SSH协议还有另一种写法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git clone [user@]example.com:path/to/repo.git/</span><br></pre></td></tr></table></figure>\n\n<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。</p>\n<h2 id=\"二、git-remote\"><a href=\"#二、git-remote\" class=\"headerlink\" title=\"二、git remote\"></a>二、git remote</h2><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</p>\n<p>不带选项的时候，git remote命令列出所有远程主机。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n\n<p>使用-v选项，可以参看远程主机的网址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git remote -v</span><br><span class=\"line\">origin  git@github.com:jquery/jquery.git (fetch)</span><br><span class=\"line\">origin  git@github.com:jquery/jquery.git (push)</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p>\n<p>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git clone -o jQuery https://github.com/jquery/jquery.git</span><br><span class=\"line\"> git remote</span><br><span class=\"line\">jQuery</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show命令加上主机名，可以查看该主机的详细信息。</span><br><span class=\"line\"> git remote show &lt;主机名&gt;</span><br><span class=\"line\">git remote add命令用于添加远程主机。</span><br><span class=\"line\"> git remote add &lt;主机名&gt; &lt;网址&gt;</span><br><span class=\"line\">git remote rm命令用于删除远程主机。</span><br><span class=\"line\"> git remote rm &lt;主机名&gt;</span><br><span class=\"line\">git remote rename命令用于远程主机的改名。</span><br><span class=\"line\"> git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、git-fetch\"><a href=\"#三、git-fetch\" class=\"headerlink\" title=\"三、git fetch\"></a>三、git fetch</h2><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git fetch &lt;远程主机名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面命令将某个远程主机的更新，全部取回本地。</p>\n<p>git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。</p>\n<p>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>比如，取回origin主机的master分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git fetch origin master</span><br></pre></td></tr></table></figure>\n\n<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。</p>\n<p>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git branch -r</span><br><span class=\"line\">origin/master</span><br><span class=\"line\"> git branch -a</span><br><span class=\"line\">* master</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，本地主机的当前分支是master，远程分支是origin/master。</p>\n<p>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git checkout -b newBrach origin/master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，在origin/master的基础上，创建一个新分支。</p>\n<p>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git merge origin/master</span><br></pre></td></tr></table></figure>\n\n<p># 或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git rebase origin/master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示在当前分支上，合并origin/master。</p>\n<h2 id=\"四、git-pull\"><a href=\"#四、git-pull\" class=\"headerlink\" title=\"四、git pull\"></a>四、git pull</h2><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull origin next:master</span><br></pre></td></tr></table></figure>\n\n<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull origin next</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git fetch origin</span><br><span class=\"line\"> git merge origin/next</span><br></pre></td></tr></table></figure>\n\n<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p>\n<p>Git也允许手动建立追踪关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream master origin/next</span><br></pre></td></tr></table></figure>\n\n<p>上面命令指定master分支追踪origin/next分支。</p>\n<p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。</p>\n<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p>\n<p>如果合并需要采用rebase模式，可以使用–rebase选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。</p>\n<p>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull -p</span><br><span class=\"line\"># 等同于下面的命令</span><br><span class=\"line\"> git fetch --prune origin </span><br><span class=\"line\"> git fetch -p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、git-push\"><a href=\"#五、git-push\" class=\"headerlink\" title=\"五、git push\"></a>五、git push</h2><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>\n<p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>\n<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin :master</span><br></pre></td></tr></table></figure>\n\n<p># 等同于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin --delete master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示删除origin主机的master分支。</p>\n<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>\n<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push</span><br></pre></td></tr></table></figure>\n\n<p>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p>\n<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git config --global push.default matching</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git config --global push.default simple</span><br></pre></td></tr></table></figure>\n\n<p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push --all origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将所有本地分支都推送到origin主机。</p>\n<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push --force origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>\n<p>最后，git push不会推送标签（tag），除非使用–tags选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<p>（完）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone</span><br><span class=\"line\"></span><br><span class=\"line\">git remote</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。</p>\n<h2 id=\"一、git-clone\"><a href=\"#一、git-clone\" class=\"headerlink\" title=\"一、git clone\"></a>一、git clone</h2><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git clone &lt;版本库的网址&gt;</span><br></pre></td></tr></table></figure>\n\n<p>比如，克隆jQuery的版本库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n\n<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git clone http[s]://example.com/path/to/repo.git/</span><br><span class=\"line\"> git clone ssh://example.com/path/to/repo.git/</span><br><span class=\"line\"> git clone git://example.com/path/to/repo.git/</span><br><span class=\"line\"> git clone /opt/git/project.git </span><br><span class=\"line\"> git clone file:///opt/git/project.git</span><br><span class=\"line\"> git clone ftp[s]://example.com/path/to/repo.git/</span><br><span class=\"line\"> git clone rsync://example.com/path/to/repo.git/</span><br></pre></td></tr></table></figure>\n\n<p>SSH协议还有另一种写法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git clone [user@]example.com:path/to/repo.git/</span><br></pre></td></tr></table></figure>\n\n<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。</p>\n<h2 id=\"二、git-remote\"><a href=\"#二、git-remote\" class=\"headerlink\" title=\"二、git remote\"></a>二、git remote</h2><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</p>\n<p>不带选项的时候，git remote命令列出所有远程主机。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n\n<p>使用-v选项，可以参看远程主机的网址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git remote -v</span><br><span class=\"line\">origin  git@github.com:jquery/jquery.git (fetch)</span><br><span class=\"line\">origin  git@github.com:jquery/jquery.git (push)</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p>\n<p>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git clone -o jQuery https://github.com/jquery/jquery.git</span><br><span class=\"line\"> git remote</span><br><span class=\"line\">jQuery</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show命令加上主机名，可以查看该主机的详细信息。</span><br><span class=\"line\"> git remote show &lt;主机名&gt;</span><br><span class=\"line\">git remote add命令用于添加远程主机。</span><br><span class=\"line\"> git remote add &lt;主机名&gt; &lt;网址&gt;</span><br><span class=\"line\">git remote rm命令用于删除远程主机。</span><br><span class=\"line\"> git remote rm &lt;主机名&gt;</span><br><span class=\"line\">git remote rename命令用于远程主机的改名。</span><br><span class=\"line\"> git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、git-fetch\"><a href=\"#三、git-fetch\" class=\"headerlink\" title=\"三、git fetch\"></a>三、git fetch</h2><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git fetch &lt;远程主机名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面命令将某个远程主机的更新，全部取回本地。</p>\n<p>git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。</p>\n<p>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>比如，取回origin主机的master分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git fetch origin master</span><br></pre></td></tr></table></figure>\n\n<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。</p>\n<p>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git branch -r</span><br><span class=\"line\">origin/master</span><br><span class=\"line\"> git branch -a</span><br><span class=\"line\">* master</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，本地主机的当前分支是master，远程分支是origin/master。</p>\n<p>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git checkout -b newBrach origin/master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，在origin/master的基础上，创建一个新分支。</p>\n<p>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git merge origin/master</span><br></pre></td></tr></table></figure>\n\n<p># 或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git rebase origin/master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示在当前分支上，合并origin/master。</p>\n<h2 id=\"四、git-pull\"><a href=\"#四、git-pull\" class=\"headerlink\" title=\"四、git pull\"></a>四、git pull</h2><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull origin next:master</span><br></pre></td></tr></table></figure>\n\n<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull origin next</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git fetch origin</span><br><span class=\"line\"> git merge origin/next</span><br></pre></td></tr></table></figure>\n\n<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p>\n<p>Git也允许手动建立追踪关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream master origin/next</span><br></pre></td></tr></table></figure>\n\n<p>上面命令指定master分支追踪origin/next分支。</p>\n<p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。</p>\n<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p>\n<p>如果合并需要采用rebase模式，可以使用–rebase选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。</p>\n<p>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git pull -p</span><br><span class=\"line\"># 等同于下面的命令</span><br><span class=\"line\"> git fetch --prune origin </span><br><span class=\"line\"> git fetch -p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、git-push\"><a href=\"#五、git-push\" class=\"headerlink\" title=\"五、git push\"></a>五、git push</h2><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>\n<p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>\n<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin :master</span><br></pre></td></tr></table></figure>\n\n<p># 等同于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin --delete master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示删除origin主机的master分支。</p>\n<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>\n<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push</span><br></pre></td></tr></table></figure>\n\n<p>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p>\n<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git config --global push.default matching</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git config --global push.default simple</span><br></pre></td></tr></table></figure>\n\n<p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push --all origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将所有本地分支都推送到origin主机。</p>\n<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push --force origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>\n<p>最后，git push不会推送标签（tag），除非使用–tags选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<p>（完）</p>\n"},{"title":"Android应用的基本组件","author":"JsonYe","copyright":true,"comments":1,"toc":true,"date":"2015-04-29T09:35:00.000Z","_content":"\nAndroid系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest.xml中进行注册，否则不予使用。本小节将对这些组件进行简单的介绍，使读者对Android应用开发的内容有一个大致的认识。\n\n## 活动（Activity）\n\n\nActivity是Android应用中，最直接与用户接触的组件，它负责加载View组件，使其展现给用户，并保持与用户的交互。所有的Activity组件均需要继承Activity类，这是一个Content的间接子类，包装了一些Activity的基本特性。\n\n\nView组件是所有UI组件、容器组件的基类，也就是说，它可以是一个布局容器，也可以是一个布局容器内的基本UI组件。View组件一般通过XML布局资源文件定义，同时Android系统也对这些View组件提供了对应的实现类。如果需要通过某个Activity把指定的View组件显示出来，调用Activity的setContentView()方法即可，它具有多个重载方法，可以传递一个XML资源ID或者View对象。\n\n例如：\n```java\nLinearLayout layout=new LinearLayout(this);\nsetContentView(layout)；\n```\n或者：\n```\nsetContentView(R.layout.main);\n```\n\nActivity为Android应用提供了一个用户界面，当一个Activity被开启之后，它具有自己的生命周期。Activity类也对这些生命周期提供了对应的方法，如果需要对Activity各个不同的生命周期做出响应，可以重写这些生命周期方法实现。对于大多数商业应用而言，整个系统中包含了多个Activity，在应用中逐步导航跳转开启这些Activity之后，会形成Activity的回退栈，当前显示并获得焦点的Activity位于这个回退栈的栈顶。\n\n## 服务（Service）\n\nService主要用于在后台完成一些无需向用户展示界面的功能实现。通常位于系统后台运行，它一般不需要与用户进行交互，因此Service组件没有用户界面展示给用户。Service主要用于完成一些类似于下载文件、播放音乐等无需用户界面与用户进行交互的功能。\n与Activity组件需要继承Activity类相似，Service组件同样需要继承Service类，Service类也是Context的间接子类，其中包装了一些Service的专有特性。一个Service被运行起来之后，它将具有自己独立的生命周期，Service类中对其各个不同的生命周期提供了对应的方法，开发人员可以通过在Service中重写Service类中这些生命周期方法，来响应Service各个生命周期的功能实现。\n\n## 广播接收器（BroadcastReceiver）\n\nBroadcastReceiver同样也是Android系统中的一个重要组件，BroadcastReceiver代表了一个广播接收器，用于接收系统中其它组件发送的广播，并对其进行响应或是拦截广播的继续传播。\n广播是一个系统级的消息，当系统环境发生改变的时候会发送一些广播供对应的程序进行接收响应，例如：接收到一条短信、开机、关机、插上充电器、插上耳机、充电完成等，均会发送一条广播供需要监听此类广播的应用进行响应。除了一些系统事件的广播，开发人员也可以自定义广播内容。但是大部分情况下，开发应用的时候主要用于接受系统广播并对其进行响应，很少需要发送自定义的广播。\n使用BroadcastReceiver组件接收广播非常的简单，只需要实现自己的BroadcastReceiver子类，并重写onReceive()方法，就能完成BroadcastReceiver，而对于这个BroadcastReceiver对什么广播感兴趣，则需要对其进行另行配置。\n\n## 内容提供者（ContentProvider）\nAndroid系统作为一个智能操作系统，它需要系统中运行的应用程序都必须是相互独立的，各自运行在自己的Dalvik VM实例中。在正常情况下，Android应用之间是不能进行实时的数据交换，而考虑到有些应用的数据需要对外进行共享，Android系统提供了一个标准的数据接口ContentProvider，通过应用提供的ContentProvider，可以在其它应用中对这个应用的暴露出来的数据进行增删改查。\n为应用程序暴露数据接口非常的简单，只需要继承ContentProvider类，并且实现insert()、delete()、update()、query()等方法，使外部应用可对本应用的数据进行增删改查。\n\n## 意图（Intent）\n\n虽然Intent并不是Android应用的组件，也无需专门在清单文件中配置，但是它对于Android应用的作用非常的大。除了ContentProvider之外，其它组件的启动，均需要通过Intent进行指定。Intent不仅可以明确指定一个Android组件进行启动，还可以提供一个标准的行为，再由Android系统配合意图过滤器来选定启动指定组件来完成任务。而Intent在开启对组件的过程中，进行各个组件间数据的传递。\n\n## 小结\n\n本章简要介绍了Android系统的发展史及其现状，并且介绍了Android系统的架构与Dalvik VM虚拟机，最后还简单介绍了Android开发中的四大组件。通过阅读本章，对Android的历史与现状、系统架构、基本组件有个大致的了解，这对本书接下来的内容理解非常有帮助。","source":"_posts/android/base/Android应用的基本组件.md","raw":"title: Android应用的基本组件\nauthor: JsonYe\ntags:\n  - Android\ncategories:\n  - Android基础  \ncopyright: true\ncomments: true\ntoc: true\ndate: 2015-04-29 17:35:00\n---\n\nAndroid系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest.xml中进行注册，否则不予使用。本小节将对这些组件进行简单的介绍，使读者对Android应用开发的内容有一个大致的认识。\n\n## 活动（Activity）\n\n\nActivity是Android应用中，最直接与用户接触的组件，它负责加载View组件，使其展现给用户，并保持与用户的交互。所有的Activity组件均需要继承Activity类，这是一个Content的间接子类，包装了一些Activity的基本特性。\n\n\nView组件是所有UI组件、容器组件的基类，也就是说，它可以是一个布局容器，也可以是一个布局容器内的基本UI组件。View组件一般通过XML布局资源文件定义，同时Android系统也对这些View组件提供了对应的实现类。如果需要通过某个Activity把指定的View组件显示出来，调用Activity的setContentView()方法即可，它具有多个重载方法，可以传递一个XML资源ID或者View对象。\n\n例如：\n```java\nLinearLayout layout=new LinearLayout(this);\nsetContentView(layout)；\n```\n或者：\n```\nsetContentView(R.layout.main);\n```\n\nActivity为Android应用提供了一个用户界面，当一个Activity被开启之后，它具有自己的生命周期。Activity类也对这些生命周期提供了对应的方法，如果需要对Activity各个不同的生命周期做出响应，可以重写这些生命周期方法实现。对于大多数商业应用而言，整个系统中包含了多个Activity，在应用中逐步导航跳转开启这些Activity之后，会形成Activity的回退栈，当前显示并获得焦点的Activity位于这个回退栈的栈顶。\n\n## 服务（Service）\n\nService主要用于在后台完成一些无需向用户展示界面的功能实现。通常位于系统后台运行，它一般不需要与用户进行交互，因此Service组件没有用户界面展示给用户。Service主要用于完成一些类似于下载文件、播放音乐等无需用户界面与用户进行交互的功能。\n与Activity组件需要继承Activity类相似，Service组件同样需要继承Service类，Service类也是Context的间接子类，其中包装了一些Service的专有特性。一个Service被运行起来之后，它将具有自己独立的生命周期，Service类中对其各个不同的生命周期提供了对应的方法，开发人员可以通过在Service中重写Service类中这些生命周期方法，来响应Service各个生命周期的功能实现。\n\n## 广播接收器（BroadcastReceiver）\n\nBroadcastReceiver同样也是Android系统中的一个重要组件，BroadcastReceiver代表了一个广播接收器，用于接收系统中其它组件发送的广播，并对其进行响应或是拦截广播的继续传播。\n广播是一个系统级的消息，当系统环境发生改变的时候会发送一些广播供对应的程序进行接收响应，例如：接收到一条短信、开机、关机、插上充电器、插上耳机、充电完成等，均会发送一条广播供需要监听此类广播的应用进行响应。除了一些系统事件的广播，开发人员也可以自定义广播内容。但是大部分情况下，开发应用的时候主要用于接受系统广播并对其进行响应，很少需要发送自定义的广播。\n使用BroadcastReceiver组件接收广播非常的简单，只需要实现自己的BroadcastReceiver子类，并重写onReceive()方法，就能完成BroadcastReceiver，而对于这个BroadcastReceiver对什么广播感兴趣，则需要对其进行另行配置。\n\n## 内容提供者（ContentProvider）\nAndroid系统作为一个智能操作系统，它需要系统中运行的应用程序都必须是相互独立的，各自运行在自己的Dalvik VM实例中。在正常情况下，Android应用之间是不能进行实时的数据交换，而考虑到有些应用的数据需要对外进行共享，Android系统提供了一个标准的数据接口ContentProvider，通过应用提供的ContentProvider，可以在其它应用中对这个应用的暴露出来的数据进行增删改查。\n为应用程序暴露数据接口非常的简单，只需要继承ContentProvider类，并且实现insert()、delete()、update()、query()等方法，使外部应用可对本应用的数据进行增删改查。\n\n## 意图（Intent）\n\n虽然Intent并不是Android应用的组件，也无需专门在清单文件中配置，但是它对于Android应用的作用非常的大。除了ContentProvider之外，其它组件的启动，均需要通过Intent进行指定。Intent不仅可以明确指定一个Android组件进行启动，还可以提供一个标准的行为，再由Android系统配合意图过滤器来选定启动指定组件来完成任务。而Intent在开启对组件的过程中，进行各个组件间数据的传递。\n\n## 小结\n\n本章简要介绍了Android系统的发展史及其现状，并且介绍了Android系统的架构与Dalvik VM虚拟机，最后还简单介绍了Android开发中的四大组件。通过阅读本章，对Android的历史与现状、系统架构、基本组件有个大致的了解，这对本书接下来的内容理解非常有帮助。","slug":"android/base/Android应用的基本组件","published":1,"updated":"2019-10-02T08:41:02.792Z","layout":"post","photos":[],"link":"","_id":"ck190wvcq000zrowk6ch0fzep","content":"<p>Android系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest.xml中进行注册，否则不予使用。本小节将对这些组件进行简单的介绍，使读者对Android应用开发的内容有一个大致的认识。</p>\n<h2 id=\"活动（Activity）\"><a href=\"#活动（Activity）\" class=\"headerlink\" title=\"活动（Activity）\"></a>活动（Activity）</h2><p>Activity是Android应用中，最直接与用户接触的组件，它负责加载View组件，使其展现给用户，并保持与用户的交互。所有的Activity组件均需要继承Activity类，这是一个Content的间接子类，包装了一些Activity的基本特性。</p>\n<p>View组件是所有UI组件、容器组件的基类，也就是说，它可以是一个布局容器，也可以是一个布局容器内的基本UI组件。View组件一般通过XML布局资源文件定义，同时Android系统也对这些View组件提供了对应的实现类。如果需要通过某个Activity把指定的View组件显示出来，调用Activity的setContentView()方法即可，它具有多个重载方法，可以传递一个XML资源ID或者View对象。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinearLayout layout=<span class=\"keyword\">new</span> LinearLayout(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">setContentView(layout)；</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContentView(R.layout.main);</span><br></pre></td></tr></table></figure>\n\n<p>Activity为Android应用提供了一个用户界面，当一个Activity被开启之后，它具有自己的生命周期。Activity类也对这些生命周期提供了对应的方法，如果需要对Activity各个不同的生命周期做出响应，可以重写这些生命周期方法实现。对于大多数商业应用而言，整个系统中包含了多个Activity，在应用中逐步导航跳转开启这些Activity之后，会形成Activity的回退栈，当前显示并获得焦点的Activity位于这个回退栈的栈顶。</p>\n<h2 id=\"服务（Service）\"><a href=\"#服务（Service）\" class=\"headerlink\" title=\"服务（Service）\"></a>服务（Service）</h2><p>Service主要用于在后台完成一些无需向用户展示界面的功能实现。通常位于系统后台运行，它一般不需要与用户进行交互，因此Service组件没有用户界面展示给用户。Service主要用于完成一些类似于下载文件、播放音乐等无需用户界面与用户进行交互的功能。<br>与Activity组件需要继承Activity类相似，Service组件同样需要继承Service类，Service类也是Context的间接子类，其中包装了一些Service的专有特性。一个Service被运行起来之后，它将具有自己独立的生命周期，Service类中对其各个不同的生命周期提供了对应的方法，开发人员可以通过在Service中重写Service类中这些生命周期方法，来响应Service各个生命周期的功能实现。</p>\n<h2 id=\"广播接收器（BroadcastReceiver）\"><a href=\"#广播接收器（BroadcastReceiver）\" class=\"headerlink\" title=\"广播接收器（BroadcastReceiver）\"></a>广播接收器（BroadcastReceiver）</h2><p>BroadcastReceiver同样也是Android系统中的一个重要组件，BroadcastReceiver代表了一个广播接收器，用于接收系统中其它组件发送的广播，并对其进行响应或是拦截广播的继续传播。<br>广播是一个系统级的消息，当系统环境发生改变的时候会发送一些广播供对应的程序进行接收响应，例如：接收到一条短信、开机、关机、插上充电器、插上耳机、充电完成等，均会发送一条广播供需要监听此类广播的应用进行响应。除了一些系统事件的广播，开发人员也可以自定义广播内容。但是大部分情况下，开发应用的时候主要用于接受系统广播并对其进行响应，很少需要发送自定义的广播。<br>使用BroadcastReceiver组件接收广播非常的简单，只需要实现自己的BroadcastReceiver子类，并重写onReceive()方法，就能完成BroadcastReceiver，而对于这个BroadcastReceiver对什么广播感兴趣，则需要对其进行另行配置。</p>\n<h2 id=\"内容提供者（ContentProvider）\"><a href=\"#内容提供者（ContentProvider）\" class=\"headerlink\" title=\"内容提供者（ContentProvider）\"></a>内容提供者（ContentProvider）</h2><p>Android系统作为一个智能操作系统，它需要系统中运行的应用程序都必须是相互独立的，各自运行在自己的Dalvik VM实例中。在正常情况下，Android应用之间是不能进行实时的数据交换，而考虑到有些应用的数据需要对外进行共享，Android系统提供了一个标准的数据接口ContentProvider，通过应用提供的ContentProvider，可以在其它应用中对这个应用的暴露出来的数据进行增删改查。<br>为应用程序暴露数据接口非常的简单，只需要继承ContentProvider类，并且实现insert()、delete()、update()、query()等方法，使外部应用可对本应用的数据进行增删改查。</p>\n<h2 id=\"意图（Intent）\"><a href=\"#意图（Intent）\" class=\"headerlink\" title=\"意图（Intent）\"></a>意图（Intent）</h2><p>虽然Intent并不是Android应用的组件，也无需专门在清单文件中配置，但是它对于Android应用的作用非常的大。除了ContentProvider之外，其它组件的启动，均需要通过Intent进行指定。Intent不仅可以明确指定一个Android组件进行启动，还可以提供一个标准的行为，再由Android系统配合意图过滤器来选定启动指定组件来完成任务。而Intent在开启对组件的过程中，进行各个组件间数据的传递。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本章简要介绍了Android系统的发展史及其现状，并且介绍了Android系统的架构与Dalvik VM虚拟机，最后还简单介绍了Android开发中的四大组件。通过阅读本章，对Android的历史与现状、系统架构、基本组件有个大致的了解，这对本书接下来的内容理解非常有帮助。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Android系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest.xml中进行注册，否则不予使用。本小节将对这些组件进行简单的介绍，使读者对Android应用开发的内容有一个大致的认识。</p>\n<h2 id=\"活动（Activity）\"><a href=\"#活动（Activity）\" class=\"headerlink\" title=\"活动（Activity）\"></a>活动（Activity）</h2><p>Activity是Android应用中，最直接与用户接触的组件，它负责加载View组件，使其展现给用户，并保持与用户的交互。所有的Activity组件均需要继承Activity类，这是一个Content的间接子类，包装了一些Activity的基本特性。</p>\n<p>View组件是所有UI组件、容器组件的基类，也就是说，它可以是一个布局容器，也可以是一个布局容器内的基本UI组件。View组件一般通过XML布局资源文件定义，同时Android系统也对这些View组件提供了对应的实现类。如果需要通过某个Activity把指定的View组件显示出来，调用Activity的setContentView()方法即可，它具有多个重载方法，可以传递一个XML资源ID或者View对象。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinearLayout layout=<span class=\"keyword\">new</span> LinearLayout(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">setContentView(layout)；</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContentView(R.layout.main);</span><br></pre></td></tr></table></figure>\n\n<p>Activity为Android应用提供了一个用户界面，当一个Activity被开启之后，它具有自己的生命周期。Activity类也对这些生命周期提供了对应的方法，如果需要对Activity各个不同的生命周期做出响应，可以重写这些生命周期方法实现。对于大多数商业应用而言，整个系统中包含了多个Activity，在应用中逐步导航跳转开启这些Activity之后，会形成Activity的回退栈，当前显示并获得焦点的Activity位于这个回退栈的栈顶。</p>\n<h2 id=\"服务（Service）\"><a href=\"#服务（Service）\" class=\"headerlink\" title=\"服务（Service）\"></a>服务（Service）</h2><p>Service主要用于在后台完成一些无需向用户展示界面的功能实现。通常位于系统后台运行，它一般不需要与用户进行交互，因此Service组件没有用户界面展示给用户。Service主要用于完成一些类似于下载文件、播放音乐等无需用户界面与用户进行交互的功能。<br>与Activity组件需要继承Activity类相似，Service组件同样需要继承Service类，Service类也是Context的间接子类，其中包装了一些Service的专有特性。一个Service被运行起来之后，它将具有自己独立的生命周期，Service类中对其各个不同的生命周期提供了对应的方法，开发人员可以通过在Service中重写Service类中这些生命周期方法，来响应Service各个生命周期的功能实现。</p>\n<h2 id=\"广播接收器（BroadcastReceiver）\"><a href=\"#广播接收器（BroadcastReceiver）\" class=\"headerlink\" title=\"广播接收器（BroadcastReceiver）\"></a>广播接收器（BroadcastReceiver）</h2><p>BroadcastReceiver同样也是Android系统中的一个重要组件，BroadcastReceiver代表了一个广播接收器，用于接收系统中其它组件发送的广播，并对其进行响应或是拦截广播的继续传播。<br>广播是一个系统级的消息，当系统环境发生改变的时候会发送一些广播供对应的程序进行接收响应，例如：接收到一条短信、开机、关机、插上充电器、插上耳机、充电完成等，均会发送一条广播供需要监听此类广播的应用进行响应。除了一些系统事件的广播，开发人员也可以自定义广播内容。但是大部分情况下，开发应用的时候主要用于接受系统广播并对其进行响应，很少需要发送自定义的广播。<br>使用BroadcastReceiver组件接收广播非常的简单，只需要实现自己的BroadcastReceiver子类，并重写onReceive()方法，就能完成BroadcastReceiver，而对于这个BroadcastReceiver对什么广播感兴趣，则需要对其进行另行配置。</p>\n<h2 id=\"内容提供者（ContentProvider）\"><a href=\"#内容提供者（ContentProvider）\" class=\"headerlink\" title=\"内容提供者（ContentProvider）\"></a>内容提供者（ContentProvider）</h2><p>Android系统作为一个智能操作系统，它需要系统中运行的应用程序都必须是相互独立的，各自运行在自己的Dalvik VM实例中。在正常情况下，Android应用之间是不能进行实时的数据交换，而考虑到有些应用的数据需要对外进行共享，Android系统提供了一个标准的数据接口ContentProvider，通过应用提供的ContentProvider，可以在其它应用中对这个应用的暴露出来的数据进行增删改查。<br>为应用程序暴露数据接口非常的简单，只需要继承ContentProvider类，并且实现insert()、delete()、update()、query()等方法，使外部应用可对本应用的数据进行增删改查。</p>\n<h2 id=\"意图（Intent）\"><a href=\"#意图（Intent）\" class=\"headerlink\" title=\"意图（Intent）\"></a>意图（Intent）</h2><p>虽然Intent并不是Android应用的组件，也无需专门在清单文件中配置，但是它对于Android应用的作用非常的大。除了ContentProvider之外，其它组件的启动，均需要通过Intent进行指定。Intent不仅可以明确指定一个Android组件进行启动，还可以提供一个标准的行为，再由Android系统配合意图过滤器来选定启动指定组件来完成任务。而Intent在开启对组件的过程中，进行各个组件间数据的传递。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本章简要介绍了Android系统的发展史及其现状，并且介绍了Android系统的架构与Dalvik VM虚拟机，最后还简单介绍了Android开发中的四大组件。通过阅读本章，对Android的历史与现状、系统架构、基本组件有个大致的了解，这对本书接下来的内容理解非常有帮助。</p>\n"},{"title":"android发展史及系统架构","author":"JsonYe","copyright":true,"date":"2015-04-29T09:32:00.000Z","_content":"\n## 1.1 Android发展史与现状\n\nAndy Rubin创立22个月后→（2005年）Google收购。\n\n2008 Patrick Brady于Google I/O 演讲“Anatomy & Physiology of an Android”，并提出的 Android HAL 架构图。\n\n### Android版本升级  \nAndroid系统今后将继续每半年一次的升级步伐，分别定在每年的夏天和年终。每代Android系统都将以食物命名，比如1.5版叫做 Cupcake(纸杯蛋糕)，1.6版为Donut(甜甜圈)，然后是Eclair(法式奶油夹心甜点)和Flan(水果馅饼)。Donut将把社交网络功能作为升级重点，在“手机的各种体验中”都增加社交网络元素。  \n#### 1.5 (Cupcake)  \n基于Linux Kernel 2.6.27 2009年4月30日，官方1.5版本(Cupcake)的Android发布。主要的更新如下:  \n● 拍摄/回放视频，并支持上传到youtube  \n● 支持立体声蓝牙耳机，同时改善自动配对性能  \n● 最新的采用WebKit技术的浏览器，支持拷贝/粘帖和页面中搜索  \n● GPS性能大大提高  \n● 屏幕虚拟键盘  \n● 主屏幕增加音乐播放器和相框widgets  \n● 应用程序自动随着手机旋转  \n● 短信，Gmail，日历，浏览器的用户界面大幅改善，比如说Gmail现在可以批量删除邮件了  \n● 相机启动速度加快，拍摄图片可以直接上传到picasa  \n● 来电照片显示  \n#### 1.6 (Donut)  \n基于Linux Kernel 2.6.29 2009年9月15日, 1.6(Donut)版本SDK发布。主要的更新如下:  \n● 完全重新设计的Android Market  \n● 手势支持  \n● 支持CDMA网络  \n● 文字转语音系统(TXT-2-speech)  \n● 快速搜索框  \n● 全新的拍照界面  \n● 应用程序耗电查看  \n● 支持VPN  \n● 支持更多的屏幕分辨率  \n● 支持OpenCore2媒体引擎  \n● 新增面向视觉或听觉困难人群的易用性插件  \n#### 2.0/2.0.1/2.1(Eclair)  \n基于Linux Kernel 2.6.29 2009年10月26日, 2.0(Eclair)版本SDK发布。主要的更新如下:  \n● 优化硬件速度  \n● \"Car Home\"程序  \n● 支持更多的屏幕分辨率  \n● 重整界面  \n● 新的浏览器的用户界面和支持HTML5  \n● 新的联系人名单  \n● 更好的白色/黑色背景比率  \n● 改进Google Maps 3.1.2  \n● 支持Microsoft Exchange  \n● 支持内置相机闪光灯  \n● 数字变焦  \n● 改进的虚拟键盘  \n● 蓝牙2.1  \nAndroid的代号序列会按甜点名字中首个英文字母(C、D、E、F)的排列顺序。  \n下一个版本的Android将会命名为Froyo(冻酸奶,基于Linux Kernel 2.6.32)。Froyo 之后的版本的Android将会命名为Gingerbread(姜饼,基于Linux Kernel 2.6.33/34)。\n\n**Android****版本**\n\n**发布日期**\n\n**代号**\n\n**Android 1.1**\n\n**Android 1.5**\n\n2009年4月30日\n\nCupcake（纸杯蛋糕）\n\n**Android 1.6**\n\n2009年9月15日\n\nDonut（炸面圈）\n\n**Android 2.0/2.1**\n\n2009年10月26日\n\nEclair（长松饼）\n\n**Android 2.2**\n\n2010年5月20日\n\nFroyo（冻酸奶）\n\n**Android 2.3**\n\n2010年12月6日\n\nGingerbread（姜饼）\n\n**Android 3.0/3.1/3.2**\n\n2011年2月22日\n\nHoneycomb（蜂巢）\n\n**Android 4.0**\n\n2011年10月19日\n\nIce Cream Sandwich（冰淇淋三明治）\n\n**Android 4.1**\n\n2012年6月28日\n\nJelly Bean（果冻豆）\n\n**Android 4.2**\n\n2012年10月8日\n\nJelly Bean（果冻豆）\n\n**Android5.0**\n\n待定\n\nLime Pie（酸橙派）\n\n### 1.2 Android系统的架构与特性\n\n#### 1.2.1 Android系统架构\n\nAndroid系统的底层是建立在Linux系统之上的，它采用软件叠层（Software Stack）的方式进行构建。使得层与层之间相互分离，明确各层的分工。这种分工保证了层与层之间的低苟合，当下层发生改变的时候，上层应用程序无需做任何改变。\n\n下图为Android系统的系统架构图：\n\n![](http://s1.51cto.com/wyfs02/M01/25/73/wKioL1NgW-Si7ae7AAEJ_vZkaJ0908.jpg)\n\n如图可知，Android系统分为四个层，从高到底分别是：应用程序层（Application）、应用程序框架层（Application Framework）、系统运行库层（Libraries）和Linux内核层（Linux Kernel）。\n\nAndroid操作系统可以在四个主要层面上分为5个部分：\n\n##### 1\\. 应用程序层（Application）\n\nAndroid系统包含了一系列核心应用程序，包括电子邮件、短信SMS、日历、拨号器、地图、浏览器、联系人等。这些应用程序都是用Java语言编写。本书重点讲解如何编写Android系统上运行的应用程序，在程序分层上，与系统核心应用程序平级。\n\n##### 2\\. 应用程序框架层（Application Framework）\n\nAndroid应用程序框架提供了大量的API供开发人员使用，Android应用程序的开发，就是调用这些API，根据需求实现功能。\n\n应用程序框架是应用程序的基础。为了软件的复用，任何一个应用程序都可以开发Android系统的功能模块，只要发布的时候遵循应用程序框架的规范，其它应用程序也可以使用这个功能模块。\n\n##### 3\\. 系统运行库层（Libraries）**\n\nAndroid系统运行库是用C/C++语言编写的，是一套被不同组件所使用的函数库组成的集合。一般来说，Android应用开发者无法直接调用这套函数库，都是通过它上层的应用程序框架提供的API来对这些函数库进行调用。\n\n下面对一些核心库进行简单的介绍：\n\n> **Libc：**从BSD系统派生出来的标准C系统库，在此基础之上，为了便携式Linux系统专门进行了调整。\n> \n> **Medio Framework：**基于PacketView的OpenCORE，这套媒体库支持播放与录制硬盘及视频格式的文件，并能查看静态图片。\n> \n> **Surface Manager：**在执行多个应用程序的时，负责管理显示与存取操作间的互动，同时负责2D绘图与3D绘图进行显示合成。\n> \n> **WebKit：**Web浏览器引擎，该引擎为Android浏览器提供支持。\n> \n> **SGL：**底层的2D图像引擎。\n> \n> **3D libraries：**基于OpenGL ES 1.0API，提供使用软硬件实现3D加速的功能。\n> \n> **FreeType：**提供位图和向量字体的支持。\n> \n> **SQLite：**轻量级的关系型数据库。\n\n\n##### 4\\. Android运行时**\n\n    Android运行时由两部分完成：Android核心库和Dalvik虚拟机。其中核心库集提供了Java语言核心库所能使用的绝大部分功能，Dalvik虚拟机负责运行Android应用程序。\n\n    虽然Android应用程序通过Java语言编写，而每个Java程序都会在Java虚拟机JVM内运行，但是Android系统毕竟是运行在移动设备上的，由于硬件的限制， Android应用程序并不使用Java的虚拟机JVM来运行程序，而是使用自己独立的虚拟机Dalvik VM，它针对多个同时高效运行的虚拟机进行了优化。每个Android应用程序都运行在单独的一个Dalvik虚拟机内，因此Android系统可以方便对应用程序进行隔离。\n\n##### 5\\. Linux内核\n\nAndroid系统是基于Linux2.6之上建立的操作系统，它的Linux内核为Android系统提供了安全性、内存管理、进程管理、网络协议栈、驱动模型等核心系统服务。Linux内核帮助Android系统实现了底层硬件与上层软件之间的抽象。\n\n#### 1.2.2 Dalvik VM和JVM的区别\n\nJVM（Java虚拟机）是一个虚构出来的运行Java程序的运行时，是通过在实际的计算机上仿真模拟各种计算机功能的实现。它具有完善的硬件架构（如处理器、堆栈、寄存器等），还具有相应的指令系统，使用JVM就是使Java程序支持与操作系统无关。理论上在任何操作系统中，只要有对应的JVM，即可运行Java程序。\n\nDalvik VM是在Android系统上运行Android程序的虚拟机，其指令集是基于寄存器架构的，执行特有的文件格式-dex字节码来完成对象生命周期管理、堆栈管理、线程管理、安全异常管理、垃圾回收等重要功能。\n\n由于Android应用程序的开发编程语言是Java，而Java程序运行在JVM（Java虚拟机）上的，因此有些人会把Android的虚拟机DalvikVM和JVM弄混淆，但是实际上Dalvik并未遵守JVM规范，而且两者也是互不兼容。\n\n从Dalvik VM和JVM的编译过程分析，它们的编译过程如下：\n\n```\nJVM：.java→.class→.jar\nDalvik VM：.java→.class→.dex\n```\n\n从它们的编译过程可以看出，JVM运行的是.class文件的Java字节码，但是Dalvik VM运行的是其转换后的dex（Dalvik Executable）文件。JVM字节从.class文件或者JAR包中加载字节码然后运行，而Dalvik VM无法直接从.class文件或JAR包中加载字节码，它需要通过DX工具将应用程序所有的.class文件编译成一个.dex文件，Dalvik VM则运行这个.dex文件。\n\n下图显示了Dalvik VM与JVM编译过程的区别：\n\n![](http://s4.51cto.com/wyfs02/M01/25/73/wKiom1NgXMOTVyNiAAB-h8_94xE986.jpg)\n\n从图中可以看出，Dalvik VM把.java文件编译成.class后，会对.class进行重构，整合的基本元素（常量池、类定义、数据段）,最后压缩写进一个.dex文件中。其中，常量池描述了所有的常量，包括引用、方法名、数值常量等；类定义包括访问标识、类名等基本信息；数据段中包含各种被VM指定的方法代码以及类和方法的相关信息和实例变量。这种把多个.class文件进行整合的方法，大大提高了Android程序的运行速度，例如：应用程序中多个类定义了字符串常量TAG，而在JVM中，会编译成多个.class文件，每个.class文件的常量池中，均包含这个TAG常量，但是Dalvik VM在编译成.dex文件之后，其常量池里只有一个TAG常量。\n\nJVM和Dalvik VM还有一点非常重要的不同，就是基于的架构不同。JVM是基于栈的架构，而Dalvik VM是基于寄存器的架构。相对于基于栈的JVM而言，基于寄存器的Dalvik VM实现虽然牺牲了一些硬件上的通用性，但是它在代码的执行效率上要更胜一筹。一般来讲，VM中指令的解释执行的时间主要花费在以下三个方面：\n\n> 分发指令；\n> \n> 访问运算数；\n> \n> 执行运算；\n\n\n其中分发指令这个环节对性能的影响最大。在基于寄存器的Dalvik VM中，可以更有效的减少冗余指令的分发，减少内存的读写访问。\n\n从JVM和Dalvik VM的区别上来说，Dalvik VM主要是针对Android这个嵌入式操作系统的特点进行了各种优化，使其更省电、更省内存、运行效率更高，但是牺牲了一些JVM的与平台无关的特性。实际上，Dalvik VM本就是为Android设计的，无需考虑其它平台的问题。这里只是介绍了JVM和Dalvik VM的两个重要的区别，毕竟本书并不是讲解Android内核的，这里只是点明Dalvik VM的特点，读者对这部分的内容了解即可。\n\n### 1.2.3 Android系统平台的优势\n\nAndroid系统相对于其它操作系统，有如下几点优势：\n\n#### 1. 开放性\n\n首先就是Android系统的开放性，其开发平台允许任何移动终端厂商加入到Android联盟中来，降低了开发门槛，使其拥有更多的开发者，随着用户和应用的日益丰富，也将推进Android系统的成熟。同时，开放性有利于Android设备的普及以及市场竞争力，这样有利于消费者买到更低价位的Android设备。\n\n#### 2. 丰富的硬件选择\n\n同样由于Android系统的开放性，众多硬件厂商可以推出各种的搭载Android系统的设备。现如今，Android系统不仅仅只是运行在手机上，越来越多的设备开始支持Android系统，如电视、可佩戴设备、数码相机等。\n\n#### 3. 便于开发\n\nGoogle开放了Android的系统源码，提供了开发者一个自由的开发环境，不必受到各种条条框框的束缚。\n\n#### 4. Google服务的支持\n\nGoogle公司作为一个做服务的公司，它提供了如地图、邮件、搜索等服务，Android系统可以对这些服务进行无缝的结合。","source":"_posts/android/base/android发展史及系统架构.md","raw":"title: android发展史及系统架构\nauthor: JsonYe\ntags:\n  - Android\ncategories:\n  - Android基础\ncopyright: true\ndate: 2015-04-29 17:32:00\n---\n\n## 1.1 Android发展史与现状\n\nAndy Rubin创立22个月后→（2005年）Google收购。\n\n2008 Patrick Brady于Google I/O 演讲“Anatomy & Physiology of an Android”，并提出的 Android HAL 架构图。\n\n### Android版本升级  \nAndroid系统今后将继续每半年一次的升级步伐，分别定在每年的夏天和年终。每代Android系统都将以食物命名，比如1.5版叫做 Cupcake(纸杯蛋糕)，1.6版为Donut(甜甜圈)，然后是Eclair(法式奶油夹心甜点)和Flan(水果馅饼)。Donut将把社交网络功能作为升级重点，在“手机的各种体验中”都增加社交网络元素。  \n#### 1.5 (Cupcake)  \n基于Linux Kernel 2.6.27 2009年4月30日，官方1.5版本(Cupcake)的Android发布。主要的更新如下:  \n● 拍摄/回放视频，并支持上传到youtube  \n● 支持立体声蓝牙耳机，同时改善自动配对性能  \n● 最新的采用WebKit技术的浏览器，支持拷贝/粘帖和页面中搜索  \n● GPS性能大大提高  \n● 屏幕虚拟键盘  \n● 主屏幕增加音乐播放器和相框widgets  \n● 应用程序自动随着手机旋转  \n● 短信，Gmail，日历，浏览器的用户界面大幅改善，比如说Gmail现在可以批量删除邮件了  \n● 相机启动速度加快，拍摄图片可以直接上传到picasa  \n● 来电照片显示  \n#### 1.6 (Donut)  \n基于Linux Kernel 2.6.29 2009年9月15日, 1.6(Donut)版本SDK发布。主要的更新如下:  \n● 完全重新设计的Android Market  \n● 手势支持  \n● 支持CDMA网络  \n● 文字转语音系统(TXT-2-speech)  \n● 快速搜索框  \n● 全新的拍照界面  \n● 应用程序耗电查看  \n● 支持VPN  \n● 支持更多的屏幕分辨率  \n● 支持OpenCore2媒体引擎  \n● 新增面向视觉或听觉困难人群的易用性插件  \n#### 2.0/2.0.1/2.1(Eclair)  \n基于Linux Kernel 2.6.29 2009年10月26日, 2.0(Eclair)版本SDK发布。主要的更新如下:  \n● 优化硬件速度  \n● \"Car Home\"程序  \n● 支持更多的屏幕分辨率  \n● 重整界面  \n● 新的浏览器的用户界面和支持HTML5  \n● 新的联系人名单  \n● 更好的白色/黑色背景比率  \n● 改进Google Maps 3.1.2  \n● 支持Microsoft Exchange  \n● 支持内置相机闪光灯  \n● 数字变焦  \n● 改进的虚拟键盘  \n● 蓝牙2.1  \nAndroid的代号序列会按甜点名字中首个英文字母(C、D、E、F)的排列顺序。  \n下一个版本的Android将会命名为Froyo(冻酸奶,基于Linux Kernel 2.6.32)。Froyo 之后的版本的Android将会命名为Gingerbread(姜饼,基于Linux Kernel 2.6.33/34)。\n\n**Android****版本**\n\n**发布日期**\n\n**代号**\n\n**Android 1.1**\n\n**Android 1.5**\n\n2009年4月30日\n\nCupcake（纸杯蛋糕）\n\n**Android 1.6**\n\n2009年9月15日\n\nDonut（炸面圈）\n\n**Android 2.0/2.1**\n\n2009年10月26日\n\nEclair（长松饼）\n\n**Android 2.2**\n\n2010年5月20日\n\nFroyo（冻酸奶）\n\n**Android 2.3**\n\n2010年12月6日\n\nGingerbread（姜饼）\n\n**Android 3.0/3.1/3.2**\n\n2011年2月22日\n\nHoneycomb（蜂巢）\n\n**Android 4.0**\n\n2011年10月19日\n\nIce Cream Sandwich（冰淇淋三明治）\n\n**Android 4.1**\n\n2012年6月28日\n\nJelly Bean（果冻豆）\n\n**Android 4.2**\n\n2012年10月8日\n\nJelly Bean（果冻豆）\n\n**Android5.0**\n\n待定\n\nLime Pie（酸橙派）\n\n### 1.2 Android系统的架构与特性\n\n#### 1.2.1 Android系统架构\n\nAndroid系统的底层是建立在Linux系统之上的，它采用软件叠层（Software Stack）的方式进行构建。使得层与层之间相互分离，明确各层的分工。这种分工保证了层与层之间的低苟合，当下层发生改变的时候，上层应用程序无需做任何改变。\n\n下图为Android系统的系统架构图：\n\n![](http://s1.51cto.com/wyfs02/M01/25/73/wKioL1NgW-Si7ae7AAEJ_vZkaJ0908.jpg)\n\n如图可知，Android系统分为四个层，从高到底分别是：应用程序层（Application）、应用程序框架层（Application Framework）、系统运行库层（Libraries）和Linux内核层（Linux Kernel）。\n\nAndroid操作系统可以在四个主要层面上分为5个部分：\n\n##### 1\\. 应用程序层（Application）\n\nAndroid系统包含了一系列核心应用程序，包括电子邮件、短信SMS、日历、拨号器、地图、浏览器、联系人等。这些应用程序都是用Java语言编写。本书重点讲解如何编写Android系统上运行的应用程序，在程序分层上，与系统核心应用程序平级。\n\n##### 2\\. 应用程序框架层（Application Framework）\n\nAndroid应用程序框架提供了大量的API供开发人员使用，Android应用程序的开发，就是调用这些API，根据需求实现功能。\n\n应用程序框架是应用程序的基础。为了软件的复用，任何一个应用程序都可以开发Android系统的功能模块，只要发布的时候遵循应用程序框架的规范，其它应用程序也可以使用这个功能模块。\n\n##### 3\\. 系统运行库层（Libraries）**\n\nAndroid系统运行库是用C/C++语言编写的，是一套被不同组件所使用的函数库组成的集合。一般来说，Android应用开发者无法直接调用这套函数库，都是通过它上层的应用程序框架提供的API来对这些函数库进行调用。\n\n下面对一些核心库进行简单的介绍：\n\n> **Libc：**从BSD系统派生出来的标准C系统库，在此基础之上，为了便携式Linux系统专门进行了调整。\n> \n> **Medio Framework：**基于PacketView的OpenCORE，这套媒体库支持播放与录制硬盘及视频格式的文件，并能查看静态图片。\n> \n> **Surface Manager：**在执行多个应用程序的时，负责管理显示与存取操作间的互动，同时负责2D绘图与3D绘图进行显示合成。\n> \n> **WebKit：**Web浏览器引擎，该引擎为Android浏览器提供支持。\n> \n> **SGL：**底层的2D图像引擎。\n> \n> **3D libraries：**基于OpenGL ES 1.0API，提供使用软硬件实现3D加速的功能。\n> \n> **FreeType：**提供位图和向量字体的支持。\n> \n> **SQLite：**轻量级的关系型数据库。\n\n\n##### 4\\. Android运行时**\n\n    Android运行时由两部分完成：Android核心库和Dalvik虚拟机。其中核心库集提供了Java语言核心库所能使用的绝大部分功能，Dalvik虚拟机负责运行Android应用程序。\n\n    虽然Android应用程序通过Java语言编写，而每个Java程序都会在Java虚拟机JVM内运行，但是Android系统毕竟是运行在移动设备上的，由于硬件的限制， Android应用程序并不使用Java的虚拟机JVM来运行程序，而是使用自己独立的虚拟机Dalvik VM，它针对多个同时高效运行的虚拟机进行了优化。每个Android应用程序都运行在单独的一个Dalvik虚拟机内，因此Android系统可以方便对应用程序进行隔离。\n\n##### 5\\. Linux内核\n\nAndroid系统是基于Linux2.6之上建立的操作系统，它的Linux内核为Android系统提供了安全性、内存管理、进程管理、网络协议栈、驱动模型等核心系统服务。Linux内核帮助Android系统实现了底层硬件与上层软件之间的抽象。\n\n#### 1.2.2 Dalvik VM和JVM的区别\n\nJVM（Java虚拟机）是一个虚构出来的运行Java程序的运行时，是通过在实际的计算机上仿真模拟各种计算机功能的实现。它具有完善的硬件架构（如处理器、堆栈、寄存器等），还具有相应的指令系统，使用JVM就是使Java程序支持与操作系统无关。理论上在任何操作系统中，只要有对应的JVM，即可运行Java程序。\n\nDalvik VM是在Android系统上运行Android程序的虚拟机，其指令集是基于寄存器架构的，执行特有的文件格式-dex字节码来完成对象生命周期管理、堆栈管理、线程管理、安全异常管理、垃圾回收等重要功能。\n\n由于Android应用程序的开发编程语言是Java，而Java程序运行在JVM（Java虚拟机）上的，因此有些人会把Android的虚拟机DalvikVM和JVM弄混淆，但是实际上Dalvik并未遵守JVM规范，而且两者也是互不兼容。\n\n从Dalvik VM和JVM的编译过程分析，它们的编译过程如下：\n\n```\nJVM：.java→.class→.jar\nDalvik VM：.java→.class→.dex\n```\n\n从它们的编译过程可以看出，JVM运行的是.class文件的Java字节码，但是Dalvik VM运行的是其转换后的dex（Dalvik Executable）文件。JVM字节从.class文件或者JAR包中加载字节码然后运行，而Dalvik VM无法直接从.class文件或JAR包中加载字节码，它需要通过DX工具将应用程序所有的.class文件编译成一个.dex文件，Dalvik VM则运行这个.dex文件。\n\n下图显示了Dalvik VM与JVM编译过程的区别：\n\n![](http://s4.51cto.com/wyfs02/M01/25/73/wKiom1NgXMOTVyNiAAB-h8_94xE986.jpg)\n\n从图中可以看出，Dalvik VM把.java文件编译成.class后，会对.class进行重构，整合的基本元素（常量池、类定义、数据段）,最后压缩写进一个.dex文件中。其中，常量池描述了所有的常量，包括引用、方法名、数值常量等；类定义包括访问标识、类名等基本信息；数据段中包含各种被VM指定的方法代码以及类和方法的相关信息和实例变量。这种把多个.class文件进行整合的方法，大大提高了Android程序的运行速度，例如：应用程序中多个类定义了字符串常量TAG，而在JVM中，会编译成多个.class文件，每个.class文件的常量池中，均包含这个TAG常量，但是Dalvik VM在编译成.dex文件之后，其常量池里只有一个TAG常量。\n\nJVM和Dalvik VM还有一点非常重要的不同，就是基于的架构不同。JVM是基于栈的架构，而Dalvik VM是基于寄存器的架构。相对于基于栈的JVM而言，基于寄存器的Dalvik VM实现虽然牺牲了一些硬件上的通用性，但是它在代码的执行效率上要更胜一筹。一般来讲，VM中指令的解释执行的时间主要花费在以下三个方面：\n\n> 分发指令；\n> \n> 访问运算数；\n> \n> 执行运算；\n\n\n其中分发指令这个环节对性能的影响最大。在基于寄存器的Dalvik VM中，可以更有效的减少冗余指令的分发，减少内存的读写访问。\n\n从JVM和Dalvik VM的区别上来说，Dalvik VM主要是针对Android这个嵌入式操作系统的特点进行了各种优化，使其更省电、更省内存、运行效率更高，但是牺牲了一些JVM的与平台无关的特性。实际上，Dalvik VM本就是为Android设计的，无需考虑其它平台的问题。这里只是介绍了JVM和Dalvik VM的两个重要的区别，毕竟本书并不是讲解Android内核的，这里只是点明Dalvik VM的特点，读者对这部分的内容了解即可。\n\n### 1.2.3 Android系统平台的优势\n\nAndroid系统相对于其它操作系统，有如下几点优势：\n\n#### 1. 开放性\n\n首先就是Android系统的开放性，其开发平台允许任何移动终端厂商加入到Android联盟中来，降低了开发门槛，使其拥有更多的开发者，随着用户和应用的日益丰富，也将推进Android系统的成熟。同时，开放性有利于Android设备的普及以及市场竞争力，这样有利于消费者买到更低价位的Android设备。\n\n#### 2. 丰富的硬件选择\n\n同样由于Android系统的开放性，众多硬件厂商可以推出各种的搭载Android系统的设备。现如今，Android系统不仅仅只是运行在手机上，越来越多的设备开始支持Android系统，如电视、可佩戴设备、数码相机等。\n\n#### 3. 便于开发\n\nGoogle开放了Android的系统源码，提供了开发者一个自由的开发环境，不必受到各种条条框框的束缚。\n\n#### 4. Google服务的支持\n\nGoogle公司作为一个做服务的公司，它提供了如地图、邮件、搜索等服务，Android系统可以对这些服务进行无缝的结合。","slug":"android/base/android发展史及系统架构","published":1,"updated":"2019-10-02T08:40:59.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck190wvd10014rowkruexoddf","content":"<h2 id=\"1-1-Android发展史与现状\"><a href=\"#1-1-Android发展史与现状\" class=\"headerlink\" title=\"1.1 Android发展史与现状\"></a>1.1 Android发展史与现状</h2><p>Andy Rubin创立22个月后→（2005年）Google收购。</p>\n<p>2008 Patrick Brady于Google I/O 演讲“Anatomy &amp; Physiology of an Android”，并提出的 Android HAL 架构图。</p>\n<h3 id=\"Android版本升级\"><a href=\"#Android版本升级\" class=\"headerlink\" title=\"Android版本升级\"></a>Android版本升级</h3><p>Android系统今后将继续每半年一次的升级步伐，分别定在每年的夏天和年终。每代Android系统都将以食物命名，比如1.5版叫做 Cupcake(纸杯蛋糕)，1.6版为Donut(甜甜圈)，然后是Eclair(法式奶油夹心甜点)和Flan(水果馅饼)。Donut将把社交网络功能作为升级重点，在“手机的各种体验中”都增加社交网络元素。  </p>\n<h4 id=\"1-5-Cupcake\"><a href=\"#1-5-Cupcake\" class=\"headerlink\" title=\"1.5 (Cupcake)\"></a>1.5 (Cupcake)</h4><p>基于Linux Kernel 2.6.27 2009年4月30日，官方1.5版本(Cupcake)的Android发布。主要的更新如下:<br>● 拍摄/回放视频，并支持上传到youtube<br>● 支持立体声蓝牙耳机，同时改善自动配对性能<br>● 最新的采用WebKit技术的浏览器，支持拷贝/粘帖和页面中搜索<br>● GPS性能大大提高<br>● 屏幕虚拟键盘<br>● 主屏幕增加音乐播放器和相框widgets<br>● 应用程序自动随着手机旋转<br>● 短信，Gmail，日历，浏览器的用户界面大幅改善，比如说Gmail现在可以批量删除邮件了<br>● 相机启动速度加快，拍摄图片可以直接上传到picasa<br>● 来电照片显示  </p>\n<h4 id=\"1-6-Donut\"><a href=\"#1-6-Donut\" class=\"headerlink\" title=\"1.6 (Donut)\"></a>1.6 (Donut)</h4><p>基于Linux Kernel 2.6.29 2009年9月15日, 1.6(Donut)版本SDK发布。主要的更新如下:<br>● 完全重新设计的Android Market<br>● 手势支持<br>● 支持CDMA网络<br>● 文字转语音系统(TXT-2-speech)<br>● 快速搜索框<br>● 全新的拍照界面<br>● 应用程序耗电查看<br>● 支持VPN<br>● 支持更多的屏幕分辨率<br>● 支持OpenCore2媒体引擎<br>● 新增面向视觉或听觉困难人群的易用性插件  </p>\n<h4 id=\"2-0-2-0-1-2-1-Eclair\"><a href=\"#2-0-2-0-1-2-1-Eclair\" class=\"headerlink\" title=\"2.0/2.0.1/2.1(Eclair)\"></a>2.0/2.0.1/2.1(Eclair)</h4><p>基于Linux Kernel 2.6.29 2009年10月26日, 2.0(Eclair)版本SDK发布。主要的更新如下:<br>● 优化硬件速度<br>● “Car Home”程序<br>● 支持更多的屏幕分辨率<br>● 重整界面<br>● 新的浏览器的用户界面和支持HTML5<br>● 新的联系人名单<br>● 更好的白色/黑色背景比率<br>● 改进Google Maps 3.1.2<br>● 支持Microsoft Exchange<br>● 支持内置相机闪光灯<br>● 数字变焦<br>● 改进的虚拟键盘<br>● 蓝牙2.1<br>Android的代号序列会按甜点名字中首个英文字母(C、D、E、F)的排列顺序。<br>下一个版本的Android将会命名为Froyo(冻酸奶,基于Linux Kernel 2.6.32)。Froyo 之后的版本的Android将会命名为Gingerbread(姜饼,基于Linux Kernel 2.6.33/34)。</p>\n<p><strong>Android**</strong>版本**</p>\n<p><strong>发布日期</strong></p>\n<p><strong>代号</strong></p>\n<p><strong>Android 1.1</strong></p>\n<p><strong>Android 1.5</strong></p>\n<p>2009年4月30日</p>\n<p>Cupcake（纸杯蛋糕）</p>\n<p><strong>Android 1.6</strong></p>\n<p>2009年9月15日</p>\n<p>Donut（炸面圈）</p>\n<p><strong>Android 2.0/2.1</strong></p>\n<p>2009年10月26日</p>\n<p>Eclair（长松饼）</p>\n<p><strong>Android 2.2</strong></p>\n<p>2010年5月20日</p>\n<p>Froyo（冻酸奶）</p>\n<p><strong>Android 2.3</strong></p>\n<p>2010年12月6日</p>\n<p>Gingerbread（姜饼）</p>\n<p><strong>Android 3.0/3.1/3.2</strong></p>\n<p>2011年2月22日</p>\n<p>Honeycomb（蜂巢）</p>\n<p><strong>Android 4.0</strong></p>\n<p>2011年10月19日</p>\n<p>Ice Cream Sandwich（冰淇淋三明治）</p>\n<p><strong>Android 4.1</strong></p>\n<p>2012年6月28日</p>\n<p>Jelly Bean（果冻豆）</p>\n<p><strong>Android 4.2</strong></p>\n<p>2012年10月8日</p>\n<p>Jelly Bean（果冻豆）</p>\n<p><strong>Android5.0</strong></p>\n<p>待定</p>\n<p>Lime Pie（酸橙派）</p>\n<h3 id=\"1-2-Android系统的架构与特性\"><a href=\"#1-2-Android系统的架构与特性\" class=\"headerlink\" title=\"1.2 Android系统的架构与特性\"></a>1.2 Android系统的架构与特性</h3><h4 id=\"1-2-1-Android系统架构\"><a href=\"#1-2-1-Android系统架构\" class=\"headerlink\" title=\"1.2.1 Android系统架构\"></a>1.2.1 Android系统架构</h4><p>Android系统的底层是建立在Linux系统之上的，它采用软件叠层（Software Stack）的方式进行构建。使得层与层之间相互分离，明确各层的分工。这种分工保证了层与层之间的低苟合，当下层发生改变的时候，上层应用程序无需做任何改变。</p>\n<p>下图为Android系统的系统架构图：</p>\n<p><img src=\"http://s1.51cto.com/wyfs02/M01/25/73/wKioL1NgW-Si7ae7AAEJ_vZkaJ0908.jpg\" alt></p>\n<p>如图可知，Android系统分为四个层，从高到底分别是：应用程序层（Application）、应用程序框架层（Application Framework）、系统运行库层（Libraries）和Linux内核层（Linux Kernel）。</p>\n<p>Android操作系统可以在四个主要层面上分为5个部分：</p>\n<h5 id=\"1-应用程序层（Application）\"><a href=\"#1-应用程序层（Application）\" class=\"headerlink\" title=\"1. 应用程序层（Application）\"></a>1. 应用程序层（Application）</h5><p>Android系统包含了一系列核心应用程序，包括电子邮件、短信SMS、日历、拨号器、地图、浏览器、联系人等。这些应用程序都是用Java语言编写。本书重点讲解如何编写Android系统上运行的应用程序，在程序分层上，与系统核心应用程序平级。</p>\n<h5 id=\"2-应用程序框架层（Application-Framework）\"><a href=\"#2-应用程序框架层（Application-Framework）\" class=\"headerlink\" title=\"2. 应用程序框架层（Application Framework）\"></a>2. 应用程序框架层（Application Framework）</h5><p>Android应用程序框架提供了大量的API供开发人员使用，Android应用程序的开发，就是调用这些API，根据需求实现功能。</p>\n<p>应用程序框架是应用程序的基础。为了软件的复用，任何一个应用程序都可以开发Android系统的功能模块，只要发布的时候遵循应用程序框架的规范，其它应用程序也可以使用这个功能模块。</p>\n<h5 id=\"3-系统运行库层（Libraries）\"><a href=\"#3-系统运行库层（Libraries）\" class=\"headerlink\" title=\"3. 系统运行库层（Libraries）**\"></a>3. 系统运行库层（Libraries）**</h5><p>Android系统运行库是用C/C++语言编写的，是一套被不同组件所使用的函数库组成的集合。一般来说，Android应用开发者无法直接调用这套函数库，都是通过它上层的应用程序框架提供的API来对这些函数库进行调用。</p>\n<p>下面对一些核心库进行简单的介绍：</p>\n<blockquote>\n<p><strong>Libc：</strong>从BSD系统派生出来的标准C系统库，在此基础之上，为了便携式Linux系统专门进行了调整。</p>\n<p><strong>Medio Framework：</strong>基于PacketView的OpenCORE，这套媒体库支持播放与录制硬盘及视频格式的文件，并能查看静态图片。</p>\n<p><strong>Surface Manager：</strong>在执行多个应用程序的时，负责管理显示与存取操作间的互动，同时负责2D绘图与3D绘图进行显示合成。</p>\n<p><strong>WebKit：</strong>Web浏览器引擎，该引擎为Android浏览器提供支持。</p>\n<p><strong>SGL：</strong>底层的2D图像引擎。</p>\n<p><strong>3D libraries：</strong>基于OpenGL ES 1.0API，提供使用软硬件实现3D加速的功能。</p>\n<p><strong>FreeType：</strong>提供位图和向量字体的支持。</p>\n<p><strong>SQLite：</strong>轻量级的关系型数据库。</p>\n</blockquote>\n<h5 id=\"4-Android运行时\"><a href=\"#4-Android运行时\" class=\"headerlink\" title=\"4. Android运行时**\"></a>4. Android运行时**</h5><pre><code>Android运行时由两部分完成：Android核心库和Dalvik虚拟机。其中核心库集提供了Java语言核心库所能使用的绝大部分功能，Dalvik虚拟机负责运行Android应用程序。\n\n虽然Android应用程序通过Java语言编写，而每个Java程序都会在Java虚拟机JVM内运行，但是Android系统毕竟是运行在移动设备上的，由于硬件的限制， Android应用程序并不使用Java的虚拟机JVM来运行程序，而是使用自己独立的虚拟机Dalvik VM，它针对多个同时高效运行的虚拟机进行了优化。每个Android应用程序都运行在单独的一个Dalvik虚拟机内，因此Android系统可以方便对应用程序进行隔离。</code></pre><h5 id=\"5-Linux内核\"><a href=\"#5-Linux内核\" class=\"headerlink\" title=\"5. Linux内核\"></a>5. Linux内核</h5><p>Android系统是基于Linux2.6之上建立的操作系统，它的Linux内核为Android系统提供了安全性、内存管理、进程管理、网络协议栈、驱动模型等核心系统服务。Linux内核帮助Android系统实现了底层硬件与上层软件之间的抽象。</p>\n<h4 id=\"1-2-2-Dalvik-VM和JVM的区别\"><a href=\"#1-2-2-Dalvik-VM和JVM的区别\" class=\"headerlink\" title=\"1.2.2 Dalvik VM和JVM的区别\"></a>1.2.2 Dalvik VM和JVM的区别</h4><p>JVM（Java虚拟机）是一个虚构出来的运行Java程序的运行时，是通过在实际的计算机上仿真模拟各种计算机功能的实现。它具有完善的硬件架构（如处理器、堆栈、寄存器等），还具有相应的指令系统，使用JVM就是使Java程序支持与操作系统无关。理论上在任何操作系统中，只要有对应的JVM，即可运行Java程序。</p>\n<p>Dalvik VM是在Android系统上运行Android程序的虚拟机，其指令集是基于寄存器架构的，执行特有的文件格式-dex字节码来完成对象生命周期管理、堆栈管理、线程管理、安全异常管理、垃圾回收等重要功能。</p>\n<p>由于Android应用程序的开发编程语言是Java，而Java程序运行在JVM（Java虚拟机）上的，因此有些人会把Android的虚拟机DalvikVM和JVM弄混淆，但是实际上Dalvik并未遵守JVM规范，而且两者也是互不兼容。</p>\n<p>从Dalvik VM和JVM的编译过程分析，它们的编译过程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JVM：.java→.class→.jar</span><br><span class=\"line\">Dalvik VM：.java→.class→.dex</span><br></pre></td></tr></table></figure>\n\n<p>从它们的编译过程可以看出，JVM运行的是.class文件的Java字节码，但是Dalvik VM运行的是其转换后的dex（Dalvik Executable）文件。JVM字节从.class文件或者JAR包中加载字节码然后运行，而Dalvik VM无法直接从.class文件或JAR包中加载字节码，它需要通过DX工具将应用程序所有的.class文件编译成一个.dex文件，Dalvik VM则运行这个.dex文件。</p>\n<p>下图显示了Dalvik VM与JVM编译过程的区别：</p>\n<p><img src=\"http://s4.51cto.com/wyfs02/M01/25/73/wKiom1NgXMOTVyNiAAB-h8_94xE986.jpg\" alt></p>\n<p>从图中可以看出，Dalvik VM把.java文件编译成.class后，会对.class进行重构，整合的基本元素（常量池、类定义、数据段）,最后压缩写进一个.dex文件中。其中，常量池描述了所有的常量，包括引用、方法名、数值常量等；类定义包括访问标识、类名等基本信息；数据段中包含各种被VM指定的方法代码以及类和方法的相关信息和实例变量。这种把多个.class文件进行整合的方法，大大提高了Android程序的运行速度，例如：应用程序中多个类定义了字符串常量TAG，而在JVM中，会编译成多个.class文件，每个.class文件的常量池中，均包含这个TAG常量，但是Dalvik VM在编译成.dex文件之后，其常量池里只有一个TAG常量。</p>\n<p>JVM和Dalvik VM还有一点非常重要的不同，就是基于的架构不同。JVM是基于栈的架构，而Dalvik VM是基于寄存器的架构。相对于基于栈的JVM而言，基于寄存器的Dalvik VM实现虽然牺牲了一些硬件上的通用性，但是它在代码的执行效率上要更胜一筹。一般来讲，VM中指令的解释执行的时间主要花费在以下三个方面：</p>\n<blockquote>\n<p>分发指令；</p>\n<p>访问运算数；</p>\n<p>执行运算；</p>\n</blockquote>\n<p>其中分发指令这个环节对性能的影响最大。在基于寄存器的Dalvik VM中，可以更有效的减少冗余指令的分发，减少内存的读写访问。</p>\n<p>从JVM和Dalvik VM的区别上来说，Dalvik VM主要是针对Android这个嵌入式操作系统的特点进行了各种优化，使其更省电、更省内存、运行效率更高，但是牺牲了一些JVM的与平台无关的特性。实际上，Dalvik VM本就是为Android设计的，无需考虑其它平台的问题。这里只是介绍了JVM和Dalvik VM的两个重要的区别，毕竟本书并不是讲解Android内核的，这里只是点明Dalvik VM的特点，读者对这部分的内容了解即可。</p>\n<h3 id=\"1-2-3-Android系统平台的优势\"><a href=\"#1-2-3-Android系统平台的优势\" class=\"headerlink\" title=\"1.2.3 Android系统平台的优势\"></a>1.2.3 Android系统平台的优势</h3><p>Android系统相对于其它操作系统，有如下几点优势：</p>\n<h4 id=\"1-开放性\"><a href=\"#1-开放性\" class=\"headerlink\" title=\"1. 开放性\"></a>1. 开放性</h4><p>首先就是Android系统的开放性，其开发平台允许任何移动终端厂商加入到Android联盟中来，降低了开发门槛，使其拥有更多的开发者，随着用户和应用的日益丰富，也将推进Android系统的成熟。同时，开放性有利于Android设备的普及以及市场竞争力，这样有利于消费者买到更低价位的Android设备。</p>\n<h4 id=\"2-丰富的硬件选择\"><a href=\"#2-丰富的硬件选择\" class=\"headerlink\" title=\"2. 丰富的硬件选择\"></a>2. 丰富的硬件选择</h4><p>同样由于Android系统的开放性，众多硬件厂商可以推出各种的搭载Android系统的设备。现如今，Android系统不仅仅只是运行在手机上，越来越多的设备开始支持Android系统，如电视、可佩戴设备、数码相机等。</p>\n<h4 id=\"3-便于开发\"><a href=\"#3-便于开发\" class=\"headerlink\" title=\"3. 便于开发\"></a>3. 便于开发</h4><p>Google开放了Android的系统源码，提供了开发者一个自由的开发环境，不必受到各种条条框框的束缚。</p>\n<h4 id=\"4-Google服务的支持\"><a href=\"#4-Google服务的支持\" class=\"headerlink\" title=\"4. Google服务的支持\"></a>4. Google服务的支持</h4><p>Google公司作为一个做服务的公司，它提供了如地图、邮件、搜索等服务，Android系统可以对这些服务进行无缝的结合。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-1-Android发展史与现状\"><a href=\"#1-1-Android发展史与现状\" class=\"headerlink\" title=\"1.1 Android发展史与现状\"></a>1.1 Android发展史与现状</h2><p>Andy Rubin创立22个月后→（2005年）Google收购。</p>\n<p>2008 Patrick Brady于Google I/O 演讲“Anatomy &amp; Physiology of an Android”，并提出的 Android HAL 架构图。</p>\n<h3 id=\"Android版本升级\"><a href=\"#Android版本升级\" class=\"headerlink\" title=\"Android版本升级\"></a>Android版本升级</h3><p>Android系统今后将继续每半年一次的升级步伐，分别定在每年的夏天和年终。每代Android系统都将以食物命名，比如1.5版叫做 Cupcake(纸杯蛋糕)，1.6版为Donut(甜甜圈)，然后是Eclair(法式奶油夹心甜点)和Flan(水果馅饼)。Donut将把社交网络功能作为升级重点，在“手机的各种体验中”都增加社交网络元素。  </p>\n<h4 id=\"1-5-Cupcake\"><a href=\"#1-5-Cupcake\" class=\"headerlink\" title=\"1.5 (Cupcake)\"></a>1.5 (Cupcake)</h4><p>基于Linux Kernel 2.6.27 2009年4月30日，官方1.5版本(Cupcake)的Android发布。主要的更新如下:<br>● 拍摄/回放视频，并支持上传到youtube<br>● 支持立体声蓝牙耳机，同时改善自动配对性能<br>● 最新的采用WebKit技术的浏览器，支持拷贝/粘帖和页面中搜索<br>● GPS性能大大提高<br>● 屏幕虚拟键盘<br>● 主屏幕增加音乐播放器和相框widgets<br>● 应用程序自动随着手机旋转<br>● 短信，Gmail，日历，浏览器的用户界面大幅改善，比如说Gmail现在可以批量删除邮件了<br>● 相机启动速度加快，拍摄图片可以直接上传到picasa<br>● 来电照片显示  </p>\n<h4 id=\"1-6-Donut\"><a href=\"#1-6-Donut\" class=\"headerlink\" title=\"1.6 (Donut)\"></a>1.6 (Donut)</h4><p>基于Linux Kernel 2.6.29 2009年9月15日, 1.6(Donut)版本SDK发布。主要的更新如下:<br>● 完全重新设计的Android Market<br>● 手势支持<br>● 支持CDMA网络<br>● 文字转语音系统(TXT-2-speech)<br>● 快速搜索框<br>● 全新的拍照界面<br>● 应用程序耗电查看<br>● 支持VPN<br>● 支持更多的屏幕分辨率<br>● 支持OpenCore2媒体引擎<br>● 新增面向视觉或听觉困难人群的易用性插件  </p>\n<h4 id=\"2-0-2-0-1-2-1-Eclair\"><a href=\"#2-0-2-0-1-2-1-Eclair\" class=\"headerlink\" title=\"2.0/2.0.1/2.1(Eclair)\"></a>2.0/2.0.1/2.1(Eclair)</h4><p>基于Linux Kernel 2.6.29 2009年10月26日, 2.0(Eclair)版本SDK发布。主要的更新如下:<br>● 优化硬件速度<br>● “Car Home”程序<br>● 支持更多的屏幕分辨率<br>● 重整界面<br>● 新的浏览器的用户界面和支持HTML5<br>● 新的联系人名单<br>● 更好的白色/黑色背景比率<br>● 改进Google Maps 3.1.2<br>● 支持Microsoft Exchange<br>● 支持内置相机闪光灯<br>● 数字变焦<br>● 改进的虚拟键盘<br>● 蓝牙2.1<br>Android的代号序列会按甜点名字中首个英文字母(C、D、E、F)的排列顺序。<br>下一个版本的Android将会命名为Froyo(冻酸奶,基于Linux Kernel 2.6.32)。Froyo 之后的版本的Android将会命名为Gingerbread(姜饼,基于Linux Kernel 2.6.33/34)。</p>\n<p><strong>Android**</strong>版本**</p>\n<p><strong>发布日期</strong></p>\n<p><strong>代号</strong></p>\n<p><strong>Android 1.1</strong></p>\n<p><strong>Android 1.5</strong></p>\n<p>2009年4月30日</p>\n<p>Cupcake（纸杯蛋糕）</p>\n<p><strong>Android 1.6</strong></p>\n<p>2009年9月15日</p>\n<p>Donut（炸面圈）</p>\n<p><strong>Android 2.0/2.1</strong></p>\n<p>2009年10月26日</p>\n<p>Eclair（长松饼）</p>\n<p><strong>Android 2.2</strong></p>\n<p>2010年5月20日</p>\n<p>Froyo（冻酸奶）</p>\n<p><strong>Android 2.3</strong></p>\n<p>2010年12月6日</p>\n<p>Gingerbread（姜饼）</p>\n<p><strong>Android 3.0/3.1/3.2</strong></p>\n<p>2011年2月22日</p>\n<p>Honeycomb（蜂巢）</p>\n<p><strong>Android 4.0</strong></p>\n<p>2011年10月19日</p>\n<p>Ice Cream Sandwich（冰淇淋三明治）</p>\n<p><strong>Android 4.1</strong></p>\n<p>2012年6月28日</p>\n<p>Jelly Bean（果冻豆）</p>\n<p><strong>Android 4.2</strong></p>\n<p>2012年10月8日</p>\n<p>Jelly Bean（果冻豆）</p>\n<p><strong>Android5.0</strong></p>\n<p>待定</p>\n<p>Lime Pie（酸橙派）</p>\n<h3 id=\"1-2-Android系统的架构与特性\"><a href=\"#1-2-Android系统的架构与特性\" class=\"headerlink\" title=\"1.2 Android系统的架构与特性\"></a>1.2 Android系统的架构与特性</h3><h4 id=\"1-2-1-Android系统架构\"><a href=\"#1-2-1-Android系统架构\" class=\"headerlink\" title=\"1.2.1 Android系统架构\"></a>1.2.1 Android系统架构</h4><p>Android系统的底层是建立在Linux系统之上的，它采用软件叠层（Software Stack）的方式进行构建。使得层与层之间相互分离，明确各层的分工。这种分工保证了层与层之间的低苟合，当下层发生改变的时候，上层应用程序无需做任何改变。</p>\n<p>下图为Android系统的系统架构图：</p>\n<p><img src=\"http://s1.51cto.com/wyfs02/M01/25/73/wKioL1NgW-Si7ae7AAEJ_vZkaJ0908.jpg\" alt></p>\n<p>如图可知，Android系统分为四个层，从高到底分别是：应用程序层（Application）、应用程序框架层（Application Framework）、系统运行库层（Libraries）和Linux内核层（Linux Kernel）。</p>\n<p>Android操作系统可以在四个主要层面上分为5个部分：</p>\n<h5 id=\"1-应用程序层（Application）\"><a href=\"#1-应用程序层（Application）\" class=\"headerlink\" title=\"1. 应用程序层（Application）\"></a>1. 应用程序层（Application）</h5><p>Android系统包含了一系列核心应用程序，包括电子邮件、短信SMS、日历、拨号器、地图、浏览器、联系人等。这些应用程序都是用Java语言编写。本书重点讲解如何编写Android系统上运行的应用程序，在程序分层上，与系统核心应用程序平级。</p>\n<h5 id=\"2-应用程序框架层（Application-Framework）\"><a href=\"#2-应用程序框架层（Application-Framework）\" class=\"headerlink\" title=\"2. 应用程序框架层（Application Framework）\"></a>2. 应用程序框架层（Application Framework）</h5><p>Android应用程序框架提供了大量的API供开发人员使用，Android应用程序的开发，就是调用这些API，根据需求实现功能。</p>\n<p>应用程序框架是应用程序的基础。为了软件的复用，任何一个应用程序都可以开发Android系统的功能模块，只要发布的时候遵循应用程序框架的规范，其它应用程序也可以使用这个功能模块。</p>\n<h5 id=\"3-系统运行库层（Libraries）\"><a href=\"#3-系统运行库层（Libraries）\" class=\"headerlink\" title=\"3. 系统运行库层（Libraries）**\"></a>3. 系统运行库层（Libraries）**</h5><p>Android系统运行库是用C/C++语言编写的，是一套被不同组件所使用的函数库组成的集合。一般来说，Android应用开发者无法直接调用这套函数库，都是通过它上层的应用程序框架提供的API来对这些函数库进行调用。</p>\n<p>下面对一些核心库进行简单的介绍：</p>\n<blockquote>\n<p><strong>Libc：</strong>从BSD系统派生出来的标准C系统库，在此基础之上，为了便携式Linux系统专门进行了调整。</p>\n<p><strong>Medio Framework：</strong>基于PacketView的OpenCORE，这套媒体库支持播放与录制硬盘及视频格式的文件，并能查看静态图片。</p>\n<p><strong>Surface Manager：</strong>在执行多个应用程序的时，负责管理显示与存取操作间的互动，同时负责2D绘图与3D绘图进行显示合成。</p>\n<p><strong>WebKit：</strong>Web浏览器引擎，该引擎为Android浏览器提供支持。</p>\n<p><strong>SGL：</strong>底层的2D图像引擎。</p>\n<p><strong>3D libraries：</strong>基于OpenGL ES 1.0API，提供使用软硬件实现3D加速的功能。</p>\n<p><strong>FreeType：</strong>提供位图和向量字体的支持。</p>\n<p><strong>SQLite：</strong>轻量级的关系型数据库。</p>\n</blockquote>\n<h5 id=\"4-Android运行时\"><a href=\"#4-Android运行时\" class=\"headerlink\" title=\"4. Android运行时**\"></a>4. Android运行时**</h5><pre><code>Android运行时由两部分完成：Android核心库和Dalvik虚拟机。其中核心库集提供了Java语言核心库所能使用的绝大部分功能，Dalvik虚拟机负责运行Android应用程序。\n\n虽然Android应用程序通过Java语言编写，而每个Java程序都会在Java虚拟机JVM内运行，但是Android系统毕竟是运行在移动设备上的，由于硬件的限制， Android应用程序并不使用Java的虚拟机JVM来运行程序，而是使用自己独立的虚拟机Dalvik VM，它针对多个同时高效运行的虚拟机进行了优化。每个Android应用程序都运行在单独的一个Dalvik虚拟机内，因此Android系统可以方便对应用程序进行隔离。</code></pre><h5 id=\"5-Linux内核\"><a href=\"#5-Linux内核\" class=\"headerlink\" title=\"5. Linux内核\"></a>5. Linux内核</h5><p>Android系统是基于Linux2.6之上建立的操作系统，它的Linux内核为Android系统提供了安全性、内存管理、进程管理、网络协议栈、驱动模型等核心系统服务。Linux内核帮助Android系统实现了底层硬件与上层软件之间的抽象。</p>\n<h4 id=\"1-2-2-Dalvik-VM和JVM的区别\"><a href=\"#1-2-2-Dalvik-VM和JVM的区别\" class=\"headerlink\" title=\"1.2.2 Dalvik VM和JVM的区别\"></a>1.2.2 Dalvik VM和JVM的区别</h4><p>JVM（Java虚拟机）是一个虚构出来的运行Java程序的运行时，是通过在实际的计算机上仿真模拟各种计算机功能的实现。它具有完善的硬件架构（如处理器、堆栈、寄存器等），还具有相应的指令系统，使用JVM就是使Java程序支持与操作系统无关。理论上在任何操作系统中，只要有对应的JVM，即可运行Java程序。</p>\n<p>Dalvik VM是在Android系统上运行Android程序的虚拟机，其指令集是基于寄存器架构的，执行特有的文件格式-dex字节码来完成对象生命周期管理、堆栈管理、线程管理、安全异常管理、垃圾回收等重要功能。</p>\n<p>由于Android应用程序的开发编程语言是Java，而Java程序运行在JVM（Java虚拟机）上的，因此有些人会把Android的虚拟机DalvikVM和JVM弄混淆，但是实际上Dalvik并未遵守JVM规范，而且两者也是互不兼容。</p>\n<p>从Dalvik VM和JVM的编译过程分析，它们的编译过程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JVM：.java→.class→.jar</span><br><span class=\"line\">Dalvik VM：.java→.class→.dex</span><br></pre></td></tr></table></figure>\n\n<p>从它们的编译过程可以看出，JVM运行的是.class文件的Java字节码，但是Dalvik VM运行的是其转换后的dex（Dalvik Executable）文件。JVM字节从.class文件或者JAR包中加载字节码然后运行，而Dalvik VM无法直接从.class文件或JAR包中加载字节码，它需要通过DX工具将应用程序所有的.class文件编译成一个.dex文件，Dalvik VM则运行这个.dex文件。</p>\n<p>下图显示了Dalvik VM与JVM编译过程的区别：</p>\n<p><img src=\"http://s4.51cto.com/wyfs02/M01/25/73/wKiom1NgXMOTVyNiAAB-h8_94xE986.jpg\" alt></p>\n<p>从图中可以看出，Dalvik VM把.java文件编译成.class后，会对.class进行重构，整合的基本元素（常量池、类定义、数据段）,最后压缩写进一个.dex文件中。其中，常量池描述了所有的常量，包括引用、方法名、数值常量等；类定义包括访问标识、类名等基本信息；数据段中包含各种被VM指定的方法代码以及类和方法的相关信息和实例变量。这种把多个.class文件进行整合的方法，大大提高了Android程序的运行速度，例如：应用程序中多个类定义了字符串常量TAG，而在JVM中，会编译成多个.class文件，每个.class文件的常量池中，均包含这个TAG常量，但是Dalvik VM在编译成.dex文件之后，其常量池里只有一个TAG常量。</p>\n<p>JVM和Dalvik VM还有一点非常重要的不同，就是基于的架构不同。JVM是基于栈的架构，而Dalvik VM是基于寄存器的架构。相对于基于栈的JVM而言，基于寄存器的Dalvik VM实现虽然牺牲了一些硬件上的通用性，但是它在代码的执行效率上要更胜一筹。一般来讲，VM中指令的解释执行的时间主要花费在以下三个方面：</p>\n<blockquote>\n<p>分发指令；</p>\n<p>访问运算数；</p>\n<p>执行运算；</p>\n</blockquote>\n<p>其中分发指令这个环节对性能的影响最大。在基于寄存器的Dalvik VM中，可以更有效的减少冗余指令的分发，减少内存的读写访问。</p>\n<p>从JVM和Dalvik VM的区别上来说，Dalvik VM主要是针对Android这个嵌入式操作系统的特点进行了各种优化，使其更省电、更省内存、运行效率更高，但是牺牲了一些JVM的与平台无关的特性。实际上，Dalvik VM本就是为Android设计的，无需考虑其它平台的问题。这里只是介绍了JVM和Dalvik VM的两个重要的区别，毕竟本书并不是讲解Android内核的，这里只是点明Dalvik VM的特点，读者对这部分的内容了解即可。</p>\n<h3 id=\"1-2-3-Android系统平台的优势\"><a href=\"#1-2-3-Android系统平台的优势\" class=\"headerlink\" title=\"1.2.3 Android系统平台的优势\"></a>1.2.3 Android系统平台的优势</h3><p>Android系统相对于其它操作系统，有如下几点优势：</p>\n<h4 id=\"1-开放性\"><a href=\"#1-开放性\" class=\"headerlink\" title=\"1. 开放性\"></a>1. 开放性</h4><p>首先就是Android系统的开放性，其开发平台允许任何移动终端厂商加入到Android联盟中来，降低了开发门槛，使其拥有更多的开发者，随着用户和应用的日益丰富，也将推进Android系统的成熟。同时，开放性有利于Android设备的普及以及市场竞争力，这样有利于消费者买到更低价位的Android设备。</p>\n<h4 id=\"2-丰富的硬件选择\"><a href=\"#2-丰富的硬件选择\" class=\"headerlink\" title=\"2. 丰富的硬件选择\"></a>2. 丰富的硬件选择</h4><p>同样由于Android系统的开放性，众多硬件厂商可以推出各种的搭载Android系统的设备。现如今，Android系统不仅仅只是运行在手机上，越来越多的设备开始支持Android系统，如电视、可佩戴设备、数码相机等。</p>\n<h4 id=\"3-便于开发\"><a href=\"#3-便于开发\" class=\"headerlink\" title=\"3. 便于开发\"></a>3. 便于开发</h4><p>Google开放了Android的系统源码，提供了开发者一个自由的开发环境，不必受到各种条条框框的束缚。</p>\n<h4 id=\"4-Google服务的支持\"><a href=\"#4-Google服务的支持\" class=\"headerlink\" title=\"4. Google服务的支持\"></a>4. Google服务的支持</h4><p>Google公司作为一个做服务的公司，它提供了如地图、邮件、搜索等服务，Android系统可以对这些服务进行无缝的结合。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck190wv4f0006rowkqtvh2dtu","category_id":"ck190wv440003rowkudic9zfh","_id":"ck190wv4t000crowkjwh5kyrq"},{"post_id":"ck190wv3g0001rowk9ki0usxi","category_id":"ck190wv440003rowkudic9zfh","_id":"ck190wv4y000frowk2fdeaouk"},{"post_id":"ck190wv3z0002rowkarygo8i7","category_id":"ck190wv4n0008rowk0jffbkdm","_id":"ck190wv52000irowky6fr3lz9"},{"post_id":"ck190wv4b0005rowkbfgqczaq","category_id":"ck190wv4n0008rowk0jffbkdm","_id":"ck190wv55000krowkcipkyc6j"},{"post_id":"ck190wv4i0007rowk479kep07","category_id":"ck190wv4n0008rowk0jffbkdm","_id":"ck190wv58000nrowkskk3lh99"},{"post_id":"ck190wvc9000rrowkplf35kcs","category_id":"ck190wv4n0008rowk0jffbkdm","_id":"ck190wvcm000wrowk1cot6j9r"},{"post_id":"ck190wvc6000qrowk3z64kggl","category_id":"ck190wvcf000srowk4i34pfsn","_id":"ck190wvco000yrowko21i99eb"},{"post_id":"ck190wvcq000zrowk6ch0fzep","category_id":"ck190wvcv0010rowkwavptf7f","_id":"ck190wvcy0013rowkivwdc793"},{"post_id":"ck190wvd10014rowkruexoddf","category_id":"ck190wvcv0010rowkwavptf7f","_id":"ck190wvd60016rowkm234heaf"}],"PostTag":[{"post_id":"ck190wv4f0006rowkqtvh2dtu","tag_id":"ck190wv4a0004rowk58m3ea09","_id":"ck190wv4q000arowkk4k1g6oi"},{"post_id":"ck190wv3g0001rowk9ki0usxi","tag_id":"ck190wv4a0004rowk58m3ea09","_id":"ck190wv4s000browk8104x1a6"},{"post_id":"ck190wv3z0002rowkarygo8i7","tag_id":"ck190wv4o0009rowk4xydip3v","_id":"ck190wv4z000growkf3wl2gl4"},{"post_id":"ck190wv4b0005rowkbfgqczaq","tag_id":"ck190wv4v000erowkt59jrex5","_id":"ck190wv57000mrowk1vf6o9jp"},{"post_id":"ck190wv4b0005rowkbfgqczaq","tag_id":"ck190wv53000jrowk6shuyo4v","_id":"ck190wv58000orowkc23p7lpa"},{"post_id":"ck190wv4i0007rowk479kep07","tag_id":"ck190wv56000lrowki0ps1558","_id":"ck190wv59000prowk4om9fu2o"},{"post_id":"ck190wvc6000qrowk3z64kggl","tag_id":"ck190wv4v000erowkt59jrex5","_id":"ck190wvcg000trowkawy111p0"},{"post_id":"ck190wvc6000qrowk3z64kggl","tag_id":"ck190wv53000jrowk6shuyo4v","_id":"ck190wvci000vrowk378pmd2q"},{"post_id":"ck190wvc9000rrowkplf35kcs","tag_id":"ck190wvch000urowkpp384hc6","_id":"ck190wvcn000xrowk4c8qz5a8"},{"post_id":"ck190wvcq000zrowk6ch0fzep","tag_id":"ck190wvcw0011rowk6rh4gf0g","_id":"ck190wvcy0012rowkgvszdjr8"},{"post_id":"ck190wvd10014rowkruexoddf","tag_id":"ck190wvcw0011rowk6rh4gf0g","_id":"ck190wvd50015rowknpx18q3x"}],"Tag":[{"name":"hexo","_id":"ck190wv4a0004rowk58m3ea09"},{"name":"php","_id":"ck190wv4o0009rowk4xydip3v"},{"name":"mysql","_id":"ck190wv4v000erowkt59jrex5"},{"name":"数据库","_id":"ck190wv53000jrowk6shuyo4v"},{"name":"eclipse","_id":"ck190wv56000lrowki0ps1558"},{"name":"git","_id":"ck190wvch000urowkpp384hc6"},{"name":"Android","_id":"ck190wvcw0011rowk6rh4gf0g"}]}}