{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/maupassant/source/archives/index.md","path":"archives/index.md","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/apple-touch-icon.png","hash":"fbd2744aedd23c6addea809a9e5e7cbb3306e7b9","modified":1569822379618},{"_id":"source/favicon.ico","hash":"92d61ec769765f2fb7bc1882c2c3b18931ac40f2","modified":1569822262504},{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1569824776810},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1569824776812},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1569824776813},{"_id":"themes/maupassant/README.md","hash":"4e402501b89720f18ffbfce4203663c79b3c0a7f","modified":1569824776815},{"_id":"themes/maupassant/_config.yml","hash":"68ebc303ee5884f3bd9c77e09b912fd3b5923085","modified":1569833874468},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1569824776880},{"_id":"source/_posts/Android应用的基本组件.md","hash":"78e8bbf84766bfa1997de9ba573c32868cd9d9e2","modified":1569834776765},{"_id":"source/_posts/android发展史及系统架构.md","hash":"dc4df0788593bba9a10994c6706a2d1d5bd9abb9","modified":1569836541582},{"_id":"source/_posts/hexo配置.md","hash":"1116a8a4096f128a34c65816ca56aaf37a3f3fc8","modified":1569832615883},{"_id":"source/_posts/first.md","hash":"669da26a1627d07f9b13136382b0cb7808150bf2","modified":1569832882434},{"_id":"source/about/index.md","hash":"2f2ddc1e0c36f8dfc248834e3f37083ed8836147","modified":1569832245280},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1569824776820},{"_id":"themes/maupassant/languages/en.yml","hash":"518beaa8538a772ca697122264d667059797e458","modified":1569824776822},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1569824776824},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1569824776825},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1569824776828},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1569824776827},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"a1a9888b6cd0fd3dc45ffed3490f4ca8ce1abfd7","modified":1569824776831},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"34dba7ac67aeb316f629ca73e546fa143cc362d5","modified":1569824776833},{"_id":"themes/maupassant/layout/archive.pug","hash":"05f751cb766616ff96ff22ad0790d9cd28777270","modified":1569824776865},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1569824776867},{"_id":"themes/maupassant/layout/base.pug","hash":"7451a590db6943edc099dc0e13b317c38686e8fc","modified":1569824776869},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1569824776870},{"_id":"themes/maupassant/layout/page.pug","hash":"a21e638d5459120d88e45e8f18a23dc072d9ca07","modified":1569824776872},{"_id":"themes/maupassant/layout/post.pug","hash":"faa84d65681da6f4697f2b3aec1e27f615569f7a","modified":1569834254736},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1569824776875},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"4c8923bd7fe2a6d413cde7945ac3c34eeef9942b","modified":1569824776877},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1569824776878},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"d2ffd7c34c743ec3c01dc1a1ddb8913ffd025f2a","modified":1569824776836},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"78c9a74bc379feca35342e4753a4cc6330a0fe94","modified":1569824776838},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1569824776839},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"235660024477ba0f68dacbbde12492280f82242a","modified":1569824776841},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1569824776843},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1569824776844},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1569824776846},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1569824776848},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1569824776850},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1569824776851},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1569824776853},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"6fb1d8ee09cfc4fd31e8ae53736e4f479d45e31e","modified":1569824776854},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1569824776857},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1569824776857},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1569824776859},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1569824776860},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1569824776862},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1569824776863},{"_id":"themes/maupassant/source/archives/index.md","hash":"f6247f6b31fd4fa7723b05264d3757fbffb70e4f","modified":1569824968622},{"_id":"themes/maupassant/source/css/default.css","hash":"b41d95120f9e64fd4530ae00ceaef09c7ea20818","modified":1569824776884},{"_id":"themes/maupassant/source/css/donate.css","hash":"ca39d14a598e1de5c51db4170ceb399c6a7131fe","modified":1569824776885},{"_id":"themes/maupassant/source/css/style.scss","hash":"ee0800852fc68c82821b7a7c7a77e933fb00d157","modified":1569824776888},{"_id":"themes/maupassant/source/donate/index.html","hash":"72e48cbc939df9e4f963ebf570e0181e129a51c5","modified":1569824776890},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1569824776895},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1569824776899},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1569824776893},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1569824776897},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1569824776901},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1569824776902},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1569824776907},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1569824776905},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1569824776908},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1569824776911},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1569824776913},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1569824776914},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1569824776920},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1569824776924},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1569824776921},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1569824776925},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1569824776918}],"Category":[{"name":"Android基础","_id":"ck1681r750002sgwk4t3qq8a4"},{"name":"hexo","_id":"ck1681r7e0004sgwkcqhkjwf7"}],"Data":[],"Page":[{"title":"一个理想主义者","date":"2019-09-30T07:22:57.000Z","_content":"\n随便写写，后面再补充吧","source":"about/index.md","raw":"title: 一个理想主义者\ndate: 2019-09-30 15:22:57\n---\n\n随便写写，后面再补充吧","updated":"2019-09-30T08:30:45.280Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck1681sw0000bsgwkn813kazh"}],"Post":[{"title":"Android应用的基本组件","author":"JsonYe","copyright":true,"date":"2015-04-29T09:35:00.000Z","_content":"\nAndroid系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest.xml中进行注册，否则不予使用。本小节将对这些组件进行简单的介绍，使读者对Android应用开发的内容有一个大致的认识。\n\n## 活动（Activity）\n\n\nActivity是Android应用中，最直接与用户接触的组件，它负责加载View组件，使其展现给用户，并保持与用户的交互。所有的Activity组件均需要继承Activity类，这是一个Content的间接子类，包装了一些Activity的基本特性。\n\n\nView组件是所有UI组件、容器组件的基类，也就是说，它可以是一个布局容器，也可以是一个布局容器内的基本UI组件。View组件一般通过XML布局资源文件定义，同时Android系统也对这些View组件提供了对应的实现类。如果需要通过某个Activity把指定的View组件显示出来，调用Activity的setContentView()方法即可，它具有多个重载方法，可以传递一个XML资源ID或者View对象。\n\n例如：\n```java\nLinearLayout layout=new LinearLayout(this);\nsetContentView(layout)；\n```\n或者：\n```\nsetContentView(R.layout.main);\n```\n\nActivity为Android应用提供了一个用户界面，当一个Activity被开启之后，它具有自己的生命周期。Activity类也对这些生命周期提供了对应的方法，如果需要对Activity各个不同的生命周期做出响应，可以重写这些生命周期方法实现。对于大多数商业应用而言，整个系统中包含了多个Activity，在应用中逐步导航跳转开启这些Activity之后，会形成Activity的回退栈，当前显示并获得焦点的Activity位于这个回退栈的栈顶。\n\n## 服务（Service）\n\nService主要用于在后台完成一些无需向用户展示界面的功能实现。通常位于系统后台运行，它一般不需要与用户进行交互，因此Service组件没有用户界面展示给用户。Service主要用于完成一些类似于下载文件、播放音乐等无需用户界面与用户进行交互的功能。\n与Activity组件需要继承Activity类相似，Service组件同样需要继承Service类，Service类也是Context的间接子类，其中包装了一些Service的专有特性。一个Service被运行起来之后，它将具有自己独立的生命周期，Service类中对其各个不同的生命周期提供了对应的方法，开发人员可以通过在Service中重写Service类中这些生命周期方法，来响应Service各个生命周期的功能实现。\n\n## 广播接收器（BroadcastReceiver）\n\nBroadcastReceiver同样也是Android系统中的一个重要组件，BroadcastReceiver代表了一个广播接收器，用于接收系统中其它组件发送的广播，并对其进行响应或是拦截广播的继续传播。\n广播是一个系统级的消息，当系统环境发生改变的时候会发送一些广播供对应的程序进行接收响应，例如：接收到一条短信、开机、关机、插上充电器、插上耳机、充电完成等，均会发送一条广播供需要监听此类广播的应用进行响应。除了一些系统事件的广播，开发人员也可以自定义广播内容。但是大部分情况下，开发应用的时候主要用于接受系统广播并对其进行响应，很少需要发送自定义的广播。\n使用BroadcastReceiver组件接收广播非常的简单，只需要实现自己的BroadcastReceiver子类，并重写onReceive()方法，就能完成BroadcastReceiver，而对于这个BroadcastReceiver对什么广播感兴趣，则需要对其进行另行配置。\n\n## 内容提供者（ContentProvider）\nAndroid系统作为一个智能操作系统，它需要系统中运行的应用程序都必须是相互独立的，各自运行在自己的Dalvik VM实例中。在正常情况下，Android应用之间是不能进行实时的数据交换，而考虑到有些应用的数据需要对外进行共享，Android系统提供了一个标准的数据接口ContentProvider，通过应用提供的ContentProvider，可以在其它应用中对这个应用的暴露出来的数据进行增删改查。\n为应用程序暴露数据接口非常的简单，只需要继承ContentProvider类，并且实现insert()、delete()、update()、query()等方法，使外部应用可对本应用的数据进行增删改查。\n\n## 意图（Intent）\n\n虽然Intent并不是Android应用的组件，也无需专门在清单文件中配置，但是它对于Android应用的作用非常的大。除了ContentProvider之外，其它组件的启动，均需要通过Intent进行指定。Intent不仅可以明确指定一个Android组件进行启动，还可以提供一个标准的行为，再由Android系统配合意图过滤器来选定启动指定组件来完成任务。而Intent在开启对组件的过程中，进行各个组件间数据的传递。\n\n## 小结\n\n本章简要介绍了Android系统的发展史及其现状，并且介绍了Android系统的架构与Dalvik VM虚拟机，最后还简单介绍了Android开发中的四大组件。通过阅读本章，对Android的历史与现状、系统架构、基本组件有个大致的了解，这对本书接下来的内容理解非常有帮助。","source":"_posts/Android应用的基本组件.md","raw":"title: Android应用的基本组件\nauthor: JsonYe\ntags:\n  - Android\ncategories:\n  - Android基础  \ncopyright: true\ndate: 2015-04-29 17:35:00\n---\n\nAndroid系统中有著名的四大组件：Activity、Service、BroadcastReceiver、ContentProvider。一个商业的Android应用程序，通常由多个基本的组件联合组成。这四大组件，在使用的时候均需要在清单文件AndroidManifest.xml中进行注册，否则不予使用。本小节将对这些组件进行简单的介绍，使读者对Android应用开发的内容有一个大致的认识。\n\n## 活动（Activity）\n\n\nActivity是Android应用中，最直接与用户接触的组件，它负责加载View组件，使其展现给用户，并保持与用户的交互。所有的Activity组件均需要继承Activity类，这是一个Content的间接子类，包装了一些Activity的基本特性。\n\n\nView组件是所有UI组件、容器组件的基类，也就是说，它可以是一个布局容器，也可以是一个布局容器内的基本UI组件。View组件一般通过XML布局资源文件定义，同时Android系统也对这些View组件提供了对应的实现类。如果需要通过某个Activity把指定的View组件显示出来，调用Activity的setContentView()方法即可，它具有多个重载方法，可以传递一个XML资源ID或者View对象。\n\n例如：\n```java\nLinearLayout layout=new LinearLayout(this);\nsetContentView(layout)；\n```\n或者：\n```\nsetContentView(R.layout.main);\n```\n\nActivity为Android应用提供了一个用户界面，当一个Activity被开启之后，它具有自己的生命周期。Activity类也对这些生命周期提供了对应的方法，如果需要对Activity各个不同的生命周期做出响应，可以重写这些生命周期方法实现。对于大多数商业应用而言，整个系统中包含了多个Activity，在应用中逐步导航跳转开启这些Activity之后，会形成Activity的回退栈，当前显示并获得焦点的Activity位于这个回退栈的栈顶。\n\n## 服务（Service）\n\nService主要用于在后台完成一些无需向用户展示界面的功能实现。通常位于系统后台运行，它一般不需要与用户进行交互，因此Service组件没有用户界面展示给用户。Service主要用于完成一些类似于下载文件、播放音乐等无需用户界面与用户进行交互的功能。\n与Activity组件需要继承Activity类相似，Service组件同样需要继承Service类，Service类也是Context的间接子类，其中包装了一些Service的专有特性。一个Service被运行起来之后，它将具有自己独立的生命周期，Service类中对其各个不同的生命周期提供了对应的方法，开发人员可以通过在Service中重写Service类中这些生命周期方法，来响应Service各个生命周期的功能实现。\n\n## 广播接收器（BroadcastReceiver）\n\nBroadcastReceiver同样也是Android系统中的一个重要组件，BroadcastReceiver代表了一个广播接收器，用于接收系统中其它组件发送的广播，并对其进行响应或是拦截广播的继续传播。\n广播是一个系统级的消息，当系统环境发生改变的时候会发送一些广播供对应的程序进行接收响应，例如：接收到一条短信、开机、关机、插上充电器、插上耳机、充电完成等，均会发送一条广播供需要监听此类广播的应用进行响应。除了一些系统事件的广播，开发人员也可以自定义广播内容。但是大部分情况下，开发应用的时候主要用于接受系统广播并对其进行响应，很少需要发送自定义的广播。\n使用BroadcastReceiver组件接收广播非常的简单，只需要实现自己的BroadcastReceiver子类，并重写onReceive()方法，就能完成BroadcastReceiver，而对于这个BroadcastReceiver对什么广播感兴趣，则需要对其进行另行配置。\n\n## 内容提供者（ContentProvider）\nAndroid系统作为一个智能操作系统，它需要系统中运行的应用程序都必须是相互独立的，各自运行在自己的Dalvik VM实例中。在正常情况下，Android应用之间是不能进行实时的数据交换，而考虑到有些应用的数据需要对外进行共享，Android系统提供了一个标准的数据接口ContentProvider，通过应用提供的ContentProvider，可以在其它应用中对这个应用的暴露出来的数据进行增删改查。\n为应用程序暴露数据接口非常的简单，只需要继承ContentProvider类，并且实现insert()、delete()、update()、query()等方法，使外部应用可对本应用的数据进行增删改查。\n\n## 意图（Intent）\n\n虽然Intent并不是Android应用的组件，也无需专门在清单文件中配置，但是它对于Android应用的作用非常的大。除了ContentProvider之外，其它组件的启动，均需要通过Intent进行指定。Intent不仅可以明确指定一个Android组件进行启动，还可以提供一个标准的行为，再由Android系统配合意图过滤器来选定启动指定组件来完成任务。而Intent在开启对组件的过程中，进行各个组件间数据的传递。\n\n## 小结\n\n本章简要介绍了Android系统的发展史及其现状，并且介绍了Android系统的架构与Dalvik VM虚拟机，最后还简单介绍了Android开发中的四大组件。通过阅读本章，对Android的历史与现状、系统架构、基本组件有个大致的了解，这对本书接下来的内容理解非常有帮助。","slug":"Android应用的基本组件","published":1,"updated":"2019-09-30T09:12:56.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1681r6h0000sgwkquosqfc6"},{"title":"利用Hexo+GitHub搭建个人博客(二)","author":"JsonYe","date":"2019-09-30T06:55:00.000Z","_content":"> 安装好hexo后，可进行各项配置\n\n### 关于页面\n使用：`hexo new page “about” `新建一个 关于我 页面。 \n主题的` _config.yml `文件中的 `menu` 中进行匹配 \n不同主题 `_config. yml`文件有区别\n```\nmenu:\n  home: /      //主页\n  categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签\n  about: /about   //关于                  （添加此行即可）\n或    \nmenu:\n  - page: home\n    directory: .      //主页\n    icon: fa-home\n  - page: archive\n    directory: archives/    //归档\n    icon: fa-archive\n  - page: about\n    directory: about/    //关于\n    icon: fa-user\n  - page: rss\n    directory: atom.xml    //rss订阅\n    icon: fa-rss\n```\n编辑 about 关于页面 md文件 部署就能看到\n\n### 添加分类\n使用： `hexo new page categories` 新建一个 分类 页面。  \n主题的 `_config.yml` 文件中的 `menu` 中进行匹配\n```\nmenu:\n  home: /      //主页\n  categories: /categories //分类   \n  archives: /archives   //归档\n  tags: /tags   //标签                  \n  about: /about   //关于\n```\n底下代码是一篇包含 分类 文章的例子：\n```\ntitle: 分类测试\ncategories:\n- hexo                       （这个就是文章的分类了）\n```\n\n\n### 添加RSS\n#### 安装\nhexo博客有一个专门生成RSS xml文件的插件`hexo-generator-feed`\n我们来安装它\n```\nnpm install hexo-generator-feed\n```\n\n看到`added 3 packages`说明安装成功了。\n\n#### 启用\n在博客工程文件根目录下`_config.yml`文件中添加如下内容\n```\n# Extensions\nplugins:\n    hexo-generator-feed\n#Feed Atom\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n```\n\n#### 生成RSS\n```\n$ hexo g\n(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.\nINFO  Start processing\nINFO  Files loaded in 6.33 s\nINFO  Generated: atom.xml <----------成功生成atom.xml文件\nINFO  Generated: sitemap.xml\nINFO  Generated: baidusitemap.xml\nINFO  Generated: about/index.html\n......\n......\n......\n```","source":"_posts/hexo配置.md","raw":"title: 利用Hexo+GitHub搭建个人博客(二)\ncategories:\n  - hexo\ntags:\n  - hexo\nauthor: JsonYe\ndate: 2019-09-30 14:55:00\n---\n> 安装好hexo后，可进行各项配置\n\n### 关于页面\n使用：`hexo new page “about” `新建一个 关于我 页面。 \n主题的` _config.yml `文件中的 `menu` 中进行匹配 \n不同主题 `_config. yml`文件有区别\n```\nmenu:\n  home: /      //主页\n  categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签\n  about: /about   //关于                  （添加此行即可）\n或    \nmenu:\n  - page: home\n    directory: .      //主页\n    icon: fa-home\n  - page: archive\n    directory: archives/    //归档\n    icon: fa-archive\n  - page: about\n    directory: about/    //关于\n    icon: fa-user\n  - page: rss\n    directory: atom.xml    //rss订阅\n    icon: fa-rss\n```\n编辑 about 关于页面 md文件 部署就能看到\n\n### 添加分类\n使用： `hexo new page categories` 新建一个 分类 页面。  \n主题的 `_config.yml` 文件中的 `menu` 中进行匹配\n```\nmenu:\n  home: /      //主页\n  categories: /categories //分类   \n  archives: /archives   //归档\n  tags: /tags   //标签                  \n  about: /about   //关于\n```\n底下代码是一篇包含 分类 文章的例子：\n```\ntitle: 分类测试\ncategories:\n- hexo                       （这个就是文章的分类了）\n```\n\n\n### 添加RSS\n#### 安装\nhexo博客有一个专门生成RSS xml文件的插件`hexo-generator-feed`\n我们来安装它\n```\nnpm install hexo-generator-feed\n```\n\n看到`added 3 packages`说明安装成功了。\n\n#### 启用\n在博客工程文件根目录下`_config.yml`文件中添加如下内容\n```\n# Extensions\nplugins:\n    hexo-generator-feed\n#Feed Atom\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n```\n\n#### 生成RSS\n```\n$ hexo g\n(node:6520) [DEP0061] DeprecationWarning: fs.SyncWriteStream is depre                                                                                                                           cated.\nINFO  Start processing\nINFO  Files loaded in 6.33 s\nINFO  Generated: atom.xml <----------成功生成atom.xml文件\nINFO  Generated: sitemap.xml\nINFO  Generated: baidusitemap.xml\nINFO  Generated: about/index.html\n......\n......\n......\n```","slug":"hexo配置","published":1,"updated":"2019-09-30T08:36:55.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1681r6y0001sgwkpdli4qht"},{"title":"利用Hexo+GitHub搭建个人博客(一)","author":"JsonYe","date":"2019-09-30T05:55:00.000Z","_content":"\n## 前言\n很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。`hexo`让我的想法变成了现实。\n下面就简单说一下整体打搭建流程。\n\n## 搭建步骤：\n> 最开始以为要把hexo安装到服务器上，后来了解后恍然大悟，他是在本地安装的，然后将我们写的markdown文件转换为静态网站文件，放到github上，利用github来作为服务器的。\n\n 1. 安装git bash。\n 2. 安装npm。\n 3. 安装NodeJs\n 4. 申请github账户，并创建一个仓库，命名规范为  \"账户名\".github.io。\n 5. 创建SSH并添加到github上。\n 6. 安装hexo。\n 7. 部署项目，本地测试。\n 8. 上传到github上。\n \n到这一步，博客就搭建好了，域名可选择性进行关联。后续可以设置主题、添加RSS、设置评论、以及写文章。具体可参考[官方文档](https://hexo.io/zh-cn/docs/writing.html)","source":"_posts/first.md","raw":"title: 利用Hexo+GitHub搭建个人博客(一)\ncategories:\n  - hexo\ntags:\n  - hexo\nauthor: JsonYe\ndate: 2019-09-30 13:55:00\n---\n\n## 前言\n很久以前的一个想法，就是搭建一个个人博客，把个人在学习、生活中的故事记录下来。`hexo`让我的想法变成了现实。\n下面就简单说一下整体打搭建流程。\n\n## 搭建步骤：\n> 最开始以为要把hexo安装到服务器上，后来了解后恍然大悟，他是在本地安装的，然后将我们写的markdown文件转换为静态网站文件，放到github上，利用github来作为服务器的。\n\n 1. 安装git bash。\n 2. 安装npm。\n 3. 安装NodeJs\n 4. 申请github账户，并创建一个仓库，命名规范为  \"账户名\".github.io。\n 5. 创建SSH并添加到github上。\n 6. 安装hexo。\n 7. 部署项目，本地测试。\n 8. 上传到github上。\n \n到这一步，博客就搭建好了，域名可选择性进行关联。后续可以设置主题、添加RSS、设置评论、以及写文章。具体可参考[官方文档](https://hexo.io/zh-cn/docs/writing.html)","slug":"first","published":1,"updated":"2019-09-30T08:41:22.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1681svu000asgwk1rlfzaty"},{"title":"android发展史及系统架构","author":"JsonYe","copyright":true,"date":"2015-04-29T09:32:00.000Z","_content":"\n## 1.1 Android发展史与现状\n\nAndy Rubin创立22个月后→（2005年）Google收购。\n\n2008 Patrick Brady于Google I/O 演讲“Anatomy & Physiology of an Android”，并提出的 Android HAL 架构图。\n\n### Android版本升级  \nAndroid系统今后将继续每半年一次的升级步伐，分别定在每年的夏天和年终。每代Android系统都将以食物命名，比如1.5版叫做 Cupcake(纸杯蛋糕)，1.6版为Donut(甜甜圈)，然后是Eclair(法式奶油夹心甜点)和Flan(水果馅饼)。Donut将把社交网络功能作为升级重点，在“手机的各种体验中”都增加社交网络元素。  \n#### 1.5 (Cupcake)  \n基于Linux Kernel 2.6.27 2009年4月30日，官方1.5版本(Cupcake)的Android发布。主要的更新如下:  \n● 拍摄/回放视频，并支持上传到youtube  \n● 支持立体声蓝牙耳机，同时改善自动配对性能  \n● 最新的采用WebKit技术的浏览器，支持拷贝/粘帖和页面中搜索  \n● GPS性能大大提高  \n● 屏幕虚拟键盘  \n● 主屏幕增加音乐播放器和相框widgets  \n● 应用程序自动随着手机旋转  \n● 短信，Gmail，日历，浏览器的用户界面大幅改善，比如说Gmail现在可以批量删除邮件了  \n● 相机启动速度加快，拍摄图片可以直接上传到picasa  \n● 来电照片显示  \n#### 1.6 (Donut)  \n基于Linux Kernel 2.6.29 2009年9月15日, 1.6(Donut)版本SDK发布。主要的更新如下:  \n● 完全重新设计的Android Market  \n● 手势支持  \n● 支持CDMA网络  \n● 文字转语音系统(TXT-2-speech)  \n● 快速搜索框  \n● 全新的拍照界面  \n● 应用程序耗电查看  \n● 支持VPN  \n● 支持更多的屏幕分辨率  \n● 支持OpenCore2媒体引擎  \n● 新增面向视觉或听觉困难人群的易用性插件  \n#### 2.0/2.0.1/2.1(Eclair)  \n基于Linux Kernel 2.6.29 2009年10月26日, 2.0(Eclair)版本SDK发布。主要的更新如下:  \n● 优化硬件速度  \n● \"Car Home\"程序  \n● 支持更多的屏幕分辨率  \n● 重整界面  \n● 新的浏览器的用户界面和支持HTML5  \n● 新的联系人名单  \n● 更好的白色/黑色背景比率  \n● 改进Google Maps 3.1.2  \n● 支持Microsoft Exchange  \n● 支持内置相机闪光灯  \n● 数字变焦  \n● 改进的虚拟键盘  \n● 蓝牙2.1  \nAndroid的代号序列会按甜点名字中首个英文字母(C、D、E、F)的排列顺序。  \n下一个版本的Android将会命名为Froyo(冻酸奶,基于Linux Kernel 2.6.32)。Froyo 之后的版本的Android将会命名为Gingerbread(姜饼,基于Linux Kernel 2.6.33/34)。\n\n**Android****版本**\n\n**发布日期**\n\n**代号**\n\n**Android 1.1**\n\n**Android 1.5**\n\n2009年4月30日\n\nCupcake（纸杯蛋糕）\n\n**Android 1.6**\n\n2009年9月15日\n\nDonut（炸面圈）\n\n**Android 2.0/2.1**\n\n2009年10月26日\n\nEclair（长松饼）\n\n**Android 2.2**\n\n2010年5月20日\n\nFroyo（冻酸奶）\n\n**Android 2.3**\n\n2010年12月6日\n\nGingerbread（姜饼）\n\n**Android 3.0/3.1/3.2**\n\n2011年2月22日\n\nHoneycomb（蜂巢）\n\n**Android 4.0**\n\n2011年10月19日\n\nIce Cream Sandwich（冰淇淋三明治）\n\n**Android 4.1**\n\n2012年6月28日\n\nJelly Bean（果冻豆）\n\n**Android 4.2**\n\n2012年10月8日\n\nJelly Bean（果冻豆）\n\n**Android5.0**\n\n待定\n\nLime Pie（酸橙派）\n\n### 1.2 Android系统的架构与特性\n\n#### 1.2.1 Android系统架构\n\nAndroid系统的底层是建立在Linux系统之上的，它采用软件叠层（Software Stack）的方式进行构建。使得层与层之间相互分离，明确各层的分工。这种分工保证了层与层之间的低苟合，当下层发生改变的时候，上层应用程序无需做任何改变。\n\n下图为Android系统的系统架构图：\n\n![](http://s1.51cto.com/wyfs02/M01/25/73/wKioL1NgW-Si7ae7AAEJ_vZkaJ0908.jpg)\n\n如图可知，Android系统分为四个层，从高到底分别是：应用程序层（Application）、应用程序框架层（Application Framework）、系统运行库层（Libraries）和Linux内核层（Linux Kernel）。\n\nAndroid操作系统可以在四个主要层面上分为5个部分：\n\n##### 1\\. 应用程序层（Application）\n\nAndroid系统包含了一系列核心应用程序，包括电子邮件、短信SMS、日历、拨号器、地图、浏览器、联系人等。这些应用程序都是用Java语言编写。本书重点讲解如何编写Android系统上运行的应用程序，在程序分层上，与系统核心应用程序平级。\n\n##### 2\\. 应用程序框架层（Application Framework）\n\nAndroid应用程序框架提供了大量的API供开发人员使用，Android应用程序的开发，就是调用这些API，根据需求实现功能。\n\n应用程序框架是应用程序的基础。为了软件的复用，任何一个应用程序都可以开发Android系统的功能模块，只要发布的时候遵循应用程序框架的规范，其它应用程序也可以使用这个功能模块。\n\n##### 3\\. 系统运行库层（Libraries）**\n\nAndroid系统运行库是用C/C++语言编写的，是一套被不同组件所使用的函数库组成的集合。一般来说，Android应用开发者无法直接调用这套函数库，都是通过它上层的应用程序框架提供的API来对这些函数库进行调用。\n\n下面对一些核心库进行简单的介绍：\n\n> **Libc：**从BSD系统派生出来的标准C系统库，在此基础之上，为了便携式Linux系统专门进行了调整。\n> \n> **Medio Framework：**基于PacketView的OpenCORE，这套媒体库支持播放与录制硬盘及视频格式的文件，并能查看静态图片。\n> \n> **Surface Manager：**在执行多个应用程序的时，负责管理显示与存取操作间的互动，同时负责2D绘图与3D绘图进行显示合成。\n> \n> **WebKit：**Web浏览器引擎，该引擎为Android浏览器提供支持。\n> \n> **SGL：**底层的2D图像引擎。\n> \n> **3D libraries：**基于OpenGL ES 1.0API，提供使用软硬件实现3D加速的功能。\n> \n> **FreeType：**提供位图和向量字体的支持。\n> \n> **SQLite：**轻量级的关系型数据库。\n\n\n##### 4\\. Android运行时**\n\n    Android运行时由两部分完成：Android核心库和Dalvik虚拟机。其中核心库集提供了Java语言核心库所能使用的绝大部分功能，Dalvik虚拟机负责运行Android应用程序。\n\n    虽然Android应用程序通过Java语言编写，而每个Java程序都会在Java虚拟机JVM内运行，但是Android系统毕竟是运行在移动设备上的，由于硬件的限制， Android应用程序并不使用Java的虚拟机JVM来运行程序，而是使用自己独立的虚拟机Dalvik VM，它针对多个同时高效运行的虚拟机进行了优化。每个Android应用程序都运行在单独的一个Dalvik虚拟机内，因此Android系统可以方便对应用程序进行隔离。\n\n##### 5\\. Linux内核\n\nAndroid系统是基于Linux2.6之上建立的操作系统，它的Linux内核为Android系统提供了安全性、内存管理、进程管理、网络协议栈、驱动模型等核心系统服务。Linux内核帮助Android系统实现了底层硬件与上层软件之间的抽象。\n\n#### 1.2.2 Dalvik VM和JVM的区别\n\nJVM（Java虚拟机）是一个虚构出来的运行Java程序的运行时，是通过在实际的计算机上仿真模拟各种计算机功能的实现。它具有完善的硬件架构（如处理器、堆栈、寄存器等），还具有相应的指令系统，使用JVM就是使Java程序支持与操作系统无关。理论上在任何操作系统中，只要有对应的JVM，即可运行Java程序。\n\nDalvik VM是在Android系统上运行Android程序的虚拟机，其指令集是基于寄存器架构的，执行特有的文件格式-dex字节码来完成对象生命周期管理、堆栈管理、线程管理、安全异常管理、垃圾回收等重要功能。\n\n由于Android应用程序的开发编程语言是Java，而Java程序运行在JVM（Java虚拟机）上的，因此有些人会把Android的虚拟机DalvikVM和JVM弄混淆，但是实际上Dalvik并未遵守JVM规范，而且两者也是互不兼容。\n\n从Dalvik VM和JVM的编译过程分析，它们的编译过程如下：\n\n```\nJVM：.java→.class→.jar\nDalvik VM：.java→.class→.dex\n```\n\n从它们的编译过程可以看出，JVM运行的是.class文件的Java字节码，但是Dalvik VM运行的是其转换后的dex（Dalvik Executable）文件。JVM字节从.class文件或者JAR包中加载字节码然后运行，而Dalvik VM无法直接从.class文件或JAR包中加载字节码，它需要通过DX工具将应用程序所有的.class文件编译成一个.dex文件，Dalvik VM则运行这个.dex文件。\n\n下图显示了Dalvik VM与JVM编译过程的区别：\n\n![](http://s4.51cto.com/wyfs02/M01/25/73/wKiom1NgXMOTVyNiAAB-h8_94xE986.jpg)\n\n从图中可以看出，Dalvik VM把.java文件编译成.class后，会对.class进行重构，整合的基本元素（常量池、类定义、数据段）,最后压缩写进一个.dex文件中。其中，常量池描述了所有的常量，包括引用、方法名、数值常量等；类定义包括访问标识、类名等基本信息；数据段中包含各种被VM指定的方法代码以及类和方法的相关信息和实例变量。这种把多个.class文件进行整合的方法，大大提高了Android程序的运行速度，例如：应用程序中多个类定义了字符串常量TAG，而在JVM中，会编译成多个.class文件，每个.class文件的常量池中，均包含这个TAG常量，但是Dalvik VM在编译成.dex文件之后，其常量池里只有一个TAG常量。\n\nJVM和Dalvik VM还有一点非常重要的不同，就是基于的架构不同。JVM是基于栈的架构，而Dalvik VM是基于寄存器的架构。相对于基于栈的JVM而言，基于寄存器的Dalvik VM实现虽然牺牲了一些硬件上的通用性，但是它在代码的执行效率上要更胜一筹。一般来讲，VM中指令的解释执行的时间主要花费在以下三个方面：\n\n> 分发指令；\n> \n> 访问运算数；\n> \n> 执行运算；\n\n\n其中分发指令这个环节对性能的影响最大。在基于寄存器的Dalvik VM中，可以更有效的减少冗余指令的分发，减少内存的读写访问。\n\n从JVM和Dalvik VM的区别上来说，Dalvik VM主要是针对Android这个嵌入式操作系统的特点进行了各种优化，使其更省电、更省内存、运行效率更高，但是牺牲了一些JVM的与平台无关的特性。实际上，Dalvik VM本就是为Android设计的，无需考虑其它平台的问题。这里只是介绍了JVM和Dalvik VM的两个重要的区别，毕竟本书并不是讲解Android内核的，这里只是点明Dalvik VM的特点，读者对这部分的内容了解即可。\n\n### 1.2.3 Android系统平台的优势\n\nAndroid系统相对于其它操作系统，有如下几点优势：\n\n#### 1. 开放性\n\n首先就是Android系统的开放性，其开发平台允许任何移动终端厂商加入到Android联盟中来，降低了开发门槛，使其拥有更多的开发者，随着用户和应用的日益丰富，也将推进Android系统的成熟。同时，开放性有利于Android设备的普及以及市场竞争力，这样有利于消费者买到更低价位的Android设备。\n\n#### 2. 丰富的硬件选择\n\n同样由于Android系统的开放性，众多硬件厂商可以推出各种的搭载Android系统的设备。现如今，Android系统不仅仅只是运行在手机上，越来越多的设备开始支持Android系统，如电视、可佩戴设备、数码相机等。\n\n#### 3. 便于开发\n\nGoogle开放了Android的系统源码，提供了开发者一个自由的开发环境，不必受到各种条条框框的束缚。\n\n#### 4. Google服务的支持\n\nGoogle公司作为一个做服务的公司，它提供了如地图、邮件、搜索等服务，Android系统可以对这些服务进行无缝的结合。","source":"_posts/android发展史及系统架构.md","raw":"title: android发展史及系统架构\nauthor: JsonYe\ntags:\n  - Android\ncategories:\n  - Android基础\ncopyright: true\ndate: 2015-04-29 17:32:00\n---\n\n## 1.1 Android发展史与现状\n\nAndy Rubin创立22个月后→（2005年）Google收购。\n\n2008 Patrick Brady于Google I/O 演讲“Anatomy & Physiology of an Android”，并提出的 Android HAL 架构图。\n\n### Android版本升级  \nAndroid系统今后将继续每半年一次的升级步伐，分别定在每年的夏天和年终。每代Android系统都将以食物命名，比如1.5版叫做 Cupcake(纸杯蛋糕)，1.6版为Donut(甜甜圈)，然后是Eclair(法式奶油夹心甜点)和Flan(水果馅饼)。Donut将把社交网络功能作为升级重点，在“手机的各种体验中”都增加社交网络元素。  \n#### 1.5 (Cupcake)  \n基于Linux Kernel 2.6.27 2009年4月30日，官方1.5版本(Cupcake)的Android发布。主要的更新如下:  \n● 拍摄/回放视频，并支持上传到youtube  \n● 支持立体声蓝牙耳机，同时改善自动配对性能  \n● 最新的采用WebKit技术的浏览器，支持拷贝/粘帖和页面中搜索  \n● GPS性能大大提高  \n● 屏幕虚拟键盘  \n● 主屏幕增加音乐播放器和相框widgets  \n● 应用程序自动随着手机旋转  \n● 短信，Gmail，日历，浏览器的用户界面大幅改善，比如说Gmail现在可以批量删除邮件了  \n● 相机启动速度加快，拍摄图片可以直接上传到picasa  \n● 来电照片显示  \n#### 1.6 (Donut)  \n基于Linux Kernel 2.6.29 2009年9月15日, 1.6(Donut)版本SDK发布。主要的更新如下:  \n● 完全重新设计的Android Market  \n● 手势支持  \n● 支持CDMA网络  \n● 文字转语音系统(TXT-2-speech)  \n● 快速搜索框  \n● 全新的拍照界面  \n● 应用程序耗电查看  \n● 支持VPN  \n● 支持更多的屏幕分辨率  \n● 支持OpenCore2媒体引擎  \n● 新增面向视觉或听觉困难人群的易用性插件  \n#### 2.0/2.0.1/2.1(Eclair)  \n基于Linux Kernel 2.6.29 2009年10月26日, 2.0(Eclair)版本SDK发布。主要的更新如下:  \n● 优化硬件速度  \n● \"Car Home\"程序  \n● 支持更多的屏幕分辨率  \n● 重整界面  \n● 新的浏览器的用户界面和支持HTML5  \n● 新的联系人名单  \n● 更好的白色/黑色背景比率  \n● 改进Google Maps 3.1.2  \n● 支持Microsoft Exchange  \n● 支持内置相机闪光灯  \n● 数字变焦  \n● 改进的虚拟键盘  \n● 蓝牙2.1  \nAndroid的代号序列会按甜点名字中首个英文字母(C、D、E、F)的排列顺序。  \n下一个版本的Android将会命名为Froyo(冻酸奶,基于Linux Kernel 2.6.32)。Froyo 之后的版本的Android将会命名为Gingerbread(姜饼,基于Linux Kernel 2.6.33/34)。\n\n**Android****版本**\n\n**发布日期**\n\n**代号**\n\n**Android 1.1**\n\n**Android 1.5**\n\n2009年4月30日\n\nCupcake（纸杯蛋糕）\n\n**Android 1.6**\n\n2009年9月15日\n\nDonut（炸面圈）\n\n**Android 2.0/2.1**\n\n2009年10月26日\n\nEclair（长松饼）\n\n**Android 2.2**\n\n2010年5月20日\n\nFroyo（冻酸奶）\n\n**Android 2.3**\n\n2010年12月6日\n\nGingerbread（姜饼）\n\n**Android 3.0/3.1/3.2**\n\n2011年2月22日\n\nHoneycomb（蜂巢）\n\n**Android 4.0**\n\n2011年10月19日\n\nIce Cream Sandwich（冰淇淋三明治）\n\n**Android 4.1**\n\n2012年6月28日\n\nJelly Bean（果冻豆）\n\n**Android 4.2**\n\n2012年10月8日\n\nJelly Bean（果冻豆）\n\n**Android5.0**\n\n待定\n\nLime Pie（酸橙派）\n\n### 1.2 Android系统的架构与特性\n\n#### 1.2.1 Android系统架构\n\nAndroid系统的底层是建立在Linux系统之上的，它采用软件叠层（Software Stack）的方式进行构建。使得层与层之间相互分离，明确各层的分工。这种分工保证了层与层之间的低苟合，当下层发生改变的时候，上层应用程序无需做任何改变。\n\n下图为Android系统的系统架构图：\n\n![](http://s1.51cto.com/wyfs02/M01/25/73/wKioL1NgW-Si7ae7AAEJ_vZkaJ0908.jpg)\n\n如图可知，Android系统分为四个层，从高到底分别是：应用程序层（Application）、应用程序框架层（Application Framework）、系统运行库层（Libraries）和Linux内核层（Linux Kernel）。\n\nAndroid操作系统可以在四个主要层面上分为5个部分：\n\n##### 1\\. 应用程序层（Application）\n\nAndroid系统包含了一系列核心应用程序，包括电子邮件、短信SMS、日历、拨号器、地图、浏览器、联系人等。这些应用程序都是用Java语言编写。本书重点讲解如何编写Android系统上运行的应用程序，在程序分层上，与系统核心应用程序平级。\n\n##### 2\\. 应用程序框架层（Application Framework）\n\nAndroid应用程序框架提供了大量的API供开发人员使用，Android应用程序的开发，就是调用这些API，根据需求实现功能。\n\n应用程序框架是应用程序的基础。为了软件的复用，任何一个应用程序都可以开发Android系统的功能模块，只要发布的时候遵循应用程序框架的规范，其它应用程序也可以使用这个功能模块。\n\n##### 3\\. 系统运行库层（Libraries）**\n\nAndroid系统运行库是用C/C++语言编写的，是一套被不同组件所使用的函数库组成的集合。一般来说，Android应用开发者无法直接调用这套函数库，都是通过它上层的应用程序框架提供的API来对这些函数库进行调用。\n\n下面对一些核心库进行简单的介绍：\n\n> **Libc：**从BSD系统派生出来的标准C系统库，在此基础之上，为了便携式Linux系统专门进行了调整。\n> \n> **Medio Framework：**基于PacketView的OpenCORE，这套媒体库支持播放与录制硬盘及视频格式的文件，并能查看静态图片。\n> \n> **Surface Manager：**在执行多个应用程序的时，负责管理显示与存取操作间的互动，同时负责2D绘图与3D绘图进行显示合成。\n> \n> **WebKit：**Web浏览器引擎，该引擎为Android浏览器提供支持。\n> \n> **SGL：**底层的2D图像引擎。\n> \n> **3D libraries：**基于OpenGL ES 1.0API，提供使用软硬件实现3D加速的功能。\n> \n> **FreeType：**提供位图和向量字体的支持。\n> \n> **SQLite：**轻量级的关系型数据库。\n\n\n##### 4\\. Android运行时**\n\n    Android运行时由两部分完成：Android核心库和Dalvik虚拟机。其中核心库集提供了Java语言核心库所能使用的绝大部分功能，Dalvik虚拟机负责运行Android应用程序。\n\n    虽然Android应用程序通过Java语言编写，而每个Java程序都会在Java虚拟机JVM内运行，但是Android系统毕竟是运行在移动设备上的，由于硬件的限制， Android应用程序并不使用Java的虚拟机JVM来运行程序，而是使用自己独立的虚拟机Dalvik VM，它针对多个同时高效运行的虚拟机进行了优化。每个Android应用程序都运行在单独的一个Dalvik虚拟机内，因此Android系统可以方便对应用程序进行隔离。\n\n##### 5\\. Linux内核\n\nAndroid系统是基于Linux2.6之上建立的操作系统，它的Linux内核为Android系统提供了安全性、内存管理、进程管理、网络协议栈、驱动模型等核心系统服务。Linux内核帮助Android系统实现了底层硬件与上层软件之间的抽象。\n\n#### 1.2.2 Dalvik VM和JVM的区别\n\nJVM（Java虚拟机）是一个虚构出来的运行Java程序的运行时，是通过在实际的计算机上仿真模拟各种计算机功能的实现。它具有完善的硬件架构（如处理器、堆栈、寄存器等），还具有相应的指令系统，使用JVM就是使Java程序支持与操作系统无关。理论上在任何操作系统中，只要有对应的JVM，即可运行Java程序。\n\nDalvik VM是在Android系统上运行Android程序的虚拟机，其指令集是基于寄存器架构的，执行特有的文件格式-dex字节码来完成对象生命周期管理、堆栈管理、线程管理、安全异常管理、垃圾回收等重要功能。\n\n由于Android应用程序的开发编程语言是Java，而Java程序运行在JVM（Java虚拟机）上的，因此有些人会把Android的虚拟机DalvikVM和JVM弄混淆，但是实际上Dalvik并未遵守JVM规范，而且两者也是互不兼容。\n\n从Dalvik VM和JVM的编译过程分析，它们的编译过程如下：\n\n```\nJVM：.java→.class→.jar\nDalvik VM：.java→.class→.dex\n```\n\n从它们的编译过程可以看出，JVM运行的是.class文件的Java字节码，但是Dalvik VM运行的是其转换后的dex（Dalvik Executable）文件。JVM字节从.class文件或者JAR包中加载字节码然后运行，而Dalvik VM无法直接从.class文件或JAR包中加载字节码，它需要通过DX工具将应用程序所有的.class文件编译成一个.dex文件，Dalvik VM则运行这个.dex文件。\n\n下图显示了Dalvik VM与JVM编译过程的区别：\n\n![](http://s4.51cto.com/wyfs02/M01/25/73/wKiom1NgXMOTVyNiAAB-h8_94xE986.jpg)\n\n从图中可以看出，Dalvik VM把.java文件编译成.class后，会对.class进行重构，整合的基本元素（常量池、类定义、数据段）,最后压缩写进一个.dex文件中。其中，常量池描述了所有的常量，包括引用、方法名、数值常量等；类定义包括访问标识、类名等基本信息；数据段中包含各种被VM指定的方法代码以及类和方法的相关信息和实例变量。这种把多个.class文件进行整合的方法，大大提高了Android程序的运行速度，例如：应用程序中多个类定义了字符串常量TAG，而在JVM中，会编译成多个.class文件，每个.class文件的常量池中，均包含这个TAG常量，但是Dalvik VM在编译成.dex文件之后，其常量池里只有一个TAG常量。\n\nJVM和Dalvik VM还有一点非常重要的不同，就是基于的架构不同。JVM是基于栈的架构，而Dalvik VM是基于寄存器的架构。相对于基于栈的JVM而言，基于寄存器的Dalvik VM实现虽然牺牲了一些硬件上的通用性，但是它在代码的执行效率上要更胜一筹。一般来讲，VM中指令的解释执行的时间主要花费在以下三个方面：\n\n> 分发指令；\n> \n> 访问运算数；\n> \n> 执行运算；\n\n\n其中分发指令这个环节对性能的影响最大。在基于寄存器的Dalvik VM中，可以更有效的减少冗余指令的分发，减少内存的读写访问。\n\n从JVM和Dalvik VM的区别上来说，Dalvik VM主要是针对Android这个嵌入式操作系统的特点进行了各种优化，使其更省电、更省内存、运行效率更高，但是牺牲了一些JVM的与平台无关的特性。实际上，Dalvik VM本就是为Android设计的，无需考虑其它平台的问题。这里只是介绍了JVM和Dalvik VM的两个重要的区别，毕竟本书并不是讲解Android内核的，这里只是点明Dalvik VM的特点，读者对这部分的内容了解即可。\n\n### 1.2.3 Android系统平台的优势\n\nAndroid系统相对于其它操作系统，有如下几点优势：\n\n#### 1. 开放性\n\n首先就是Android系统的开放性，其开发平台允许任何移动终端厂商加入到Android联盟中来，降低了开发门槛，使其拥有更多的开发者，随着用户和应用的日益丰富，也将推进Android系统的成熟。同时，开放性有利于Android设备的普及以及市场竞争力，这样有利于消费者买到更低价位的Android设备。\n\n#### 2. 丰富的硬件选择\n\n同样由于Android系统的开放性，众多硬件厂商可以推出各种的搭载Android系统的设备。现如今，Android系统不仅仅只是运行在手机上，越来越多的设备开始支持Android系统，如电视、可佩戴设备、数码相机等。\n\n#### 3. 便于开发\n\nGoogle开放了Android的系统源码，提供了开发者一个自由的开发环境，不必受到各种条条框框的束缚。\n\n#### 4. Google服务的支持\n\nGoogle公司作为一个做服务的公司，它提供了如地图、邮件、搜索等服务，Android系统可以对这些服务进行无缝的结合。","slug":"android发展史及系统架构","published":1,"updated":"2019-09-30T09:42:21.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1685j0t0000e8wkfzb1omyg"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1681r6h0000sgwkquosqfc6","category_id":"ck1681r750002sgwk4t3qq8a4","_id":"ck1681r7l0007sgwkomr1yjzh"},{"post_id":"ck1681r6y0001sgwkpdli4qht","category_id":"ck1681r7e0004sgwkcqhkjwf7","_id":"ck1681r7n0009sgwktpe0w35c"},{"post_id":"ck1681svu000asgwk1rlfzaty","category_id":"ck1681r7e0004sgwkcqhkjwf7","_id":"ck1681sw7000dsgwki98hxt1d"},{"post_id":"ck1685j0t0000e8wkfzb1omyg","category_id":"ck1681r750002sgwk4t3qq8a4","_id":"ck1685j1c0002e8wkdmqd1hyf"}],"PostTag":[{"post_id":"ck1681r6h0000sgwkquosqfc6","tag_id":"ck1681r7b0003sgwkxs94mgs3","_id":"ck1681r7k0006sgwksfh4utx4"},{"post_id":"ck1681r6y0001sgwkpdli4qht","tag_id":"ck1681r7i0005sgwk4iqfs4pq","_id":"ck1681r7m0008sgwkae6zhu3v"},{"post_id":"ck1681svu000asgwk1rlfzaty","tag_id":"ck1681r7i0005sgwk4iqfs4pq","_id":"ck1681sw6000csgwk0np7tokf"},{"post_id":"ck1685j0t0000e8wkfzb1omyg","tag_id":"ck1681r7b0003sgwkxs94mgs3","_id":"ck1685j1a0001e8wkf8cb5yic"}],"Tag":[{"name":"Android","_id":"ck1681r7b0003sgwkxs94mgs3"},{"name":"hexo","_id":"ck1681r7i0005sgwk4iqfs4pq"}]}}